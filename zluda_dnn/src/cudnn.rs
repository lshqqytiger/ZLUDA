pub use super::extra::*;

/* automatically generated by rust-bindgen 0.69.4 */

#[repr(C)]
#[derive(Copy, Clone)]
pub struct CUstream_st {
    _unused: [u8; 0],
}
#[doc = " CUDA stream"]
pub type cudaStream_t = *mut CUstream_st;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CUgraph_st {
    _unused: [u8; 0],
}
#[doc = " CUDA graph"]
pub type cudaGraph_t = *mut CUgraph_st;
impl libraryPropertyType_t {
    pub const MAJOR_VERSION: libraryPropertyType_t = libraryPropertyType_t(0);
}
impl libraryPropertyType_t {
    pub const MINOR_VERSION: libraryPropertyType_t = libraryPropertyType_t(1);
}
impl libraryPropertyType_t {
    pub const PATCH_LEVEL: libraryPropertyType_t = libraryPropertyType_t(2);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct libraryPropertyType_t(pub ::std::os::raw::c_int);
pub use self::libraryPropertyType_t as libraryPropertyType;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnContext {
    _unused: [u8; 0],
}
pub type cudnnHandle_t = *mut cudnnContext;

#[no_mangle]
pub extern "system" fn cudnnGetVersion() -> usize {
    90100usize
}

#[no_mangle]
pub extern "system" fn cudnnGetMaxDeviceVersion() -> usize {
    unimplemented!()
}

#[no_mangle]
pub extern "system" fn cudnnGetCudartVersion() -> usize {
    unimplemented!()
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_SUCCESS: cudnnStatus_t = cudnnStatus_t(0);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_NOT_INITIALIZED: cudnnStatus_t = cudnnStatus_t(1001);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_SUBLIBRARY_VERSION_MISMATCH: cudnnStatus_t = cudnnStatus_t(1002);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_SERIALIZATION_VERSION_MISMATCH: cudnnStatus_t = cudnnStatus_t(1003);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_DEPRECATED: cudnnStatus_t = cudnnStatus_t(1004);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_LICENSE_ERROR: cudnnStatus_t = cudnnStatus_t(1005);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_RUNTIME_IN_PROGRESS: cudnnStatus_t = cudnnStatus_t(1006);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_RUNTIME_FP_OVERFLOW: cudnnStatus_t = cudnnStatus_t(1007);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_SUBLIBRARY_LOADING_FAILED: cudnnStatus_t = cudnnStatus_t(1008);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_BAD_PARAM: cudnnStatus_t = cudnnStatus_t(2000);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_BAD_PARAM_NULL_POINTER: cudnnStatus_t = cudnnStatus_t(2002);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_BAD_PARAM_MISALIGNED_POINTER: cudnnStatus_t = cudnnStatus_t(2003);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_BAD_PARAM_NOT_FINALIZED: cudnnStatus_t = cudnnStatus_t(2004);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_BAD_PARAM_OUT_OF_BOUND: cudnnStatus_t = cudnnStatus_t(2005);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_BAD_PARAM_SIZE_INSUFFICIENT: cudnnStatus_t = cudnnStatus_t(2006);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_BAD_PARAM_STREAM_MISMATCH: cudnnStatus_t = cudnnStatus_t(2007);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_BAD_PARAM_SHAPE_MISMATCH: cudnnStatus_t = cudnnStatus_t(2008);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_BAD_PARAM_DUPLICATED_ENTRIES: cudnnStatus_t = cudnnStatus_t(2009);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_BAD_PARAM_ATTRIBUTE_TYPE: cudnnStatus_t = cudnnStatus_t(2010);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_BAD_PARAM_CUDA_GRAPH_MISMATCH: cudnnStatus_t = cudnnStatus_t(2011);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_BAD_PARAM_DESCRIPTOR_TYPE: cudnnStatus_t = cudnnStatus_t(2012);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_NOT_SUPPORTED: cudnnStatus_t = cudnnStatus_t(3000);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_NOT_SUPPORTED_GRAPH_PATTERN: cudnnStatus_t = cudnnStatus_t(3001);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_NOT_SUPPORTED_SHAPE: cudnnStatus_t = cudnnStatus_t(3002);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_NOT_SUPPORTED_DATA_TYPE: cudnnStatus_t = cudnnStatus_t(3003);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_NOT_SUPPORTED_LAYOUT: cudnnStatus_t = cudnnStatus_t(3004);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_NOT_SUPPORTED_INCOMPATIBLE_CUDA_DRIVER: cudnnStatus_t =
        cudnnStatus_t(3005);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_NOT_SUPPORTED_INCOMPATIBLE_CUDART: cudnnStatus_t = cudnnStatus_t(3006);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_NOT_SUPPORTED_ARCH_MISMATCH: cudnnStatus_t = cudnnStatus_t(3007);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_NOT_SUPPORTED_RUNTIME_PREREQUISITE_MISSING: cudnnStatus_t =
        cudnnStatus_t(3008);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_NOT_SUPPORTED_SUBLIBRARY_UNAVAILABLE: cudnnStatus_t =
        cudnnStatus_t(3009);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_NOT_SUPPORTED_SHARED_MEMORY_INSUFFICIENT: cudnnStatus_t =
        cudnnStatus_t(3010);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_NOT_SUPPORTED_PADDING: cudnnStatus_t = cudnnStatus_t(3011);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_NOT_SUPPORTED_BAD_LAUNCH_PARAM: cudnnStatus_t = cudnnStatus_t(3012);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_NOT_SUPPORTED_CUDA_GRAPH_NATIVE_API: cudnnStatus_t = cudnnStatus_t(3013);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_INTERNAL_ERROR: cudnnStatus_t = cudnnStatus_t(4000);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_INTERNAL_ERROR_COMPILATION_FAILED: cudnnStatus_t = cudnnStatus_t(4001);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_INTERNAL_ERROR_UNEXPECTED_VALUE: cudnnStatus_t = cudnnStatus_t(4002);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_INTERNAL_ERROR_HOST_ALLOCATION_FAILED: cudnnStatus_t =
        cudnnStatus_t(4003);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_INTERNAL_ERROR_DEVICE_ALLOCATION_FAILED: cudnnStatus_t =
        cudnnStatus_t(4004);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_INTERNAL_ERROR_BAD_LAUNCH_PARAM: cudnnStatus_t = cudnnStatus_t(4005);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_INTERNAL_ERROR_TEXTURE_CREATION_FAILED: cudnnStatus_t =
        cudnnStatus_t(4006);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_EXECUTION_FAILED: cudnnStatus_t = cudnnStatus_t(5000);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_EXECUTION_FAILED_CUDA_DRIVER: cudnnStatus_t = cudnnStatus_t(5001);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_EXECUTION_FAILED_CUBLAS: cudnnStatus_t = cudnnStatus_t(5002);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_EXECUTION_FAILED_CUDART: cudnnStatus_t = cudnnStatus_t(5003);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_EXECUTION_FAILED_CURAND: cudnnStatus_t = cudnnStatus_t(5004);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_ALLOC_FAILED: cudnnStatus_t = cudnnStatus_t(4003);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_INVALID_VALUE: cudnnStatus_t = cudnnStatus_t(2001);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_ARCH_MISMATCH: cudnnStatus_t = cudnnStatus_t(3007);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_MAPPING_ERROR: cudnnStatus_t = cudnnStatus_t(4006);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_RUNTIME_PREREQUISITE_MISSING: cudnnStatus_t = cudnnStatus_t(3008);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_VERSION_MISMATCH: cudnnStatus_t = cudnnStatus_t(1002);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnStatus_t(pub ::std::os::raw::c_int);

#[no_mangle]
pub unsafe extern "system" fn cudnnGetErrorString(
    status: cudnnStatus_t,
) -> *const ::std::os::raw::c_char {
    crate::get_error_string(status)
}

#[no_mangle]
pub unsafe extern "system" fn cudnnGetLastErrorString(
    message: *mut ::std::os::raw::c_char,
    max_size: usize,
) {
    crate::get_last_error_string(message, max_size);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnRuntimeTag_t {
    _unused: [u8; 0],
}
impl cudnnErrQueryMode_t {
    pub const CUDNN_ERRQUERY_RAWCODE: cudnnErrQueryMode_t = cudnnErrQueryMode_t(0);
}
impl cudnnErrQueryMode_t {
    pub const CUDNN_ERRQUERY_NONBLOCKING: cudnnErrQueryMode_t = cudnnErrQueryMode_t(1);
}
impl cudnnErrQueryMode_t {
    pub const CUDNN_ERRQUERY_BLOCKING: cudnnErrQueryMode_t = cudnnErrQueryMode_t(2);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnErrQueryMode_t(pub ::std::os::raw::c_int);

#[no_mangle]
pub extern "system" fn cudnnQueryRuntimeError(
    handle: cudnnHandle_t,
    rstatus: *mut cudnnStatus_t,
    mode: cudnnErrQueryMode_t,
    tag: *mut cudnnRuntimeTag_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub unsafe extern "system" fn cudnnGetProperty(
    type_: libraryPropertyType,
    value: *mut ::std::os::raw::c_int,
) -> cudnnStatus_t {
    crate::get_property(type_, value)
}

#[no_mangle]
pub unsafe extern "system" fn cudnnCreate(handle: *mut cudnnHandle_t) -> cudnnStatus_t {
    crate::create(handle)
}

#[no_mangle]
pub unsafe extern "system" fn cudnnDestroy(handle: cudnnHandle_t) -> cudnnStatus_t {
    crate::destroy(handle)
}

#[no_mangle]
pub unsafe extern "system" fn cudnnSetStream(
    handle: cudnnHandle_t,
    streamId: cudaStream_t,
) -> cudnnStatus_t {
    crate::set_stream(handle, streamId)
}

#[no_mangle]
pub unsafe extern "system" fn cudnnGetStream(
    handle: cudnnHandle_t,
    streamId: *mut cudaStream_t,
) -> cudnnStatus_t {
    crate::get_stream(handle, streamId)
}
impl cudnnDataType_t {
    pub const CUDNN_DATA_FLOAT: cudnnDataType_t = cudnnDataType_t(0);
}
impl cudnnDataType_t {
    pub const CUDNN_DATA_DOUBLE: cudnnDataType_t = cudnnDataType_t(1);
}
impl cudnnDataType_t {
    pub const CUDNN_DATA_HALF: cudnnDataType_t = cudnnDataType_t(2);
}
impl cudnnDataType_t {
    pub const CUDNN_DATA_INT8: cudnnDataType_t = cudnnDataType_t(3);
}
impl cudnnDataType_t {
    pub const CUDNN_DATA_INT32: cudnnDataType_t = cudnnDataType_t(4);
}
impl cudnnDataType_t {
    pub const CUDNN_DATA_INT8x4: cudnnDataType_t = cudnnDataType_t(5);
}
impl cudnnDataType_t {
    pub const CUDNN_DATA_UINT8: cudnnDataType_t = cudnnDataType_t(6);
}
impl cudnnDataType_t {
    pub const CUDNN_DATA_UINT8x4: cudnnDataType_t = cudnnDataType_t(7);
}
impl cudnnDataType_t {
    pub const CUDNN_DATA_INT8x32: cudnnDataType_t = cudnnDataType_t(8);
}
impl cudnnDataType_t {
    pub const CUDNN_DATA_BFLOAT16: cudnnDataType_t = cudnnDataType_t(9);
}
impl cudnnDataType_t {
    pub const CUDNN_DATA_INT64: cudnnDataType_t = cudnnDataType_t(10);
}
impl cudnnDataType_t {
    pub const CUDNN_DATA_BOOLEAN: cudnnDataType_t = cudnnDataType_t(11);
}
impl cudnnDataType_t {
    pub const CUDNN_DATA_FP8_E4M3: cudnnDataType_t = cudnnDataType_t(12);
}
impl cudnnDataType_t {
    pub const CUDNN_DATA_FP8_E5M2: cudnnDataType_t = cudnnDataType_t(13);
}
impl cudnnDataType_t {
    pub const CUDNN_DATA_FAST_FLOAT_FOR_FP8: cudnnDataType_t = cudnnDataType_t(14);
}
impl cudnnDataType_t {
    pub const CUDNN_DATA_FP8_E8M0: cudnnDataType_t = cudnnDataType_t(15);
}
impl cudnnDataType_t {
    pub const CUDNN_DATA_FP4_E2M1: cudnnDataType_t = cudnnDataType_t(16);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnDataType_t(pub ::std::os::raw::c_int);
impl cudnnMathType_t {
    pub const CUDNN_DEFAULT_MATH: cudnnMathType_t = cudnnMathType_t(0);
}
impl cudnnMathType_t {
    pub const CUDNN_TENSOR_OP_MATH: cudnnMathType_t = cudnnMathType_t(1);
}
impl cudnnMathType_t {
    pub const CUDNN_TENSOR_OP_MATH_ALLOW_CONVERSION: cudnnMathType_t = cudnnMathType_t(2);
}
impl cudnnMathType_t {
    pub const CUDNN_FMA_MATH: cudnnMathType_t = cudnnMathType_t(3);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnMathType_t(pub ::std::os::raw::c_int);
impl cudnnNanPropagation_t {
    pub const CUDNN_NOT_PROPAGATE_NAN: cudnnNanPropagation_t = cudnnNanPropagation_t(0);
}
impl cudnnNanPropagation_t {
    pub const CUDNN_PROPAGATE_NAN: cudnnNanPropagation_t = cudnnNanPropagation_t(1);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnNanPropagation_t(pub ::std::os::raw::c_int);
impl cudnnCTCGradMode_t {
    pub const CUDNN_CTC_ZERO_OOB_GRADIENTS: cudnnCTCGradMode_t = cudnnCTCGradMode_t(0);
}
impl cudnnCTCGradMode_t {
    pub const CUDNN_CTC_SKIP_OOB_GRADIENTS: cudnnCTCGradMode_t = cudnnCTCGradMode_t(1);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnCTCGradMode_t(pub ::std::os::raw::c_int);
impl cudnnTensorFormat_t {
    pub const CUDNN_TENSOR_NCHW: cudnnTensorFormat_t = cudnnTensorFormat_t(0);
}
impl cudnnTensorFormat_t {
    pub const CUDNN_TENSOR_NHWC: cudnnTensorFormat_t = cudnnTensorFormat_t(1);
}
impl cudnnTensorFormat_t {
    pub const CUDNN_TENSOR_NCHW_VECT_C: cudnnTensorFormat_t = cudnnTensorFormat_t(2);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnTensorFormat_t(pub ::std::os::raw::c_int);
impl cudnnReduceTensorOp_t {
    pub const CUDNN_REDUCE_TENSOR_ADD: cudnnReduceTensorOp_t = cudnnReduceTensorOp_t(0);
}
impl cudnnReduceTensorOp_t {
    pub const CUDNN_REDUCE_TENSOR_MUL: cudnnReduceTensorOp_t = cudnnReduceTensorOp_t(1);
}
impl cudnnReduceTensorOp_t {
    pub const CUDNN_REDUCE_TENSOR_MIN: cudnnReduceTensorOp_t = cudnnReduceTensorOp_t(2);
}
impl cudnnReduceTensorOp_t {
    pub const CUDNN_REDUCE_TENSOR_MAX: cudnnReduceTensorOp_t = cudnnReduceTensorOp_t(3);
}
impl cudnnReduceTensorOp_t {
    pub const CUDNN_REDUCE_TENSOR_AMAX: cudnnReduceTensorOp_t = cudnnReduceTensorOp_t(4);
}
impl cudnnReduceTensorOp_t {
    pub const CUDNN_REDUCE_TENSOR_AVG: cudnnReduceTensorOp_t = cudnnReduceTensorOp_t(5);
}
impl cudnnReduceTensorOp_t {
    pub const CUDNN_REDUCE_TENSOR_NORM1: cudnnReduceTensorOp_t = cudnnReduceTensorOp_t(6);
}
impl cudnnReduceTensorOp_t {
    pub const CUDNN_REDUCE_TENSOR_NORM2: cudnnReduceTensorOp_t = cudnnReduceTensorOp_t(7);
}
impl cudnnReduceTensorOp_t {
    pub const CUDNN_REDUCE_TENSOR_MUL_NO_ZEROS: cudnnReduceTensorOp_t = cudnnReduceTensorOp_t(8);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnReduceTensorOp_t(pub ::std::os::raw::c_int);
impl cudnnActivationMode_t {
    pub const CUDNN_ACTIVATION_SIGMOID: cudnnActivationMode_t = cudnnActivationMode_t(0);
}
impl cudnnActivationMode_t {
    pub const CUDNN_ACTIVATION_RELU: cudnnActivationMode_t = cudnnActivationMode_t(1);
}
impl cudnnActivationMode_t {
    pub const CUDNN_ACTIVATION_TANH: cudnnActivationMode_t = cudnnActivationMode_t(2);
}
impl cudnnActivationMode_t {
    pub const CUDNN_ACTIVATION_CLIPPED_RELU: cudnnActivationMode_t = cudnnActivationMode_t(3);
}
impl cudnnActivationMode_t {
    pub const CUDNN_ACTIVATION_ELU: cudnnActivationMode_t = cudnnActivationMode_t(4);
}
impl cudnnActivationMode_t {
    pub const CUDNN_ACTIVATION_IDENTITY: cudnnActivationMode_t = cudnnActivationMode_t(5);
}
impl cudnnActivationMode_t {
    pub const CUDNN_ACTIVATION_SWISH: cudnnActivationMode_t = cudnnActivationMode_t(6);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnActivationMode_t(pub ::std::os::raw::c_int);
impl cudnnSeverity_t {
    pub const CUDNN_SEV_FATAL: cudnnSeverity_t = cudnnSeverity_t(0);
}
impl cudnnSeverity_t {
    pub const CUDNN_SEV_ERROR: cudnnSeverity_t = cudnnSeverity_t(1);
}
impl cudnnSeverity_t {
    pub const CUDNN_SEV_WARNING: cudnnSeverity_t = cudnnSeverity_t(2);
}
impl cudnnSeverity_t {
    pub const CUDNN_SEV_INFO: cudnnSeverity_t = cudnnSeverity_t(3);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnSeverity_t(pub ::std::os::raw::c_int);
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnDebugStruct {
    pub cudnn_version: ::std::os::raw::c_uint,
    pub cudnnStatus: cudnnStatus_t,
    pub time_sec: ::std::os::raw::c_uint,
    pub time_usec: ::std::os::raw::c_uint,
    pub time_delta: ::std::os::raw::c_uint,
    pub handle: cudnnHandle_t,
    pub stream: cudaStream_t,
    pub pid: ::std::os::raw::c_ulonglong,
    pub tid: ::std::os::raw::c_ulonglong,
    pub cudaDeviceId: ::std::os::raw::c_int,
    pub reserved: [::std::os::raw::c_int; 15usize],
}
pub type cudnnDebug_t = cudnnDebugStruct;
pub type cudnnCallback_t = ::std::option::Option<
    unsafe extern "C" fn(
        sev: cudnnSeverity_t,
        udata: *mut ::std::os::raw::c_void,
        dbg: *const cudnnDebug_t,
        msg: *const ::std::os::raw::c_char,
    ),
>;

#[no_mangle]
pub extern "system" fn cudnnSetCallback(
    mask: ::std::os::raw::c_uint,
    udata: *mut ::std::os::raw::c_void,
    fptr: cudnnCallback_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnGetCallback(
    mask: *mut ::std::os::raw::c_uint,
    udata: *mut *mut ::std::os::raw::c_void,
    fptr: *mut cudnnCallback_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnGraphVersionCheck() -> cudnnStatus_t {
    crate::unsupported()
}
impl cudnnConvolutionMode_t {
    pub const CUDNN_CONVOLUTION: cudnnConvolutionMode_t = cudnnConvolutionMode_t(0);
}
impl cudnnConvolutionMode_t {
    pub const CUDNN_CROSS_CORRELATION: cudnnConvolutionMode_t = cudnnConvolutionMode_t(1);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnConvolutionMode_t(pub ::std::os::raw::c_int);
impl cudnnReorderType_t {
    pub const CUDNN_DEFAULT_REORDER: cudnnReorderType_t = cudnnReorderType_t(0);
}
impl cudnnReorderType_t {
    pub const CUDNN_NO_REORDER: cudnnReorderType_t = cudnnReorderType_t(1);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnReorderType_t(pub ::std::os::raw::c_int);
pub type cudnnBackendDescriptor_t = *mut ::std::os::raw::c_void;
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_POINTWISE_MODE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(0);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_POINTWISE_MATH_PREC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_POINTWISE_NAN_PROPAGATION: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_POINTWISE_RELU_LOWER_CLIP: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(3);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_POINTWISE_RELU_UPPER_CLIP: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(4);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_POINTWISE_RELU_LOWER_CLIP_SLOPE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(5);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_POINTWISE_ELU_ALPHA: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(6);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_POINTWISE_SOFTPLUS_BETA: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(7);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_POINTWISE_SWISH_BETA: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(8);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_POINTWISE_AXIS: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(9);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_CONVOLUTION_COMP_TYPE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(100);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_CONVOLUTION_CONV_MODE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(101);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_CONVOLUTION_DILATIONS: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(102);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_CONVOLUTION_FILTER_STRIDES: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(103);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_CONVOLUTION_POST_PADDINGS: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(104);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_CONVOLUTION_PRE_PADDINGS: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(105);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_CONVOLUTION_SPATIAL_DIMS: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(106);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_ENGINEHEUR_MODE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(200);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_ENGINEHEUR_OPERATION_GRAPH: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(201);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_ENGINEHEUR_RESULTS: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(202);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_ENGINEHEUR_SM_COUNT_TARGET: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(203);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_ENGINECFG_ENGINE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(300);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_ENGINECFG_INTERMEDIATE_INFO: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(301);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_ENGINECFG_KNOB_CHOICES: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(302);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_ENGINECFG_WORKSPACE_SIZE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(303);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_ENGINECFG_SHARED_MEMORY_USED: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(304);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_EXECUTION_PLAN_HANDLE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(400);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_EXECUTION_PLAN_ENGINE_CONFIG: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(401);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_EXECUTION_PLAN_WORKSPACE_SIZE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(402);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_EXECUTION_PLAN_COMPUTED_INTERMEDIATE_UIDS: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(403);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_EXECUTION_PLAN_RUN_ONLY_INTERMEDIATE_UIDS: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(404);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_EXECUTION_PLAN_JSON_REPRESENTATION: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(405);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_EXECUTION_PLAN_KERNEL_CACHE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(406);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_INTERMEDIATE_INFO_UNIQUE_ID: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(500);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_INTERMEDIATE_INFO_SIZE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(501);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_INTERMEDIATE_INFO_DEPENDENT_DATA_UIDS: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(502);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_INTERMEDIATE_INFO_DEPENDENT_ATTRIBUTES: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(503);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_KNOB_CHOICE_KNOB_TYPE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(600);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_KNOB_CHOICE_KNOB_VALUE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(601);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_CONVOLUTION_FORWARD_ALPHA: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(700);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_CONVOLUTION_FORWARD_BETA: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(701);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_CONVOLUTION_FORWARD_CONV_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(702);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_CONVOLUTION_FORWARD_W: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(703);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_CONVOLUTION_FORWARD_X: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(704);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_CONVOLUTION_FORWARD_Y: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(705);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_DATA_ALPHA: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(706);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_DATA_BETA: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(707);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_DATA_CONV_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(708);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_DATA_W: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(709);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_DATA_DX: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(710);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_DATA_DY: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(711);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_FILTER_ALPHA: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(712);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_FILTER_BETA: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(713);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_FILTER_CONV_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(714);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_FILTER_DW: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(715);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_FILTER_X: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(716);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_FILTER_DY: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(717);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_POINTWISE_PW_DESCRIPTOR: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(750);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_POINTWISE_XDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(751);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_POINTWISE_BDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(752);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_POINTWISE_YDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(753);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_POINTWISE_ALPHA1: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(754);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_POINTWISE_ALPHA2: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(755);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_POINTWISE_DXDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(756);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_POINTWISE_DYDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(757);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_POINTWISE_TDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(758);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_GENSTATS_MODE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(770);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_GENSTATS_MATH_PREC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(771);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_GENSTATS_XDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(772);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_GENSTATS_SUMDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(773);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_GENSTATS_SQSUMDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(774);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_STATS_MODE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(780);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_MATH_PREC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(781);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_Y_SUM_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(782);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_Y_SQ_SUM_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(783);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_SCALE_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(784);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_BIAS_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(785);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_PREV_RUNNING_MEAN_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(786);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_PREV_RUNNING_VAR_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(787);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_UPDATED_RUNNING_MEAN_DESC:
        cudnnBackendAttributeName_t = cudnnBackendAttributeName_t(788);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_UPDATED_RUNNING_VAR_DESC:
        cudnnBackendAttributeName_t = cudnnBackendAttributeName_t(789);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_SAVED_MEAN_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(790);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_SAVED_INV_STD_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(791);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_EQ_SCALE_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(792);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_EQ_BIAS_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(793);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_ACCUM_COUNT_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(794);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_EPSILON_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(795);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_EXP_AVERATE_FACTOR_DESC:
        cudnnBackendAttributeName_t = cudnnBackendAttributeName_t(796);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATIONGRAPH_HANDLE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(800);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATIONGRAPH_OPS: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(801);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATIONGRAPH_ENGINE_GLOBAL_COUNT: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(802);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATIONGRAPH_IS_DYNAMIC_SHAPE_ENABLED: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(803);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATIONGRAPH_IS_SAME_TOPOLOGY: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(804);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_TENSOR_BYTE_ALIGNMENT: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(900);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_TENSOR_DATA_TYPE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(901);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_TENSOR_DIMENSIONS: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(902);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_TENSOR_STRIDES: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(903);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_TENSOR_VECTOR_COUNT: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(904);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_TENSOR_VECTORIZED_DIMENSION: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(905);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_TENSOR_UNIQUE_ID: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(906);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_TENSOR_IS_VIRTUAL: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(907);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_TENSOR_IS_BY_VALUE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(908);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_TENSOR_REORDERING_MODE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(909);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_TENSOR_RAGGED_OFFSET_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(913);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_VARIANT_PACK_UNIQUE_IDS: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1000);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_VARIANT_PACK_DATA_POINTERS: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1001);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_VARIANT_PACK_INTERMEDIATES: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1002);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_VARIANT_PACK_WORKSPACE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1003);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_LAYOUT_INFO_TENSOR_UID: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1100);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_LAYOUT_INFO_TYPES: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1101);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_KNOB_INFO_TYPE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1200);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_KNOB_INFO_MAXIMUM_VALUE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1201);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_KNOB_INFO_MINIMUM_VALUE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1202);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_KNOB_INFO_STRIDE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1203);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_ENGINE_OPERATION_GRAPH: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1300);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_ENGINE_GLOBAL_INDEX: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1301);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_ENGINE_KNOB_INFO: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1302);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_ENGINE_NUMERICAL_NOTE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1303);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_ENGINE_LAYOUT_INFO: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1304);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_ENGINE_BEHAVIOR_NOTE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1305);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_ENGINE_SM_COUNT_TARGET: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1306);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_MATMUL_COMP_TYPE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1500);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_MATMUL_PADDING_VALUE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1503);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_MATMUL_ADESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1520);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_MATMUL_BDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1521);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_MATMUL_CDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1522);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_MATMUL_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1523);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_MATMUL_IRREGULARLY_STRIDED_BATCH_COUNT:
        cudnnBackendAttributeName_t = cudnnBackendAttributeName_t(1524);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_MATMUL_GEMM_M_OVERRIDE_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1525);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_MATMUL_GEMM_N_OVERRIDE_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1526);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_MATMUL_GEMM_K_OVERRIDE_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1527);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_REDUCTION_OPERATOR: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1600);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_REDUCTION_COMP_TYPE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1601);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_REDUCTION_XDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1610);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_REDUCTION_YDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1611);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_REDUCTION_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1612);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_MATH_PREC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1620);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_MEAN_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1621);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_INVSTD_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1622);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_BN_SCALE_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1623);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_X_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1624);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_DY_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1625);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_DBN_SCALE_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1626);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_DBN_BIAS_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1627);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_EQ_DY_SCALE_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1628);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_EQ_X_SCALE_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1629);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_EQ_BIAS: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1630);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_RESAMPLE_MODE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1700);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_RESAMPLE_COMP_TYPE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1701);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_RESAMPLE_SPATIAL_DIMS: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1702);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_RESAMPLE_POST_PADDINGS: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1703);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_RESAMPLE_PRE_PADDINGS: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1704);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_RESAMPLE_STRIDES: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1705);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_RESAMPLE_WINDOW_DIMS: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1706);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_RESAMPLE_NAN_PROPAGATION: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1707);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_RESAMPLE_PADDING_MODE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1708);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_RESAMPLE_FWD_XDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1710);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_RESAMPLE_FWD_YDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1711);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_RESAMPLE_FWD_IDXDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1712);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_RESAMPLE_FWD_ALPHA: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1713);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_RESAMPLE_FWD_BETA: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1714);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_RESAMPLE_FWD_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1716);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_RESAMPLE_BWD_DXDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1720);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_RESAMPLE_BWD_DYDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1721);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_RESAMPLE_BWD_IDXDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1722);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_RESAMPLE_BWD_ALPHA: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1723);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_RESAMPLE_BWD_BETA: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1724);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_RESAMPLE_BWD_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1725);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_RESAMPLE_BWD_XDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1726);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_RESAMPLE_BWD_YDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1727);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_CONCAT_AXIS: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1800);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_CONCAT_INPUT_DESCS: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1801);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_CONCAT_INPLACE_INDEX: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1802);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_CONCAT_OUTPUT_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1803);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_SIGNAL_MODE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1900);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_SIGNAL_FLAGDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1901);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_SIGNAL_VALUE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1902);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_SIGNAL_XDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1903);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_SIGNAL_YDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1904);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_PAGED_CACHE_LOAD_CONTAINER_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1950);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_PAGED_CACHE_LOAD_YDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1951);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_PAGED_CACHE_LOAD_SEQUENCE_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1952);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_PAGED_CACHE_LOAD_PAGE_TABLE_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1953);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_FWD_MODE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2000);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_FWD_PHASE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2001);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_FWD_XDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2002);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_FWD_MEAN_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2003);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_FWD_INV_VARIANCE_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2004);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_FWD_SCALE_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2005);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_FWD_BIAS_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2006);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_FWD_EPSILON_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2007);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_FWD_EXP_AVG_FACTOR_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2008);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_FWD_INPUT_RUNNING_MEAN_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2009);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_FWD_INPUT_RUNNING_VAR_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2010);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_FWD_OUTPUT_RUNNING_MEAN_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2011);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_FWD_OUTPUT_RUNNING_VAR_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2012);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_FWD_YDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2013);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_FWD_PEER_STAT_DESCS: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2014);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_BWD_MODE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2100);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_BWD_XDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2101);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_BWD_MEAN_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2102);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_BWD_INV_VARIANCE_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2103);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_BWD_DYDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2104);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_BWD_SCALE_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2105);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_BWD_EPSILON_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2106);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_BWD_DSCALE_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2107);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_BWD_DBIAS_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2108);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_BWD_DXDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2109);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_BWD_PEER_STAT_DESCS: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2110);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_RESHAPE_XDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2200);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_RESHAPE_YDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2201);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_RNG_DISTRIBUTION: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2300);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_RNG_NORMAL_DIST_MEAN: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2301);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_RNG_NORMAL_DIST_STANDARD_DEVIATION: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2302);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_RNG_UNIFORM_DIST_MAXIMUM: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2303);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_RNG_UNIFORM_DIST_MINIMUM: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2304);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_RNG_BERNOULLI_DIST_PROBABILITY: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2305);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_RNG_YDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2310);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_RNG_SEED: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2311);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_RNG_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2312);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_RNG_OFFSET_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2313);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_KERNEL_CACHE_OPERATION_GRAPH: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2400);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_KERNEL_CACHE_IS_ENGINECFG_KERNEL_CACHED: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2401);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BLOCK_SCALE_QUANTIZE_XDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2500);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BLOCK_SCALE_QUANTIZE_YDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2501);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BLOCK_SCALE_QUANTIZE_SCALE_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2502);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BLOCK_SCALE_QUANTIZE_MATH_PREC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2503);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BLOCK_SCALE_QUANTIZE_BLOCK_SIZE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2504);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BLOCK_SCALE_QUANTIZE_DENOM_FACTOR_MODE:
        cudnnBackendAttributeName_t = cudnnBackendAttributeName_t(2505);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BLOCK_SCALE_DEQUANTIZE_XDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2600);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BLOCK_SCALE_DEQUANTIZE_SCALE_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2601);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BLOCK_SCALE_DEQUANTIZE_YDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2602);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BLOCK_SCALE_DEQUANTIZE_MATH_PREC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2603);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BLOCK_SCALE_DEQUANTIZE_BLOCK_SIZE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2604);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnBackendAttributeName_t(pub ::std::os::raw::c_int);
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_HANDLE: cudnnBackendAttributeType_t = cudnnBackendAttributeType_t(0);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_DATA_TYPE: cudnnBackendAttributeType_t = cudnnBackendAttributeType_t(1);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_BOOLEAN: cudnnBackendAttributeType_t = cudnnBackendAttributeType_t(2);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_INT64: cudnnBackendAttributeType_t = cudnnBackendAttributeType_t(3);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_FLOAT: cudnnBackendAttributeType_t = cudnnBackendAttributeType_t(4);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_DOUBLE: cudnnBackendAttributeType_t = cudnnBackendAttributeType_t(5);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_VOID_PTR: cudnnBackendAttributeType_t = cudnnBackendAttributeType_t(6);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_CONVOLUTION_MODE: cudnnBackendAttributeType_t =
        cudnnBackendAttributeType_t(7);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_HEUR_MODE: cudnnBackendAttributeType_t = cudnnBackendAttributeType_t(8);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_KNOB_TYPE: cudnnBackendAttributeType_t = cudnnBackendAttributeType_t(9);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_NAN_PROPOGATION: cudnnBackendAttributeType_t =
        cudnnBackendAttributeType_t(10);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_NUMERICAL_NOTE: cudnnBackendAttributeType_t =
        cudnnBackendAttributeType_t(11);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_LAYOUT_TYPE: cudnnBackendAttributeType_t = cudnnBackendAttributeType_t(12);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_ATTRIB_NAME: cudnnBackendAttributeType_t = cudnnBackendAttributeType_t(13);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_POINTWISE_MODE: cudnnBackendAttributeType_t =
        cudnnBackendAttributeType_t(14);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_BACKEND_DESCRIPTOR: cudnnBackendAttributeType_t =
        cudnnBackendAttributeType_t(15);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_GENSTATS_MODE: cudnnBackendAttributeType_t =
        cudnnBackendAttributeType_t(16);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_BN_FINALIZE_STATS_MODE: cudnnBackendAttributeType_t =
        cudnnBackendAttributeType_t(17);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_REDUCTION_OPERATOR_TYPE: cudnnBackendAttributeType_t =
        cudnnBackendAttributeType_t(18);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_BEHAVIOR_NOTE: cudnnBackendAttributeType_t =
        cudnnBackendAttributeType_t(19);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_TENSOR_REORDERING_MODE: cudnnBackendAttributeType_t =
        cudnnBackendAttributeType_t(20);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_RESAMPLE_MODE: cudnnBackendAttributeType_t =
        cudnnBackendAttributeType_t(21);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_PADDING_MODE: cudnnBackendAttributeType_t =
        cudnnBackendAttributeType_t(22);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_INT32: cudnnBackendAttributeType_t = cudnnBackendAttributeType_t(23);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_CHAR: cudnnBackendAttributeType_t = cudnnBackendAttributeType_t(24);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_SIGNAL_MODE: cudnnBackendAttributeType_t = cudnnBackendAttributeType_t(25);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_FRACTION: cudnnBackendAttributeType_t = cudnnBackendAttributeType_t(26);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_NORM_MODE: cudnnBackendAttributeType_t = cudnnBackendAttributeType_t(27);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_NORM_FWD_PHASE: cudnnBackendAttributeType_t =
        cudnnBackendAttributeType_t(28);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_RNG_DISTRIBUTION: cudnnBackendAttributeType_t =
        cudnnBackendAttributeType_t(29);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnBackendAttributeType_t(pub ::std::os::raw::c_int);
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_POINTWISE_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(0);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_CONVOLUTION_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(1);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_ENGINE_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(2);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_ENGINECFG_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(3);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_ENGINEHEUR_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(4);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_EXECUTION_PLAN_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(5);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_INTERMEDIATE_INFO_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(6);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_KNOB_CHOICE_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(7);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_KNOB_INFO_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(8);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_LAYOUT_INFO_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(9);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_OPERATION_CONVOLUTION_FORWARD_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(10);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_OPERATION_CONVOLUTION_BACKWARD_FILTER_DESCRIPTOR:
        cudnnBackendDescriptorType_t = cudnnBackendDescriptorType_t(11);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_OPERATION_CONVOLUTION_BACKWARD_DATA_DESCRIPTOR:
        cudnnBackendDescriptorType_t = cudnnBackendDescriptorType_t(12);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_OPERATION_POINTWISE_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(13);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_OPERATION_GEN_STATS_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(14);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_OPERATIONGRAPH_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(15);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_VARIANT_PACK_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(16);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_TENSOR_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(17);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_MATMUL_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(18);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_OPERATION_MATMUL_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(19);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_OPERATION_BN_FINALIZE_STATISTICS_DESCRIPTOR:
        cudnnBackendDescriptorType_t = cudnnBackendDescriptorType_t(20);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_REDUCTION_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(21);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_OPERATION_REDUCTION_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(22);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_OPERATION_BN_BWD_WEIGHTS_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(23);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_RESAMPLE_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(24);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_OPERATION_RESAMPLE_FWD_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(25);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_OPERATION_RESAMPLE_BWD_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(26);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_OPERATION_CONCAT_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(27);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_OPERATION_SIGNAL_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(28);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_OPERATION_NORM_FORWARD_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(29);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_OPERATION_NORM_BACKWARD_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(30);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_OPERATION_RESHAPE_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(31);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_RNG_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(32);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_OPERATION_RNG_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(33);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_KERNEL_CACHE_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(34);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_OPERATION_PAGED_CACHE_LOAD_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(35);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_OPERATION_BLOCK_SCALE_QUANTIZE_DESCRIPTOR:
        cudnnBackendDescriptorType_t = cudnnBackendDescriptorType_t(36);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_OPERATION_BLOCK_SCALE_DEQUANTIZE_DESCRIPTOR:
        cudnnBackendDescriptorType_t = cudnnBackendDescriptorType_t(37);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnBackendDescriptorType_t(pub ::std::os::raw::c_int);

#[no_mangle]
pub unsafe extern "system" fn cudnnBackendCreateDescriptor(
    descriptorType: cudnnBackendDescriptorType_t,
    descriptor: *mut cudnnBackendDescriptor_t,
) -> cudnnStatus_t {
    crate::backend_create_descriptor(descriptorType, descriptor)
}

#[no_mangle]
pub unsafe extern "system" fn cudnnBackendDestroyDescriptor(
    descriptor: cudnnBackendDescriptor_t,
) -> cudnnStatus_t {
    crate::backend_destroy_descriptor(descriptor)
}

#[no_mangle]
pub extern "system" fn cudnnBackendInitialize(
    descriptor: cudnnBackendDescriptor_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub unsafe extern "system" fn cudnnBackendFinalize(
    descriptor: cudnnBackendDescriptor_t,
) -> cudnnStatus_t {
    crate::backend_finalize(descriptor)
}

#[no_mangle]
pub unsafe extern "system" fn cudnnBackendSetAttribute(
    descriptor: cudnnBackendDescriptor_t,
    attributeName: cudnnBackendAttributeName_t,
    attributeType: cudnnBackendAttributeType_t,
    elementCount: i64,
    arrayOfElements: *const ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::backend_set_attribute(
        descriptor,
        attributeName,
        attributeType,
        elementCount,
        arrayOfElements,
    )
}

#[no_mangle]
pub unsafe extern "system" fn cudnnBackendGetAttribute(
    descriptor: cudnnBackendDescriptor_t,
    attributeName: cudnnBackendAttributeName_t,
    attributeType: cudnnBackendAttributeType_t,
    requestedElementCount: i64,
    elementCount: *mut i64,
    arrayOfElements: *mut ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::backend_get_attribute(
        descriptor,
        attributeName,
        attributeType,
        requestedElementCount,
        elementCount,
        arrayOfElements,
    )
}

#[no_mangle]
pub unsafe extern "system" fn cudnnBackendExecute(
    handle: cudnnHandle_t,
    executionPlan: cudnnBackendDescriptor_t,
    variantPack: cudnnBackendDescriptor_t,
) -> cudnnStatus_t {
    crate::backend_execute(handle, executionPlan, variantPack)
}

#[no_mangle]
pub extern "system" fn cudnnBackendPopulateCudaGraph(
    handle: cudnnHandle_t,
    executionPlan: cudnnBackendDescriptor_t,
    variantPack: cudnnBackendDescriptor_t,
    graph: cudaGraph_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnBackendUpdateCudaGraph(
    handle: cudnnHandle_t,
    executionPlan: cudnnBackendDescriptor_t,
    variantPack: cudnnBackendDescriptor_t,
    graph: cudaGraph_t,
) -> cudnnStatus_t {
    crate::unsupported()
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnTensorStruct {
    _unused: [u8; 0],
}
pub type cudnnTensorDescriptor_t = *mut cudnnTensorStruct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnPoolingStruct {
    _unused: [u8; 0],
}
pub type cudnnPoolingDescriptor_t = *mut cudnnPoolingStruct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnFilterStruct {
    _unused: [u8; 0],
}
pub type cudnnFilterDescriptor_t = *mut cudnnFilterStruct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnLRNStruct {
    _unused: [u8; 0],
}
pub type cudnnLRNDescriptor_t = *mut cudnnLRNStruct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnActivationStruct {
    _unused: [u8; 0],
}
pub type cudnnActivationDescriptor_t = *mut cudnnActivationStruct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnSpatialTransformerStruct {
    _unused: [u8; 0],
}
pub type cudnnSpatialTransformerDescriptor_t = *mut cudnnSpatialTransformerStruct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnOpTensorStruct {
    _unused: [u8; 0],
}
pub type cudnnOpTensorDescriptor_t = *mut cudnnOpTensorStruct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnReduceTensorStruct {
    _unused: [u8; 0],
}
pub type cudnnReduceTensorDescriptor_t = *mut cudnnReduceTensorStruct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnCTCLossStruct {
    _unused: [u8; 0],
}
pub type cudnnCTCLossDescriptor_t = *mut cudnnCTCLossStruct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnTensorTransformStruct {
    _unused: [u8; 0],
}
pub type cudnnTensorTransformDescriptor_t = *mut cudnnTensorTransformStruct;
impl cudnnDeterminism_t {
    pub const CUDNN_NON_DETERMINISTIC: cudnnDeterminism_t = cudnnDeterminism_t(0);
}
impl cudnnDeterminism_t {
    pub const CUDNN_DETERMINISTIC: cudnnDeterminism_t = cudnnDeterminism_t(1);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnDeterminism_t(pub ::std::os::raw::c_int);

#[no_mangle]
pub unsafe extern "system" fn cudnnCreateTensorDescriptor(
    tensorDesc: *mut cudnnTensorDescriptor_t,
) -> cudnnStatus_t {
    crate::cudnn_create_tensor_descriptor(tensorDesc)
}

#[no_mangle]
pub extern "system" fn cudnnSetTensor4dDescriptor(
    tensorDesc: cudnnTensorDescriptor_t,
    format: cudnnTensorFormat_t,
    dataType: cudnnDataType_t,
    n: ::std::os::raw::c_int,
    c: ::std::os::raw::c_int,
    h: ::std::os::raw::c_int,
    w: ::std::os::raw::c_int,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub unsafe extern "system" fn cudnnSetTensor4dDescriptorEx(
    tensorDesc: cudnnTensorDescriptor_t,
    dataType: cudnnDataType_t,
    n: ::std::os::raw::c_int,
    c: ::std::os::raw::c_int,
    h: ::std::os::raw::c_int,
    w: ::std::os::raw::c_int,
    nStride: ::std::os::raw::c_int,
    cStride: ::std::os::raw::c_int,
    hStride: ::std::os::raw::c_int,
    wStride: ::std::os::raw::c_int,
) -> cudnnStatus_t {
    crate::set_tensor_4d_descriptor_ex(
        tensorDesc, dataType, n, c, h, w, nStride, cStride, hStride, wStride,
    )
}

#[no_mangle]
pub extern "system" fn cudnnGetTensor4dDescriptor(
    tensorDesc: cudnnTensorDescriptor_t,
    dataType: *mut cudnnDataType_t,
    n: *mut ::std::os::raw::c_int,
    c: *mut ::std::os::raw::c_int,
    h: *mut ::std::os::raw::c_int,
    w: *mut ::std::os::raw::c_int,
    nStride: *mut ::std::os::raw::c_int,
    cStride: *mut ::std::os::raw::c_int,
    hStride: *mut ::std::os::raw::c_int,
    wStride: *mut ::std::os::raw::c_int,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub unsafe extern "system" fn cudnnSetTensorNdDescriptor(
    tensorDesc: cudnnTensorDescriptor_t,
    dataType: cudnnDataType_t,
    nbDims: ::std::os::raw::c_int,
    dimA: *const ::std::os::raw::c_int,
    strideA: *const ::std::os::raw::c_int,
) -> cudnnStatus_t {
    crate::set_tensor_nd_decriptor(tensorDesc, dataType, nbDims, dimA, strideA)
}

#[no_mangle]
pub extern "system" fn cudnnSetTensorNdDescriptorEx(
    tensorDesc: cudnnTensorDescriptor_t,
    format: cudnnTensorFormat_t,
    dataType: cudnnDataType_t,
    nbDims: ::std::os::raw::c_int,
    dimA: *const ::std::os::raw::c_int,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnGetTensorNdDescriptor(
    tensorDesc: cudnnTensorDescriptor_t,
    nbDimsRequested: ::std::os::raw::c_int,
    dataType: *mut cudnnDataType_t,
    nbDims: *mut ::std::os::raw::c_int,
    dimA: *mut ::std::os::raw::c_int,
    strideA: *mut ::std::os::raw::c_int,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnGetTensorSizeInBytes(
    tensorDesc: cudnnTensorDescriptor_t,
    size: *mut usize,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub unsafe extern "system" fn cudnnDestroyTensorDescriptor(
    tensorDesc: cudnnTensorDescriptor_t,
) -> cudnnStatus_t {
    crate::destroy_tensor_descriptor(tensorDesc)
}
impl cudnnFoldingDirection_t {
    pub const CUDNN_TRANSFORM_FOLD: cudnnFoldingDirection_t = cudnnFoldingDirection_t(0);
}
impl cudnnFoldingDirection_t {
    pub const CUDNN_TRANSFORM_UNFOLD: cudnnFoldingDirection_t = cudnnFoldingDirection_t(1);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnFoldingDirection_t(pub ::std::os::raw::c_int);

#[doc = " Create a destination descriptor for cudnnTransformTensor"]
#[no_mangle]
pub extern "system" fn cudnnInitTransformDest(
    transformDesc: cudnnTensorTransformDescriptor_t,
    srcDesc: cudnnTensorDescriptor_t,
    destDesc: cudnnTensorDescriptor_t,
    destSizeInBytes: *mut usize,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[doc = " Create an empty tensor transform descriptor"]
#[no_mangle]
pub extern "system" fn cudnnCreateTensorTransformDescriptor(
    transformDesc: *mut cudnnTensorTransformDescriptor_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[doc = " Initialize a previously created tensor transform descriptor."]
#[no_mangle]
pub extern "system" fn cudnnSetTensorTransformDescriptor(
    transformDesc: cudnnTensorTransformDescriptor_t,
    nbDims: u32,
    destFormat: cudnnTensorFormat_t,
    padBeforeA: *const i32,
    padAfterA: *const i32,
    foldA: *const u32,
    direction: cudnnFoldingDirection_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[doc = " Retrieves the values stored in a previously initialized tensor transform\n descriptor."]
#[no_mangle]
pub extern "system" fn cudnnGetTensorTransformDescriptor(
    transformDesc: cudnnTensorTransformDescriptor_t,
    nbDimsRequested: u32,
    destFormat: *mut cudnnTensorFormat_t,
    padBeforeA: *mut i32,
    padAfterA: *mut i32,
    foldA: *mut u32,
    direction: *mut cudnnFoldingDirection_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[doc = " Destroys a previously created tensor transform descriptor."]
#[no_mangle]
pub extern "system" fn cudnnDestroyTensorTransformDescriptor(
    transformDesc: cudnnTensorTransformDescriptor_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub unsafe extern "system" fn cudnnTransformTensor(
    handle: cudnnHandle_t,
    alpha: *const ::std::os::raw::c_void,
    xDesc: cudnnTensorDescriptor_t,
    x: *const ::std::os::raw::c_void,
    beta: *const ::std::os::raw::c_void,
    yDesc: cudnnTensorDescriptor_t,
    y: *mut ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::transform_tensor(handle, alpha, xDesc, x, beta, yDesc, y)
}

#[no_mangle]
pub extern "system" fn cudnnTransformTensorEx(
    handle: cudnnHandle_t,
    transDesc: cudnnTensorTransformDescriptor_t,
    alpha: *const ::std::os::raw::c_void,
    srcDesc: cudnnTensorDescriptor_t,
    srcData: *const ::std::os::raw::c_void,
    beta: *const ::std::os::raw::c_void,
    destDesc: cudnnTensorDescriptor_t,
    destData: *mut ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub unsafe extern "system" fn cudnnAddTensor(
    handle: cudnnHandle_t,
    alpha: *const ::std::os::raw::c_void,
    aDesc: cudnnTensorDescriptor_t,
    A: *const ::std::os::raw::c_void,
    beta: *const ::std::os::raw::c_void,
    cDesc: cudnnTensorDescriptor_t,
    C: *mut ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::add_tensor(handle, alpha, aDesc, A, beta, cDesc, C)
}
impl cudnnOpTensorOp_t {
    pub const CUDNN_OP_TENSOR_ADD: cudnnOpTensorOp_t = cudnnOpTensorOp_t(0);
}
impl cudnnOpTensorOp_t {
    pub const CUDNN_OP_TENSOR_MUL: cudnnOpTensorOp_t = cudnnOpTensorOp_t(1);
}
impl cudnnOpTensorOp_t {
    pub const CUDNN_OP_TENSOR_MIN: cudnnOpTensorOp_t = cudnnOpTensorOp_t(2);
}
impl cudnnOpTensorOp_t {
    pub const CUDNN_OP_TENSOR_MAX: cudnnOpTensorOp_t = cudnnOpTensorOp_t(3);
}
impl cudnnOpTensorOp_t {
    pub const CUDNN_OP_TENSOR_SQRT: cudnnOpTensorOp_t = cudnnOpTensorOp_t(4);
}
impl cudnnOpTensorOp_t {
    pub const CUDNN_OP_TENSOR_NOT: cudnnOpTensorOp_t = cudnnOpTensorOp_t(5);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnOpTensorOp_t(pub ::std::os::raw::c_int);

#[no_mangle]
pub extern "system" fn cudnnCreateOpTensorDescriptor(
    opTensorDesc: *mut cudnnOpTensorDescriptor_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnSetOpTensorDescriptor(
    opTensorDesc: cudnnOpTensorDescriptor_t,
    opTensorOp: cudnnOpTensorOp_t,
    opTensorCompType: cudnnDataType_t,
    opTensorNanOpt: cudnnNanPropagation_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnGetOpTensorDescriptor(
    opTensorDesc: cudnnOpTensorDescriptor_t,
    opTensorOp: *mut cudnnOpTensorOp_t,
    opTensorCompType: *mut cudnnDataType_t,
    opTensorNanOpt: *mut cudnnNanPropagation_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnDestroyOpTensorDescriptor(
    opTensorDesc: cudnnOpTensorDescriptor_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnOpTensor(
    handle: cudnnHandle_t,
    opTensorDesc: cudnnOpTensorDescriptor_t,
    alpha1: *const ::std::os::raw::c_void,
    aDesc: cudnnTensorDescriptor_t,
    A: *const ::std::os::raw::c_void,
    alpha2: *const ::std::os::raw::c_void,
    bDesc: cudnnTensorDescriptor_t,
    B: *const ::std::os::raw::c_void,
    beta: *const ::std::os::raw::c_void,
    cDesc: cudnnTensorDescriptor_t,
    C: *mut ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::unsupported()
}
impl cudnnReduceTensorIndices_t {
    pub const CUDNN_REDUCE_TENSOR_NO_INDICES: cudnnReduceTensorIndices_t =
        cudnnReduceTensorIndices_t(0);
}
impl cudnnReduceTensorIndices_t {
    pub const CUDNN_REDUCE_TENSOR_FLATTENED_INDICES: cudnnReduceTensorIndices_t =
        cudnnReduceTensorIndices_t(1);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnReduceTensorIndices_t(pub ::std::os::raw::c_int);
impl cudnnIndicesType_t {
    pub const CUDNN_32BIT_INDICES: cudnnIndicesType_t = cudnnIndicesType_t(0);
}
impl cudnnIndicesType_t {
    pub const CUDNN_64BIT_INDICES: cudnnIndicesType_t = cudnnIndicesType_t(1);
}
impl cudnnIndicesType_t {
    pub const CUDNN_16BIT_INDICES: cudnnIndicesType_t = cudnnIndicesType_t(2);
}
impl cudnnIndicesType_t {
    pub const CUDNN_8BIT_INDICES: cudnnIndicesType_t = cudnnIndicesType_t(3);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnIndicesType_t(pub ::std::os::raw::c_int);

#[no_mangle]
pub extern "system" fn cudnnCreateReduceTensorDescriptor(
    reduceTensorDesc: *mut cudnnReduceTensorDescriptor_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnSetReduceTensorDescriptor(
    reduceTensorDesc: cudnnReduceTensorDescriptor_t,
    reduceTensorOp: cudnnReduceTensorOp_t,
    reduceTensorCompType: cudnnDataType_t,
    reduceTensorNanOpt: cudnnNanPropagation_t,
    reduceTensorIndices: cudnnReduceTensorIndices_t,
    reduceTensorIndicesType: cudnnIndicesType_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnGetReduceTensorDescriptor(
    reduceTensorDesc: cudnnReduceTensorDescriptor_t,
    reduceTensorOp: *mut cudnnReduceTensorOp_t,
    reduceTensorCompType: *mut cudnnDataType_t,
    reduceTensorNanOpt: *mut cudnnNanPropagation_t,
    reduceTensorIndices: *mut cudnnReduceTensorIndices_t,
    reduceTensorIndicesType: *mut cudnnIndicesType_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnDestroyReduceTensorDescriptor(
    reduceTensorDesc: cudnnReduceTensorDescriptor_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnGetReductionIndicesSize(
    handle: cudnnHandle_t,
    reduceTensorDesc: cudnnReduceTensorDescriptor_t,
    aDesc: cudnnTensorDescriptor_t,
    cDesc: cudnnTensorDescriptor_t,
    sizeInBytes: *mut usize,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnGetReductionWorkspaceSize(
    handle: cudnnHandle_t,
    reduceTensorDesc: cudnnReduceTensorDescriptor_t,
    aDesc: cudnnTensorDescriptor_t,
    cDesc: cudnnTensorDescriptor_t,
    sizeInBytes: *mut usize,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnReduceTensor(
    handle: cudnnHandle_t,
    reduceTensorDesc: cudnnReduceTensorDescriptor_t,
    indices: *mut ::std::os::raw::c_void,
    indicesSizeInBytes: usize,
    workspace: *mut ::std::os::raw::c_void,
    workspaceSizeInBytes: usize,
    alpha: *const ::std::os::raw::c_void,
    aDesc: cudnnTensorDescriptor_t,
    A: *const ::std::os::raw::c_void,
    beta: *const ::std::os::raw::c_void,
    cDesc: cudnnTensorDescriptor_t,
    C: *mut ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnSetTensor(
    handle: cudnnHandle_t,
    yDesc: cudnnTensorDescriptor_t,
    y: *mut ::std::os::raw::c_void,
    valuePtr: *const ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnScaleTensor(
    handle: cudnnHandle_t,
    yDesc: cudnnTensorDescriptor_t,
    y: *mut ::std::os::raw::c_void,
    alpha: *const ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub unsafe extern "system" fn cudnnCreateFilterDescriptor(
    filterDesc: *mut cudnnFilterDescriptor_t,
) -> cudnnStatus_t {
    crate::cudnn_create_filter_descriptor(filterDesc)
}

#[no_mangle]
pub extern "system" fn cudnnSetFilter4dDescriptor(
    filterDesc: cudnnFilterDescriptor_t,
    dataType: cudnnDataType_t,
    format: cudnnTensorFormat_t,
    k: ::std::os::raw::c_int,
    c: ::std::os::raw::c_int,
    h: ::std::os::raw::c_int,
    w: ::std::os::raw::c_int,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnGetFilter4dDescriptor(
    filterDesc: cudnnFilterDescriptor_t,
    dataType: *mut cudnnDataType_t,
    format: *mut cudnnTensorFormat_t,
    k: *mut ::std::os::raw::c_int,
    c: *mut ::std::os::raw::c_int,
    h: *mut ::std::os::raw::c_int,
    w: *mut ::std::os::raw::c_int,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub unsafe extern "system" fn cudnnSetFilterNdDescriptor(
    filterDesc: cudnnFilterDescriptor_t,
    dataType: cudnnDataType_t,
    format: cudnnTensorFormat_t,
    nbDims: ::std::os::raw::c_int,
    filterDimA: *const ::std::os::raw::c_int,
) -> cudnnStatus_t {
    crate::set_filter_nd_descriptor(filterDesc, dataType, format, nbDims, filterDimA)
}

#[no_mangle]
pub extern "system" fn cudnnGetFilterNdDescriptor(
    filterDesc: cudnnFilterDescriptor_t,
    nbDimsRequested: ::std::os::raw::c_int,
    dataType: *mut cudnnDataType_t,
    format: *mut cudnnTensorFormat_t,
    nbDims: *mut ::std::os::raw::c_int,
    filterDimA: *mut ::std::os::raw::c_int,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnGetFilterSizeInBytes(
    filterDesc: cudnnFilterDescriptor_t,
    size: *mut usize,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnTransformFilter(
    handle: cudnnHandle_t,
    transDesc: cudnnTensorTransformDescriptor_t,
    alpha: *const ::std::os::raw::c_void,
    srcDesc: cudnnFilterDescriptor_t,
    srcData: *const ::std::os::raw::c_void,
    beta: *const ::std::os::raw::c_void,
    destDesc: cudnnFilterDescriptor_t,
    destData: *mut ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub unsafe extern "system" fn cudnnDestroyFilterDescriptor(
    filterDesc: cudnnFilterDescriptor_t,
) -> cudnnStatus_t {
    crate::destroy_filter_descriptor(filterDesc)
}
impl cudnnSoftmaxAlgorithm_t {
    pub const CUDNN_SOFTMAX_FAST: cudnnSoftmaxAlgorithm_t = cudnnSoftmaxAlgorithm_t(0);
}
impl cudnnSoftmaxAlgorithm_t {
    pub const CUDNN_SOFTMAX_ACCURATE: cudnnSoftmaxAlgorithm_t = cudnnSoftmaxAlgorithm_t(1);
}
impl cudnnSoftmaxAlgorithm_t {
    pub const CUDNN_SOFTMAX_LOG: cudnnSoftmaxAlgorithm_t = cudnnSoftmaxAlgorithm_t(2);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnSoftmaxAlgorithm_t(pub ::std::os::raw::c_int);
impl cudnnSoftmaxMode_t {
    pub const CUDNN_SOFTMAX_MODE_INSTANCE: cudnnSoftmaxMode_t = cudnnSoftmaxMode_t(0);
}
impl cudnnSoftmaxMode_t {
    pub const CUDNN_SOFTMAX_MODE_CHANNEL: cudnnSoftmaxMode_t = cudnnSoftmaxMode_t(1);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnSoftmaxMode_t(pub ::std::os::raw::c_int);

#[no_mangle]
pub unsafe extern "system" fn cudnnSoftmaxForward(
    handle: cudnnHandle_t,
    algo: cudnnSoftmaxAlgorithm_t,
    mode: cudnnSoftmaxMode_t,
    alpha: *const ::std::os::raw::c_void,
    xDesc: cudnnTensorDescriptor_t,
    x: *const ::std::os::raw::c_void,
    beta: *const ::std::os::raw::c_void,
    yDesc: cudnnTensorDescriptor_t,
    y: *mut ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::softmax_forward(handle, algo, mode, alpha, xDesc, x, beta, yDesc, y)
}
impl cudnnPoolingMode_t {
    pub const CUDNN_POOLING_MAX: cudnnPoolingMode_t = cudnnPoolingMode_t(0);
}
impl cudnnPoolingMode_t {
    pub const CUDNN_POOLING_AVERAGE_COUNT_INCLUDE_PADDING: cudnnPoolingMode_t =
        cudnnPoolingMode_t(1);
}
impl cudnnPoolingMode_t {
    pub const CUDNN_POOLING_AVERAGE_COUNT_EXCLUDE_PADDING: cudnnPoolingMode_t =
        cudnnPoolingMode_t(2);
}
impl cudnnPoolingMode_t {
    pub const CUDNN_POOLING_MAX_DETERMINISTIC: cudnnPoolingMode_t = cudnnPoolingMode_t(3);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnPoolingMode_t(pub ::std::os::raw::c_int);

#[no_mangle]
pub unsafe extern "system" fn cudnnCreatePoolingDescriptor(
    poolingDesc: *mut cudnnPoolingDescriptor_t,
) -> cudnnStatus_t {
    crate::cudnn_create_pooling_descriptor(poolingDesc)
}

#[no_mangle]
pub extern "system" fn cudnnSetPooling2dDescriptor(
    poolingDesc: cudnnPoolingDescriptor_t,
    mode: cudnnPoolingMode_t,
    maxpoolingNanOpt: cudnnNanPropagation_t,
    windowHeight: ::std::os::raw::c_int,
    windowWidth: ::std::os::raw::c_int,
    verticalPadding: ::std::os::raw::c_int,
    horizontalPadding: ::std::os::raw::c_int,
    verticalStride: ::std::os::raw::c_int,
    horizontalStride: ::std::os::raw::c_int,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnGetPooling2dDescriptor(
    poolingDesc: cudnnPoolingDescriptor_t,
    mode: *mut cudnnPoolingMode_t,
    maxpoolingNanOpt: *mut cudnnNanPropagation_t,
    windowHeight: *mut ::std::os::raw::c_int,
    windowWidth: *mut ::std::os::raw::c_int,
    verticalPadding: *mut ::std::os::raw::c_int,
    horizontalPadding: *mut ::std::os::raw::c_int,
    verticalStride: *mut ::std::os::raw::c_int,
    horizontalStride: *mut ::std::os::raw::c_int,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub unsafe extern "system" fn cudnnSetPoolingNdDescriptor(
    poolingDesc: cudnnPoolingDescriptor_t,
    mode: cudnnPoolingMode_t,
    maxpoolingNanOpt: cudnnNanPropagation_t,
    nbDims: ::std::os::raw::c_int,
    windowDimA: *const ::std::os::raw::c_int,
    paddingA: *const ::std::os::raw::c_int,
    strideA: *const ::std::os::raw::c_int,
) -> cudnnStatus_t {
    crate::set_pooling_nd_descriptor(
        poolingDesc,
        mode,
        maxpoolingNanOpt,
        nbDims,
        windowDimA,
        paddingA,
        strideA,
    )
}

#[no_mangle]
pub extern "system" fn cudnnGetPoolingNdDescriptor(
    poolingDesc: cudnnPoolingDescriptor_t,
    nbDimsRequested: ::std::os::raw::c_int,
    mode: *mut cudnnPoolingMode_t,
    maxpoolingNanOpt: *mut cudnnNanPropagation_t,
    nbDims: *mut ::std::os::raw::c_int,
    windowDimA: *mut ::std::os::raw::c_int,
    paddingA: *mut ::std::os::raw::c_int,
    strideA: *mut ::std::os::raw::c_int,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub unsafe extern "system" fn cudnnGetPoolingNdForwardOutputDim(
    poolingDesc: cudnnPoolingDescriptor_t,
    inputTensorDesc: cudnnTensorDescriptor_t,
    nbDims: ::std::os::raw::c_int,
    outputTensorDimA: *mut ::std::os::raw::c_int,
) -> cudnnStatus_t {
    crate::get_pooling_nd_forward_output_dim(poolingDesc, inputTensorDesc, nbDims, outputTensorDimA)
}

#[no_mangle]
pub extern "system" fn cudnnGetPooling2dForwardOutputDim(
    poolingDesc: cudnnPoolingDescriptor_t,
    inputTensorDesc: cudnnTensorDescriptor_t,
    n: *mut ::std::os::raw::c_int,
    c: *mut ::std::os::raw::c_int,
    h: *mut ::std::os::raw::c_int,
    w: *mut ::std::os::raw::c_int,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub unsafe extern "system" fn cudnnDestroyPoolingDescriptor(
    poolingDesc: cudnnPoolingDescriptor_t,
) -> cudnnStatus_t {
    crate::destroy_pooling_descriptor(poolingDesc)
}

#[no_mangle]
pub unsafe extern "system" fn cudnnPoolingForward(
    handle: cudnnHandle_t,
    poolingDesc: cudnnPoolingDescriptor_t,
    alpha: *const ::std::os::raw::c_void,
    xDesc: cudnnTensorDescriptor_t,
    x: *const ::std::os::raw::c_void,
    beta: *const ::std::os::raw::c_void,
    yDesc: cudnnTensorDescriptor_t,
    y: *mut ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::pooling_forward(handle, poolingDesc, alpha, xDesc, x, beta, yDesc, y)
}

#[no_mangle]
pub unsafe extern "system" fn cudnnCreateActivationDescriptor(
    activationDesc: *mut cudnnActivationDescriptor_t,
) -> cudnnStatus_t {
    crate::cudnn_create_activation_descriptor(activationDesc)
}

#[no_mangle]
pub unsafe extern "system" fn cudnnSetActivationDescriptor(
    activationDesc: cudnnActivationDescriptor_t,
    mode: cudnnActivationMode_t,
    reluNanOpt: cudnnNanPropagation_t,
    coef: f64,
) -> cudnnStatus_t {
    crate::set_activation_descriptor(activationDesc, mode, reluNanOpt, coef)
}

#[no_mangle]
pub extern "system" fn cudnnGetActivationDescriptor(
    activationDesc: cudnnActivationDescriptor_t,
    mode: *mut cudnnActivationMode_t,
    reluNanOpt: *mut cudnnNanPropagation_t,
    coef: *mut f64,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnSetActivationDescriptorSwishBeta(
    activationDesc: cudnnActivationDescriptor_t,
    swish_beta: f64,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnGetActivationDescriptorSwishBeta(
    activationDesc: cudnnActivationDescriptor_t,
    swish_beta: *mut f64,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub unsafe extern "system" fn cudnnDestroyActivationDescriptor(
    activationDesc: cudnnActivationDescriptor_t,
) -> cudnnStatus_t {
    crate::destroy_activation_descriptor(activationDesc)
}

#[no_mangle]
pub unsafe extern "system" fn cudnnActivationForward(
    handle: cudnnHandle_t,
    activationDesc: cudnnActivationDescriptor_t,
    alpha: *const ::std::os::raw::c_void,
    xDesc: cudnnTensorDescriptor_t,
    x: *const ::std::os::raw::c_void,
    beta: *const ::std::os::raw::c_void,
    yDesc: cudnnTensorDescriptor_t,
    y: *mut ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::activation_forward(handle, activationDesc, alpha, xDesc, x, beta, yDesc, y)
}

#[no_mangle]
pub unsafe extern "system" fn cudnnCreateLRNDescriptor(
    normDesc: *mut cudnnLRNDescriptor_t,
) -> cudnnStatus_t {
    crate::cudnn_create_lrn_descriptor(normDesc)
}
impl cudnnLRNMode_t {
    pub const CUDNN_LRN_CROSS_CHANNEL_DIM1: cudnnLRNMode_t = cudnnLRNMode_t(0);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnLRNMode_t(pub ::std::os::raw::c_int);

#[no_mangle]
pub unsafe extern "system" fn cudnnSetLRNDescriptor(
    normDesc: cudnnLRNDescriptor_t,
    lrnN: ::std::os::raw::c_uint,
    lrnAlpha: f64,
    lrnBeta: f64,
    lrnK: f64,
) -> cudnnStatus_t {
    crate::set_lrn_descriptor(normDesc, lrnN, lrnAlpha, lrnBeta, lrnK)
}

#[no_mangle]
pub extern "system" fn cudnnGetLRNDescriptor(
    normDesc: cudnnLRNDescriptor_t,
    lrnN: *mut ::std::os::raw::c_uint,
    lrnAlpha: *mut f64,
    lrnBeta: *mut f64,
    lrnK: *mut f64,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub unsafe extern "system" fn cudnnDestroyLRNDescriptor(
    lrnDesc: cudnnLRNDescriptor_t,
) -> cudnnStatus_t {
    crate::destroy_lrn_descriptor(lrnDesc)
}

#[no_mangle]
pub unsafe extern "system" fn cudnnLRNCrossChannelForward(
    handle: cudnnHandle_t,
    normDesc: cudnnLRNDescriptor_t,
    lrnMode: cudnnLRNMode_t,
    alpha: *const ::std::os::raw::c_void,
    xDesc: cudnnTensorDescriptor_t,
    x: *const ::std::os::raw::c_void,
    beta: *const ::std::os::raw::c_void,
    yDesc: cudnnTensorDescriptor_t,
    y: *mut ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::lrn_cross_channel_forward(handle, normDesc, lrnMode, alpha, xDesc, x, beta, yDesc, y)
}
impl cudnnDivNormMode_t {
    pub const CUDNN_DIVNORM_PRECOMPUTED_MEANS: cudnnDivNormMode_t = cudnnDivNormMode_t(0);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnDivNormMode_t(pub ::std::os::raw::c_int);

#[no_mangle]
pub extern "system" fn cudnnDivisiveNormalizationForward(
    handle: cudnnHandle_t,
    normDesc: cudnnLRNDescriptor_t,
    mode: cudnnDivNormMode_t,
    alpha: *const ::std::os::raw::c_void,
    xDesc: cudnnTensorDescriptor_t,
    x: *const ::std::os::raw::c_void,
    means: *const ::std::os::raw::c_void,
    temp: *mut ::std::os::raw::c_void,
    temp2: *mut ::std::os::raw::c_void,
    beta: *const ::std::os::raw::c_void,
    yDesc: cudnnTensorDescriptor_t,
    y: *mut ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::unsupported()
}
impl cudnnBatchNormMode_t {
    pub const CUDNN_BATCHNORM_PER_ACTIVATION: cudnnBatchNormMode_t = cudnnBatchNormMode_t(0);
}
impl cudnnBatchNormMode_t {
    pub const CUDNN_BATCHNORM_SPATIAL: cudnnBatchNormMode_t = cudnnBatchNormMode_t(1);
}
impl cudnnBatchNormMode_t {
    pub const CUDNN_BATCHNORM_SPATIAL_PERSISTENT: cudnnBatchNormMode_t = cudnnBatchNormMode_t(2);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnBatchNormMode_t(pub ::std::os::raw::c_int);

#[no_mangle]
pub extern "system" fn cudnnDeriveBNTensorDescriptor(
    derivedBnDesc: cudnnTensorDescriptor_t,
    xDesc: cudnnTensorDescriptor_t,
    mode: cudnnBatchNormMode_t,
) -> cudnnStatus_t {
    crate::unsupported()
}
impl cudnnBatchNormOps_t {
    pub const CUDNN_BATCHNORM_OPS_BN: cudnnBatchNormOps_t = cudnnBatchNormOps_t(0);
}
impl cudnnBatchNormOps_t {
    pub const CUDNN_BATCHNORM_OPS_BN_ACTIVATION: cudnnBatchNormOps_t = cudnnBatchNormOps_t(1);
}
impl cudnnBatchNormOps_t {
    pub const CUDNN_BATCHNORM_OPS_BN_ADD_ACTIVATION: cudnnBatchNormOps_t = cudnnBatchNormOps_t(2);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnBatchNormOps_t(pub ::std::os::raw::c_int);

#[no_mangle]
pub unsafe extern "system" fn cudnnBatchNormalizationForwardInference(
    handle: cudnnHandle_t,
    mode: cudnnBatchNormMode_t,
    alpha: *const ::std::os::raw::c_void,
    beta: *const ::std::os::raw::c_void,
    xDesc: cudnnTensorDescriptor_t,
    x: *const ::std::os::raw::c_void,
    yDesc: cudnnTensorDescriptor_t,
    y: *mut ::std::os::raw::c_void,
    bnScaleBiasMeanVarDesc: cudnnTensorDescriptor_t,
    bnScale: *const ::std::os::raw::c_void,
    bnBias: *const ::std::os::raw::c_void,
    estimatedMean: *const ::std::os::raw::c_void,
    estimatedVariance: *const ::std::os::raw::c_void,
    epsilon: f64,
) -> cudnnStatus_t {
    crate::batch_normalization_forward_inference(
        handle,
        mode,
        alpha,
        beta,
        xDesc,
        x,
        yDesc,
        y,
        bnScaleBiasMeanVarDesc,
        bnScale,
        bnBias,
        estimatedMean,
        estimatedVariance,
        epsilon,
    )
}
impl cudnnNormMode_t {
    pub const CUDNN_NORM_PER_ACTIVATION: cudnnNormMode_t = cudnnNormMode_t(0);
}
impl cudnnNormMode_t {
    pub const CUDNN_NORM_PER_CHANNEL: cudnnNormMode_t = cudnnNormMode_t(1);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnNormMode_t(pub ::std::os::raw::c_int);
impl cudnnNormAlgo_t {
    pub const CUDNN_NORM_ALGO_STANDARD: cudnnNormAlgo_t = cudnnNormAlgo_t(0);
}
impl cudnnNormAlgo_t {
    pub const CUDNN_NORM_ALGO_PERSIST: cudnnNormAlgo_t = cudnnNormAlgo_t(1);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnNormAlgo_t(pub ::std::os::raw::c_int);

#[no_mangle]
pub extern "system" fn cudnnDeriveNormTensorDescriptor(
    derivedNormScaleBiasDesc: cudnnTensorDescriptor_t,
    derivedNormMeanVarDesc: cudnnTensorDescriptor_t,
    xDesc: cudnnTensorDescriptor_t,
    mode: cudnnNormMode_t,
    groupCnt: ::std::os::raw::c_int,
) -> cudnnStatus_t {
    crate::unsupported()
}
impl cudnnNormOps_t {
    pub const CUDNN_NORM_OPS_NORM: cudnnNormOps_t = cudnnNormOps_t(0);
}
impl cudnnNormOps_t {
    pub const CUDNN_NORM_OPS_NORM_ACTIVATION: cudnnNormOps_t = cudnnNormOps_t(1);
}
impl cudnnNormOps_t {
    pub const CUDNN_NORM_OPS_NORM_ADD_ACTIVATION: cudnnNormOps_t = cudnnNormOps_t(2);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnNormOps_t(pub ::std::os::raw::c_int);

#[no_mangle]
pub extern "system" fn cudnnNormalizationForwardInference(
    handle: cudnnHandle_t,
    mode: cudnnNormMode_t,
    normOps: cudnnNormOps_t,
    algo: cudnnNormAlgo_t,
    alpha: *const ::std::os::raw::c_void,
    beta: *const ::std::os::raw::c_void,
    xDesc: cudnnTensorDescriptor_t,
    x: *const ::std::os::raw::c_void,
    normScaleBiasDesc: cudnnTensorDescriptor_t,
    normScale: *const ::std::os::raw::c_void,
    normBias: *const ::std::os::raw::c_void,
    normMeanVarDesc: cudnnTensorDescriptor_t,
    estimatedMean: *const ::std::os::raw::c_void,
    estimatedVariance: *const ::std::os::raw::c_void,
    zDesc: cudnnTensorDescriptor_t,
    z: *const ::std::os::raw::c_void,
    activationDesc: cudnnActivationDescriptor_t,
    yDesc: cudnnTensorDescriptor_t,
    y: *mut ::std::os::raw::c_void,
    epsilon: f64,
    groupCnt: ::std::os::raw::c_int,
) -> cudnnStatus_t {
    crate::unsupported()
}
impl cudnnSamplerType_t {
    pub const CUDNN_SAMPLER_BILINEAR: cudnnSamplerType_t = cudnnSamplerType_t(0);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnSamplerType_t(pub ::std::os::raw::c_int);

#[no_mangle]
pub extern "system" fn cudnnCreateSpatialTransformerDescriptor(
    stDesc: *mut cudnnSpatialTransformerDescriptor_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnSetSpatialTransformerNdDescriptor(
    stDesc: cudnnSpatialTransformerDescriptor_t,
    samplerType: cudnnSamplerType_t,
    dataType: cudnnDataType_t,
    nbDims: ::std::os::raw::c_int,
    dimA: *const ::std::os::raw::c_int,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnDestroySpatialTransformerDescriptor(
    stDesc: cudnnSpatialTransformerDescriptor_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnSpatialTfGridGeneratorForward(
    handle: cudnnHandle_t,
    stDesc: cudnnSpatialTransformerDescriptor_t,
    theta: *const ::std::os::raw::c_void,
    grid: *mut ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnSpatialTfSamplerForward(
    handle: cudnnHandle_t,
    stDesc: cudnnSpatialTransformerDescriptor_t,
    alpha: *const ::std::os::raw::c_void,
    xDesc: cudnnTensorDescriptor_t,
    x: *const ::std::os::raw::c_void,
    grid: *const ::std::os::raw::c_void,
    beta: *const ::std::os::raw::c_void,
    yDesc: cudnnTensorDescriptor_t,
    y: *mut ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::unsupported()
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnDropoutStruct {
    _unused: [u8; 0],
}
pub type cudnnDropoutDescriptor_t = *mut cudnnDropoutStruct;

#[no_mangle]
pub extern "system" fn cudnnCreateDropoutDescriptor(
    dropoutDesc: *mut cudnnDropoutDescriptor_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnDestroyDropoutDescriptor(
    dropoutDesc: cudnnDropoutDescriptor_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnDropoutGetStatesSize(
    handle: cudnnHandle_t,
    sizeInBytes: *mut usize,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnDropoutGetReserveSpaceSize(
    xdesc: cudnnTensorDescriptor_t,
    sizeInBytes: *mut usize,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnSetDropoutDescriptor(
    dropoutDesc: cudnnDropoutDescriptor_t,
    handle: cudnnHandle_t,
    dropout: f32,
    states: *mut ::std::os::raw::c_void,
    stateSizeInBytes: usize,
    seed: ::std::os::raw::c_ulonglong,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnRestoreDropoutDescriptor(
    dropoutDesc: cudnnDropoutDescriptor_t,
    handle: cudnnHandle_t,
    dropout: f32,
    states: *mut ::std::os::raw::c_void,
    stateSizeInBytes: usize,
    seed: ::std::os::raw::c_ulonglong,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnGetDropoutDescriptor(
    dropoutDesc: cudnnDropoutDescriptor_t,
    handle: cudnnHandle_t,
    dropout: *mut f32,
    states: *mut *mut ::std::os::raw::c_void,
    seed: *mut ::std::os::raw::c_ulonglong,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnDropoutForward(
    handle: cudnnHandle_t,
    dropoutDesc: cudnnDropoutDescriptor_t,
    xdesc: cudnnTensorDescriptor_t,
    x: *const ::std::os::raw::c_void,
    ydesc: cudnnTensorDescriptor_t,
    y: *mut ::std::os::raw::c_void,
    reserveSpace: *mut ::std::os::raw::c_void,
    reserveSpaceSizeInBytes: usize,
) -> cudnnStatus_t {
    crate::unsupported()
}
impl cudnnConvolutionFwdAlgo_t {
    pub const CUDNN_CONVOLUTION_FWD_ALGO_IMPLICIT_GEMM: cudnnConvolutionFwdAlgo_t =
        cudnnConvolutionFwdAlgo_t(0);
}
impl cudnnConvolutionFwdAlgo_t {
    pub const CUDNN_CONVOLUTION_FWD_ALGO_IMPLICIT_PRECOMP_GEMM: cudnnConvolutionFwdAlgo_t =
        cudnnConvolutionFwdAlgo_t(1);
}
impl cudnnConvolutionFwdAlgo_t {
    pub const CUDNN_CONVOLUTION_FWD_ALGO_GEMM: cudnnConvolutionFwdAlgo_t =
        cudnnConvolutionFwdAlgo_t(2);
}
impl cudnnConvolutionFwdAlgo_t {
    pub const CUDNN_CONVOLUTION_FWD_ALGO_DIRECT: cudnnConvolutionFwdAlgo_t =
        cudnnConvolutionFwdAlgo_t(3);
}
impl cudnnConvolutionFwdAlgo_t {
    pub const CUDNN_CONVOLUTION_FWD_ALGO_FFT: cudnnConvolutionFwdAlgo_t =
        cudnnConvolutionFwdAlgo_t(4);
}
impl cudnnConvolutionFwdAlgo_t {
    pub const CUDNN_CONVOLUTION_FWD_ALGO_FFT_TILING: cudnnConvolutionFwdAlgo_t =
        cudnnConvolutionFwdAlgo_t(5);
}
impl cudnnConvolutionFwdAlgo_t {
    pub const CUDNN_CONVOLUTION_FWD_ALGO_WINOGRAD: cudnnConvolutionFwdAlgo_t =
        cudnnConvolutionFwdAlgo_t(6);
}
impl cudnnConvolutionFwdAlgo_t {
    pub const CUDNN_CONVOLUTION_FWD_ALGO_WINOGRAD_NONFUSED: cudnnConvolutionFwdAlgo_t =
        cudnnConvolutionFwdAlgo_t(7);
}
impl cudnnConvolutionFwdAlgo_t {
    pub const CUDNN_CONVOLUTION_FWD_ALGO_COUNT: cudnnConvolutionFwdAlgo_t =
        cudnnConvolutionFwdAlgo_t(8);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnConvolutionFwdAlgo_t(pub ::std::os::raw::c_int);
impl cudnnConvolutionBwdFilterAlgo_t {
    pub const CUDNN_CONVOLUTION_BWD_FILTER_ALGO_0: cudnnConvolutionBwdFilterAlgo_t =
        cudnnConvolutionBwdFilterAlgo_t(0);
}
impl cudnnConvolutionBwdFilterAlgo_t {
    pub const CUDNN_CONVOLUTION_BWD_FILTER_ALGO_1: cudnnConvolutionBwdFilterAlgo_t =
        cudnnConvolutionBwdFilterAlgo_t(1);
}
impl cudnnConvolutionBwdFilterAlgo_t {
    pub const CUDNN_CONVOLUTION_BWD_FILTER_ALGO_FFT: cudnnConvolutionBwdFilterAlgo_t =
        cudnnConvolutionBwdFilterAlgo_t(2);
}
impl cudnnConvolutionBwdFilterAlgo_t {
    pub const CUDNN_CONVOLUTION_BWD_FILTER_ALGO_3: cudnnConvolutionBwdFilterAlgo_t =
        cudnnConvolutionBwdFilterAlgo_t(3);
}
impl cudnnConvolutionBwdFilterAlgo_t {
    pub const CUDNN_CONVOLUTION_BWD_FILTER_ALGO_WINOGRAD: cudnnConvolutionBwdFilterAlgo_t =
        cudnnConvolutionBwdFilterAlgo_t(4);
}
impl cudnnConvolutionBwdFilterAlgo_t {
    pub const CUDNN_CONVOLUTION_BWD_FILTER_ALGO_WINOGRAD_NONFUSED: cudnnConvolutionBwdFilterAlgo_t =
        cudnnConvolutionBwdFilterAlgo_t(5);
}
impl cudnnConvolutionBwdFilterAlgo_t {
    pub const CUDNN_CONVOLUTION_BWD_FILTER_ALGO_FFT_TILING: cudnnConvolutionBwdFilterAlgo_t =
        cudnnConvolutionBwdFilterAlgo_t(6);
}
impl cudnnConvolutionBwdFilterAlgo_t {
    pub const CUDNN_CONVOLUTION_BWD_FILTER_ALGO_COUNT: cudnnConvolutionBwdFilterAlgo_t =
        cudnnConvolutionBwdFilterAlgo_t(7);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnConvolutionBwdFilterAlgo_t(pub ::std::os::raw::c_int);
impl cudnnConvolutionBwdDataAlgo_t {
    pub const CUDNN_CONVOLUTION_BWD_DATA_ALGO_0: cudnnConvolutionBwdDataAlgo_t =
        cudnnConvolutionBwdDataAlgo_t(0);
}
impl cudnnConvolutionBwdDataAlgo_t {
    pub const CUDNN_CONVOLUTION_BWD_DATA_ALGO_1: cudnnConvolutionBwdDataAlgo_t =
        cudnnConvolutionBwdDataAlgo_t(1);
}
impl cudnnConvolutionBwdDataAlgo_t {
    pub const CUDNN_CONVOLUTION_BWD_DATA_ALGO_FFT: cudnnConvolutionBwdDataAlgo_t =
        cudnnConvolutionBwdDataAlgo_t(2);
}
impl cudnnConvolutionBwdDataAlgo_t {
    pub const CUDNN_CONVOLUTION_BWD_DATA_ALGO_FFT_TILING: cudnnConvolutionBwdDataAlgo_t =
        cudnnConvolutionBwdDataAlgo_t(3);
}
impl cudnnConvolutionBwdDataAlgo_t {
    pub const CUDNN_CONVOLUTION_BWD_DATA_ALGO_WINOGRAD: cudnnConvolutionBwdDataAlgo_t =
        cudnnConvolutionBwdDataAlgo_t(4);
}
impl cudnnConvolutionBwdDataAlgo_t {
    pub const CUDNN_CONVOLUTION_BWD_DATA_ALGO_WINOGRAD_NONFUSED: cudnnConvolutionBwdDataAlgo_t =
        cudnnConvolutionBwdDataAlgo_t(5);
}
impl cudnnConvolutionBwdDataAlgo_t {
    pub const CUDNN_CONVOLUTION_BWD_DATA_ALGO_COUNT: cudnnConvolutionBwdDataAlgo_t =
        cudnnConvolutionBwdDataAlgo_t(6);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnConvolutionBwdDataAlgo_t(pub ::std::os::raw::c_int);
impl cudnnCTCLossAlgo_t {
    pub const CUDNN_CTC_LOSS_ALGO_DETERMINISTIC: cudnnCTCLossAlgo_t = cudnnCTCLossAlgo_t(0);
}
impl cudnnCTCLossAlgo_t {
    pub const CUDNN_CTC_LOSS_ALGO_NON_DETERMINISTIC: cudnnCTCLossAlgo_t = cudnnCTCLossAlgo_t(1);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnCTCLossAlgo_t(pub ::std::os::raw::c_int);

#[no_mangle]
pub extern "system" fn cudnnOpsVersionCheck() -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnSoftmaxBackward(
    handle: cudnnHandle_t,
    algo: cudnnSoftmaxAlgorithm_t,
    mode: cudnnSoftmaxMode_t,
    alpha: *const ::std::os::raw::c_void,
    yDesc: cudnnTensorDescriptor_t,
    y: *const ::std::os::raw::c_void,
    dyDesc: cudnnTensorDescriptor_t,
    dy: *const ::std::os::raw::c_void,
    beta: *const ::std::os::raw::c_void,
    dxDesc: cudnnTensorDescriptor_t,
    dx: *mut ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnPoolingBackward(
    handle: cudnnHandle_t,
    poolingDesc: cudnnPoolingDescriptor_t,
    alpha: *const ::std::os::raw::c_void,
    yDesc: cudnnTensorDescriptor_t,
    y: *const ::std::os::raw::c_void,
    dyDesc: cudnnTensorDescriptor_t,
    dy: *const ::std::os::raw::c_void,
    xDesc: cudnnTensorDescriptor_t,
    x: *const ::std::os::raw::c_void,
    beta: *const ::std::os::raw::c_void,
    dxDesc: cudnnTensorDescriptor_t,
    dx: *mut ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnActivationBackward(
    handle: cudnnHandle_t,
    activationDesc: cudnnActivationDescriptor_t,
    alpha: *const ::std::os::raw::c_void,
    yDesc: cudnnTensorDescriptor_t,
    y: *const ::std::os::raw::c_void,
    dyDesc: cudnnTensorDescriptor_t,
    dy: *const ::std::os::raw::c_void,
    xDesc: cudnnTensorDescriptor_t,
    x: *const ::std::os::raw::c_void,
    beta: *const ::std::os::raw::c_void,
    dxDesc: cudnnTensorDescriptor_t,
    dx: *mut ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnLRNCrossChannelBackward(
    handle: cudnnHandle_t,
    normDesc: cudnnLRNDescriptor_t,
    lrnMode: cudnnLRNMode_t,
    alpha: *const ::std::os::raw::c_void,
    yDesc: cudnnTensorDescriptor_t,
    y: *const ::std::os::raw::c_void,
    dyDesc: cudnnTensorDescriptor_t,
    dy: *const ::std::os::raw::c_void,
    xDesc: cudnnTensorDescriptor_t,
    x: *const ::std::os::raw::c_void,
    beta: *const ::std::os::raw::c_void,
    dxDesc: cudnnTensorDescriptor_t,
    dx: *mut ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnDivisiveNormalizationBackward(
    handle: cudnnHandle_t,
    normDesc: cudnnLRNDescriptor_t,
    mode: cudnnDivNormMode_t,
    alpha: *const ::std::os::raw::c_void,
    xDesc: cudnnTensorDescriptor_t,
    x: *const ::std::os::raw::c_void,
    means: *const ::std::os::raw::c_void,
    dy: *const ::std::os::raw::c_void,
    temp: *mut ::std::os::raw::c_void,
    temp2: *mut ::std::os::raw::c_void,
    beta: *const ::std::os::raw::c_void,
    dXdMeansDesc: cudnnTensorDescriptor_t,
    dx: *mut ::std::os::raw::c_void,
    dMeans: *mut ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub unsafe extern "system" fn cudnnGetBatchNormalizationForwardTrainingExWorkspaceSize(
    handle: cudnnHandle_t,
    mode: cudnnBatchNormMode_t,
    bnOps: cudnnBatchNormOps_t,
    xDesc: cudnnTensorDescriptor_t,
    zDesc: cudnnTensorDescriptor_t,
    yDesc: cudnnTensorDescriptor_t,
    bnScaleBiasMeanVarDesc: cudnnTensorDescriptor_t,
    activationDesc: cudnnActivationDescriptor_t,
    sizeInBytes: *mut usize,
) -> cudnnStatus_t {
    crate::get_batch_normalization_forward_training_ex_workspace_size(
        handle,
        mode,
        bnOps,
        xDesc,
        zDesc,
        yDesc,
        bnScaleBiasMeanVarDesc,
        activationDesc,
        sizeInBytes,
    )
}

#[no_mangle]
pub extern "system" fn cudnnGetBatchNormalizationBackwardExWorkspaceSize(
    handle: cudnnHandle_t,
    mode: cudnnBatchNormMode_t,
    bnOps: cudnnBatchNormOps_t,
    xDesc: cudnnTensorDescriptor_t,
    yDesc: cudnnTensorDescriptor_t,
    dyDesc: cudnnTensorDescriptor_t,
    dzDesc: cudnnTensorDescriptor_t,
    dxDesc: cudnnTensorDescriptor_t,
    dBnScaleBiasDesc: cudnnTensorDescriptor_t,
    activationDesc: cudnnActivationDescriptor_t,
    sizeInBytes: *mut usize,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub unsafe extern "system" fn cudnnGetBatchNormalizationTrainingExReserveSpaceSize(
    handle: cudnnHandle_t,
    mode: cudnnBatchNormMode_t,
    bnOps: cudnnBatchNormOps_t,
    activationDesc: cudnnActivationDescriptor_t,
    xDesc: cudnnTensorDescriptor_t,
    sizeInBytes: *mut usize,
) -> cudnnStatus_t {
    crate::get_batch_normalization_training_ex_reserve_space_size(
        handle,
        mode,
        bnOps,
        activationDesc,
        xDesc,
        sizeInBytes,
    )
}

#[no_mangle]
pub extern "system" fn cudnnBatchNormalizationForwardTraining(
    handle: cudnnHandle_t,
    mode: cudnnBatchNormMode_t,
    alpha: *const ::std::os::raw::c_void,
    beta: *const ::std::os::raw::c_void,
    xDesc: cudnnTensorDescriptor_t,
    x: *const ::std::os::raw::c_void,
    yDesc: cudnnTensorDescriptor_t,
    y: *mut ::std::os::raw::c_void,
    bnScaleBiasMeanVarDesc: cudnnTensorDescriptor_t,
    bnScale: *const ::std::os::raw::c_void,
    bnBias: *const ::std::os::raw::c_void,
    exponentialAverageFactor: f64,
    resultRunningMean: *mut ::std::os::raw::c_void,
    resultRunningVariance: *mut ::std::os::raw::c_void,
    epsilon: f64,
    resultSaveMean: *mut ::std::os::raw::c_void,
    resultSaveInvVariance: *mut ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub unsafe extern "system" fn cudnnBatchNormalizationForwardTrainingEx(
    handle: cudnnHandle_t,
    mode: cudnnBatchNormMode_t,
    bnOps: cudnnBatchNormOps_t,
    alpha: *const ::std::os::raw::c_void,
    beta: *const ::std::os::raw::c_void,
    xDesc: cudnnTensorDescriptor_t,
    xData: *const ::std::os::raw::c_void,
    zDesc: cudnnTensorDescriptor_t,
    zData: *const ::std::os::raw::c_void,
    yDesc: cudnnTensorDescriptor_t,
    yData: *mut ::std::os::raw::c_void,
    bnScaleBiasMeanVarDesc: cudnnTensorDescriptor_t,
    bnScale: *const ::std::os::raw::c_void,
    bnBias: *const ::std::os::raw::c_void,
    exponentialAverageFactor: f64,
    resultRunningMean: *mut ::std::os::raw::c_void,
    resultRunningVariance: *mut ::std::os::raw::c_void,
    epsilon: f64,
    resultSaveMean: *mut ::std::os::raw::c_void,
    resultSaveInvVariance: *mut ::std::os::raw::c_void,
    activationDesc: cudnnActivationDescriptor_t,
    workspace: *mut ::std::os::raw::c_void,
    workSpaceSizeInBytes: usize,
    reserveSpace: *mut ::std::os::raw::c_void,
    reserveSpaceSizeInBytes: usize,
) -> cudnnStatus_t {
    crate::batch_normalization_forward_training_ex(
        handle,
        mode,
        bnOps,
        alpha,
        beta,
        xDesc,
        xData,
        zDesc,
        zData,
        yDesc,
        yData,
        bnScaleBiasMeanVarDesc,
        bnScale,
        bnBias,
        exponentialAverageFactor,
        resultRunningMean,
        resultRunningVariance,
        epsilon,
        resultSaveMean,
        resultSaveInvVariance,
        activationDesc,
        workspace,
        workSpaceSizeInBytes,
        reserveSpace,
        reserveSpaceSizeInBytes,
    )
}

#[no_mangle]
pub extern "system" fn cudnnBatchNormalizationBackward(
    handle: cudnnHandle_t,
    mode: cudnnBatchNormMode_t,
    alphaDataDiff: *const ::std::os::raw::c_void,
    betaDataDiff: *const ::std::os::raw::c_void,
    alphaParamDiff: *const ::std::os::raw::c_void,
    betaParamDiff: *const ::std::os::raw::c_void,
    xDesc: cudnnTensorDescriptor_t,
    x: *const ::std::os::raw::c_void,
    dyDesc: cudnnTensorDescriptor_t,
    dy: *const ::std::os::raw::c_void,
    dxDesc: cudnnTensorDescriptor_t,
    dx: *mut ::std::os::raw::c_void,
    dBnScaleBiasDesc: cudnnTensorDescriptor_t,
    bnScale: *const ::std::os::raw::c_void,
    dBnScaleResult: *mut ::std::os::raw::c_void,
    dBnBiasResult: *mut ::std::os::raw::c_void,
    epsilon: f64,
    savedMean: *const ::std::os::raw::c_void,
    savedInvVariance: *const ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnBatchNormalizationBackwardEx(
    handle: cudnnHandle_t,
    mode: cudnnBatchNormMode_t,
    bnOps: cudnnBatchNormOps_t,
    alphaDataDiff: *const ::std::os::raw::c_void,
    betaDataDiff: *const ::std::os::raw::c_void,
    alphaParamDiff: *const ::std::os::raw::c_void,
    betaParamDiff: *const ::std::os::raw::c_void,
    xDesc: cudnnTensorDescriptor_t,
    xData: *const ::std::os::raw::c_void,
    yDesc: cudnnTensorDescriptor_t,
    yData: *const ::std::os::raw::c_void,
    dyDesc: cudnnTensorDescriptor_t,
    dyData: *const ::std::os::raw::c_void,
    dzDesc: cudnnTensorDescriptor_t,
    dzData: *mut ::std::os::raw::c_void,
    dxDesc: cudnnTensorDescriptor_t,
    dxData: *mut ::std::os::raw::c_void,
    dBnScaleBiasDesc: cudnnTensorDescriptor_t,
    bnScaleData: *const ::std::os::raw::c_void,
    bnBiasData: *const ::std::os::raw::c_void,
    dBnScaleData: *mut ::std::os::raw::c_void,
    dBnBiasData: *mut ::std::os::raw::c_void,
    epsilon: f64,
    savedMean: *const ::std::os::raw::c_void,
    savedInvVariance: *const ::std::os::raw::c_void,
    activationDesc: cudnnActivationDescriptor_t,
    workSpace: *mut ::std::os::raw::c_void,
    workSpaceSizeInBytes: usize,
    reserveSpace: *mut ::std::os::raw::c_void,
    reserveSpaceSizeInBytes: usize,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnGetNormalizationForwardTrainingWorkspaceSize(
    handle: cudnnHandle_t,
    mode: cudnnNormMode_t,
    normOps: cudnnNormOps_t,
    algo: cudnnNormAlgo_t,
    xDesc: cudnnTensorDescriptor_t,
    zDesc: cudnnTensorDescriptor_t,
    yDesc: cudnnTensorDescriptor_t,
    normScaleBiasDesc: cudnnTensorDescriptor_t,
    activationDesc: cudnnActivationDescriptor_t,
    normMeanVarDesc: cudnnTensorDescriptor_t,
    sizeInBytes: *mut usize,
    groupCnt: ::std::os::raw::c_int,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnGetNormalizationBackwardWorkspaceSize(
    handle: cudnnHandle_t,
    mode: cudnnNormMode_t,
    normOps: cudnnNormOps_t,
    algo: cudnnNormAlgo_t,
    xDesc: cudnnTensorDescriptor_t,
    yDesc: cudnnTensorDescriptor_t,
    dyDesc: cudnnTensorDescriptor_t,
    dzDesc: cudnnTensorDescriptor_t,
    dxDesc: cudnnTensorDescriptor_t,
    dNormScaleBiasDesc: cudnnTensorDescriptor_t,
    activationDesc: cudnnActivationDescriptor_t,
    normMeanVarDesc: cudnnTensorDescriptor_t,
    sizeInBytes: *mut usize,
    groupCnt: ::std::os::raw::c_int,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnGetNormalizationTrainingReserveSpaceSize(
    handle: cudnnHandle_t,
    mode: cudnnNormMode_t,
    normOps: cudnnNormOps_t,
    algo: cudnnNormAlgo_t,
    activationDesc: cudnnActivationDescriptor_t,
    xDesc: cudnnTensorDescriptor_t,
    sizeInBytes: *mut usize,
    groupCnt: ::std::os::raw::c_int,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnNormalizationForwardTraining(
    handle: cudnnHandle_t,
    mode: cudnnNormMode_t,
    normOps: cudnnNormOps_t,
    algo: cudnnNormAlgo_t,
    alpha: *const ::std::os::raw::c_void,
    beta: *const ::std::os::raw::c_void,
    xDesc: cudnnTensorDescriptor_t,
    xData: *const ::std::os::raw::c_void,
    normScaleBiasDesc: cudnnTensorDescriptor_t,
    normScale: *const ::std::os::raw::c_void,
    normBias: *const ::std::os::raw::c_void,
    exponentialAverageFactor: f64,
    normMeanVarDesc: cudnnTensorDescriptor_t,
    resultRunningMean: *mut ::std::os::raw::c_void,
    resultRunningVariance: *mut ::std::os::raw::c_void,
    epsilon: f64,
    resultSaveMean: *mut ::std::os::raw::c_void,
    resultSaveInvVariance: *mut ::std::os::raw::c_void,
    activationDesc: cudnnActivationDescriptor_t,
    zDesc: cudnnTensorDescriptor_t,
    zData: *const ::std::os::raw::c_void,
    yDesc: cudnnTensorDescriptor_t,
    yData: *mut ::std::os::raw::c_void,
    workspace: *mut ::std::os::raw::c_void,
    workSpaceSizeInBytes: usize,
    reserveSpace: *mut ::std::os::raw::c_void,
    reserveSpaceSizeInBytes: usize,
    groupCnt: ::std::os::raw::c_int,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnNormalizationBackward(
    handle: cudnnHandle_t,
    mode: cudnnNormMode_t,
    normOps: cudnnNormOps_t,
    algo: cudnnNormAlgo_t,
    alphaDataDiff: *const ::std::os::raw::c_void,
    betaDataDiff: *const ::std::os::raw::c_void,
    alphaParamDiff: *const ::std::os::raw::c_void,
    betaParamDiff: *const ::std::os::raw::c_void,
    xDesc: cudnnTensorDescriptor_t,
    xData: *const ::std::os::raw::c_void,
    yDesc: cudnnTensorDescriptor_t,
    yData: *const ::std::os::raw::c_void,
    dyDesc: cudnnTensorDescriptor_t,
    dyData: *const ::std::os::raw::c_void,
    dzDesc: cudnnTensorDescriptor_t,
    dzData: *mut ::std::os::raw::c_void,
    dxDesc: cudnnTensorDescriptor_t,
    dxData: *mut ::std::os::raw::c_void,
    dNormScaleBiasDesc: cudnnTensorDescriptor_t,
    normScaleData: *const ::std::os::raw::c_void,
    normBiasData: *const ::std::os::raw::c_void,
    dNormScaleData: *mut ::std::os::raw::c_void,
    dNormBiasData: *mut ::std::os::raw::c_void,
    epsilon: f64,
    normMeanVarDesc: cudnnTensorDescriptor_t,
    savedMean: *const ::std::os::raw::c_void,
    savedInvVariance: *const ::std::os::raw::c_void,
    activationDesc: cudnnActivationDescriptor_t,
    workSpace: *mut ::std::os::raw::c_void,
    workSpaceSizeInBytes: usize,
    reserveSpace: *mut ::std::os::raw::c_void,
    reserveSpaceSizeInBytes: usize,
    groupCnt: ::std::os::raw::c_int,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnSpatialTfGridGeneratorBackward(
    handle: cudnnHandle_t,
    stDesc: cudnnSpatialTransformerDescriptor_t,
    dgrid: *const ::std::os::raw::c_void,
    dtheta: *mut ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnSpatialTfSamplerBackward(
    handle: cudnnHandle_t,
    stDesc: cudnnSpatialTransformerDescriptor_t,
    alpha: *const ::std::os::raw::c_void,
    xDesc: cudnnTensorDescriptor_t,
    x: *const ::std::os::raw::c_void,
    beta: *const ::std::os::raw::c_void,
    dxDesc: cudnnTensorDescriptor_t,
    dx: *mut ::std::os::raw::c_void,
    alphaDgrid: *const ::std::os::raw::c_void,
    dyDesc: cudnnTensorDescriptor_t,
    dy: *const ::std::os::raw::c_void,
    grid: *const ::std::os::raw::c_void,
    betaDgrid: *const ::std::os::raw::c_void,
    dgrid: *mut ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnDropoutBackward(
    handle: cudnnHandle_t,
    dropoutDesc: cudnnDropoutDescriptor_t,
    dydesc: cudnnTensorDescriptor_t,
    dy: *const ::std::os::raw::c_void,
    dxdesc: cudnnTensorDescriptor_t,
    dx: *mut ::std::os::raw::c_void,
    reserveSpace: *mut ::std::os::raw::c_void,
    reserveSpaceSizeInBytes: usize,
) -> cudnnStatus_t {
    crate::unsupported()
}
impl cudnnRNNAlgo_t {
    pub const CUDNN_RNN_ALGO_STANDARD: cudnnRNNAlgo_t = cudnnRNNAlgo_t(0);
}
impl cudnnRNNAlgo_t {
    pub const CUDNN_RNN_ALGO_PERSIST_STATIC: cudnnRNNAlgo_t = cudnnRNNAlgo_t(1);
}
impl cudnnRNNAlgo_t {
    pub const CUDNN_RNN_ALGO_PERSIST_DYNAMIC: cudnnRNNAlgo_t = cudnnRNNAlgo_t(2);
}
impl cudnnRNNAlgo_t {
    pub const CUDNN_RNN_ALGO_PERSIST_STATIC_SMALL_H: cudnnRNNAlgo_t = cudnnRNNAlgo_t(3);
}
impl cudnnRNNAlgo_t {
    pub const CUDNN_RNN_ALGO_COUNT: cudnnRNNAlgo_t = cudnnRNNAlgo_t(4);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnRNNAlgo_t(pub ::std::os::raw::c_int);
impl cudnnForwardMode_t {
    pub const CUDNN_FWD_MODE_INFERENCE: cudnnForwardMode_t = cudnnForwardMode_t(0);
}
impl cudnnForwardMode_t {
    pub const CUDNN_FWD_MODE_TRAINING: cudnnForwardMode_t = cudnnForwardMode_t(1);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnForwardMode_t(pub ::std::os::raw::c_int);
impl cudnnRNNMode_t {
    pub const CUDNN_RNN_RELU: cudnnRNNMode_t = cudnnRNNMode_t(0);
}
impl cudnnRNNMode_t {
    pub const CUDNN_RNN_TANH: cudnnRNNMode_t = cudnnRNNMode_t(1);
}
impl cudnnRNNMode_t {
    pub const CUDNN_LSTM: cudnnRNNMode_t = cudnnRNNMode_t(2);
}
impl cudnnRNNMode_t {
    pub const CUDNN_GRU: cudnnRNNMode_t = cudnnRNNMode_t(3);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnRNNMode_t(pub ::std::os::raw::c_int);
impl cudnnRNNBiasMode_t {
    pub const CUDNN_RNN_NO_BIAS: cudnnRNNBiasMode_t = cudnnRNNBiasMode_t(0);
}
impl cudnnRNNBiasMode_t {
    pub const CUDNN_RNN_SINGLE_INP_BIAS: cudnnRNNBiasMode_t = cudnnRNNBiasMode_t(1);
}
impl cudnnRNNBiasMode_t {
    pub const CUDNN_RNN_DOUBLE_BIAS: cudnnRNNBiasMode_t = cudnnRNNBiasMode_t(2);
}
impl cudnnRNNBiasMode_t {
    pub const CUDNN_RNN_SINGLE_REC_BIAS: cudnnRNNBiasMode_t = cudnnRNNBiasMode_t(3);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnRNNBiasMode_t(pub ::std::os::raw::c_int);
impl cudnnDirectionMode_t {
    pub const CUDNN_UNIDIRECTIONAL: cudnnDirectionMode_t = cudnnDirectionMode_t(0);
}
impl cudnnDirectionMode_t {
    pub const CUDNN_BIDIRECTIONAL: cudnnDirectionMode_t = cudnnDirectionMode_t(1);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnDirectionMode_t(pub ::std::os::raw::c_int);
impl cudnnRNNInputMode_t {
    pub const CUDNN_LINEAR_INPUT: cudnnRNNInputMode_t = cudnnRNNInputMode_t(0);
}
impl cudnnRNNInputMode_t {
    pub const CUDNN_SKIP_INPUT: cudnnRNNInputMode_t = cudnnRNNInputMode_t(1);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnRNNInputMode_t(pub ::std::os::raw::c_int);
impl cudnnRNNClipMode_t {
    pub const CUDNN_RNN_CLIP_NONE: cudnnRNNClipMode_t = cudnnRNNClipMode_t(0);
}
impl cudnnRNNClipMode_t {
    pub const CUDNN_RNN_CLIP_MINMAX: cudnnRNNClipMode_t = cudnnRNNClipMode_t(1);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnRNNClipMode_t(pub ::std::os::raw::c_int);
impl cudnnRNNDataLayout_t {
    pub const CUDNN_RNN_DATA_LAYOUT_SEQ_MAJOR_UNPACKED: cudnnRNNDataLayout_t =
        cudnnRNNDataLayout_t(0);
}
impl cudnnRNNDataLayout_t {
    pub const CUDNN_RNN_DATA_LAYOUT_SEQ_MAJOR_PACKED: cudnnRNNDataLayout_t =
        cudnnRNNDataLayout_t(1);
}
impl cudnnRNNDataLayout_t {
    pub const CUDNN_RNN_DATA_LAYOUT_BATCH_MAJOR_UNPACKED: cudnnRNNDataLayout_t =
        cudnnRNNDataLayout_t(2);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnRNNDataLayout_t(pub ::std::os::raw::c_int);
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnRNNStruct {
    _unused: [u8; 0],
}
pub type cudnnRNNDescriptor_t = *mut cudnnRNNStruct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnRNNDataStruct {
    _unused: [u8; 0],
}
pub type cudnnRNNDataDescriptor_t = *mut cudnnRNNDataStruct;

#[no_mangle]
pub extern "system" fn cudnnCreateRNNDescriptor(
    rnnDesc: *mut cudnnRNNDescriptor_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnDestroyRNNDescriptor(rnnDesc: cudnnRNNDescriptor_t) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnSetRNNDescriptor_v8(
    rnnDesc: cudnnRNNDescriptor_t,
    algo: cudnnRNNAlgo_t,
    cellMode: cudnnRNNMode_t,
    biasMode: cudnnRNNBiasMode_t,
    dirMode: cudnnDirectionMode_t,
    inputMode: cudnnRNNInputMode_t,
    dataType: cudnnDataType_t,
    mathPrec: cudnnDataType_t,
    mathType: cudnnMathType_t,
    inputSize: i32,
    hiddenSize: i32,
    projSize: i32,
    numLayers: i32,
    dropoutDesc: cudnnDropoutDescriptor_t,
    auxFlags: u32,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnGetRNNDescriptor_v8(
    rnnDesc: cudnnRNNDescriptor_t,
    algo: *mut cudnnRNNAlgo_t,
    cellMode: *mut cudnnRNNMode_t,
    biasMode: *mut cudnnRNNBiasMode_t,
    dirMode: *mut cudnnDirectionMode_t,
    inputMode: *mut cudnnRNNInputMode_t,
    dataType: *mut cudnnDataType_t,
    mathPrec: *mut cudnnDataType_t,
    mathType: *mut cudnnMathType_t,
    inputSize: *mut i32,
    hiddenSize: *mut i32,
    projSize: *mut i32,
    numLayers: *mut i32,
    dropoutDesc: *mut cudnnDropoutDescriptor_t,
    auxFlags: *mut u32,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnRNNSetClip_v8(
    rnnDesc: cudnnRNNDescriptor_t,
    clipMode: cudnnRNNClipMode_t,
    clipNanOpt: cudnnNanPropagation_t,
    lclip: f64,
    rclip: f64,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnRNNSetClip_v9(
    rnnDesc: cudnnRNNDescriptor_t,
    clipMode: cudnnRNNClipMode_t,
    lclip: f64,
    rclip: f64,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnRNNGetClip_v8(
    rnnDesc: cudnnRNNDescriptor_t,
    clipMode: *mut cudnnRNNClipMode_t,
    clipNanOpt: *mut cudnnNanPropagation_t,
    lclip: *mut f64,
    rclip: *mut f64,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnRNNGetClip_v9(
    rnnDesc: cudnnRNNDescriptor_t,
    clipMode: *mut cudnnRNNClipMode_t,
    lclip: *mut f64,
    rclip: *mut f64,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnBuildRNNDynamic(
    handle: cudnnHandle_t,
    rnnDesc: cudnnRNNDescriptor_t,
    miniBatch: ::std::os::raw::c_int,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnGetRNNTempSpaceSizes(
    handle: cudnnHandle_t,
    rnnDesc: cudnnRNNDescriptor_t,
    fwdMode: cudnnForwardMode_t,
    xDesc: cudnnRNNDataDescriptor_t,
    workSpaceSize: *mut usize,
    reserveSpaceSize: *mut usize,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnGetRNNWeightSpaceSize(
    handle: cudnnHandle_t,
    rnnDesc: cudnnRNNDescriptor_t,
    weightSpaceSize: *mut usize,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnGetRNNWeightParams(
    handle: cudnnHandle_t,
    rnnDesc: cudnnRNNDescriptor_t,
    pseudoLayer: i32,
    weightSpaceSize: usize,
    weightSpace: *const ::std::os::raw::c_void,
    linLayerID: i32,
    mDesc: cudnnTensorDescriptor_t,
    mAddr: *mut *mut ::std::os::raw::c_void,
    bDesc: cudnnTensorDescriptor_t,
    bAddr: *mut *mut ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnCreateRNNDataDescriptor(
    rnnDataDesc: *mut cudnnRNNDataDescriptor_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnDestroyRNNDataDescriptor(
    rnnDataDesc: cudnnRNNDataDescriptor_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnSetRNNDataDescriptor(
    rnnDataDesc: cudnnRNNDataDescriptor_t,
    dataType: cudnnDataType_t,
    layout: cudnnRNNDataLayout_t,
    maxSeqLength: ::std::os::raw::c_int,
    batchSize: ::std::os::raw::c_int,
    vectorSize: ::std::os::raw::c_int,
    seqLengthArray: *const ::std::os::raw::c_int,
    paddingFill: *mut ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnGetRNNDataDescriptor(
    rnnDataDesc: cudnnRNNDataDescriptor_t,
    dataType: *mut cudnnDataType_t,
    layout: *mut cudnnRNNDataLayout_t,
    maxSeqLength: *mut ::std::os::raw::c_int,
    batchSize: *mut ::std::os::raw::c_int,
    vectorSize: *mut ::std::os::raw::c_int,
    arrayLengthRequested: ::std::os::raw::c_int,
    seqLengthArray: *mut ::std::os::raw::c_int,
    paddingFill: *mut ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnRNNForward(
    handle: cudnnHandle_t,
    rnnDesc: cudnnRNNDescriptor_t,
    fwdMode: cudnnForwardMode_t,
    devSeqLengths: *const i32,
    xDesc: cudnnRNNDataDescriptor_t,
    x: *const ::std::os::raw::c_void,
    yDesc: cudnnRNNDataDescriptor_t,
    y: *mut ::std::os::raw::c_void,
    hDesc: cudnnTensorDescriptor_t,
    hx: *const ::std::os::raw::c_void,
    hy: *mut ::std::os::raw::c_void,
    cDesc: cudnnTensorDescriptor_t,
    cx: *const ::std::os::raw::c_void,
    cy: *mut ::std::os::raw::c_void,
    weightSpaceSize: usize,
    weightSpace: *const ::std::os::raw::c_void,
    workSpaceSize: usize,
    workSpace: *mut ::std::os::raw::c_void,
    reserveSpaceSize: usize,
    reserveSpace: *mut ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::unsupported()
}
impl cudnnSeqDataAxis_t {
    pub const CUDNN_SEQDATA_TIME_DIM: cudnnSeqDataAxis_t = cudnnSeqDataAxis_t(0);
}
impl cudnnSeqDataAxis_t {
    pub const CUDNN_SEQDATA_BATCH_DIM: cudnnSeqDataAxis_t = cudnnSeqDataAxis_t(1);
}
impl cudnnSeqDataAxis_t {
    pub const CUDNN_SEQDATA_BEAM_DIM: cudnnSeqDataAxis_t = cudnnSeqDataAxis_t(2);
}
impl cudnnSeqDataAxis_t {
    pub const CUDNN_SEQDATA_VECT_DIM: cudnnSeqDataAxis_t = cudnnSeqDataAxis_t(3);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnSeqDataAxis_t(pub ::std::os::raw::c_int);
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnSeqDataStruct {
    _unused: [u8; 0],
}
pub type cudnnSeqDataDescriptor_t = *mut cudnnSeqDataStruct;

#[no_mangle]
pub extern "system" fn cudnnCreateSeqDataDescriptor(
    seqDataDesc: *mut cudnnSeqDataDescriptor_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnDestroySeqDataDescriptor(
    seqDataDesc: cudnnSeqDataDescriptor_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnSetSeqDataDescriptor(
    seqDataDesc: cudnnSeqDataDescriptor_t,
    dataType: cudnnDataType_t,
    nbDims: ::std::os::raw::c_int,
    dimA: *const ::std::os::raw::c_int,
    axes: *const cudnnSeqDataAxis_t,
    seqLengthArraySize: usize,
    seqLengthArray: *const ::std::os::raw::c_int,
    paddingFill: *mut ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnGetSeqDataDescriptor(
    seqDataDesc: cudnnSeqDataDescriptor_t,
    dataType: *mut cudnnDataType_t,
    nbDims: *mut ::std::os::raw::c_int,
    nbDimsRequested: ::std::os::raw::c_int,
    dimA: *mut ::std::os::raw::c_int,
    axes: *mut cudnnSeqDataAxis_t,
    seqLengthArraySize: *mut usize,
    seqLengthSizeRequested: usize,
    seqLengthArray: *mut ::std::os::raw::c_int,
    paddingFill: *mut ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::unsupported()
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnAttnStruct {
    _unused: [u8; 0],
}
pub type cudnnAttnDescriptor_t = *mut cudnnAttnStruct;

#[no_mangle]
pub extern "system" fn cudnnCreateAttnDescriptor(
    attnDesc: *mut cudnnAttnDescriptor_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnDestroyAttnDescriptor(
    attnDesc: cudnnAttnDescriptor_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnSetAttnDescriptor(
    attnDesc: cudnnAttnDescriptor_t,
    attnMode: ::std::os::raw::c_uint,
    nHeads: ::std::os::raw::c_int,
    smScaler: f64,
    dataType: cudnnDataType_t,
    computePrec: cudnnDataType_t,
    mathType: cudnnMathType_t,
    attnDropoutDesc: cudnnDropoutDescriptor_t,
    postDropoutDesc: cudnnDropoutDescriptor_t,
    qSize: ::std::os::raw::c_int,
    kSize: ::std::os::raw::c_int,
    vSize: ::std::os::raw::c_int,
    qProjSize: ::std::os::raw::c_int,
    kProjSize: ::std::os::raw::c_int,
    vProjSize: ::std::os::raw::c_int,
    oProjSize: ::std::os::raw::c_int,
    qoMaxSeqLength: ::std::os::raw::c_int,
    kvMaxSeqLength: ::std::os::raw::c_int,
    maxBatchSize: ::std::os::raw::c_int,
    maxBeamSize: ::std::os::raw::c_int,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnGetAttnDescriptor(
    attnDesc: cudnnAttnDescriptor_t,
    attnMode: *mut ::std::os::raw::c_uint,
    nHeads: *mut ::std::os::raw::c_int,
    smScaler: *mut f64,
    dataType: *mut cudnnDataType_t,
    computePrec: *mut cudnnDataType_t,
    mathType: *mut cudnnMathType_t,
    attnDropoutDesc: *mut cudnnDropoutDescriptor_t,
    postDropoutDesc: *mut cudnnDropoutDescriptor_t,
    qSize: *mut ::std::os::raw::c_int,
    kSize: *mut ::std::os::raw::c_int,
    vSize: *mut ::std::os::raw::c_int,
    qProjSize: *mut ::std::os::raw::c_int,
    kProjSize: *mut ::std::os::raw::c_int,
    vProjSize: *mut ::std::os::raw::c_int,
    oProjSize: *mut ::std::os::raw::c_int,
    qoMaxSeqLength: *mut ::std::os::raw::c_int,
    kvMaxSeqLength: *mut ::std::os::raw::c_int,
    maxBatchSize: *mut ::std::os::raw::c_int,
    maxBeamSize: *mut ::std::os::raw::c_int,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnGetMultiHeadAttnBuffers(
    handle: cudnnHandle_t,
    attnDesc: cudnnAttnDescriptor_t,
    weightSizeInBytes: *mut usize,
    workSpaceSizeInBytes: *mut usize,
    reserveSpaceSizeInBytes: *mut usize,
) -> cudnnStatus_t {
    crate::unsupported()
}
impl cudnnMultiHeadAttnWeightKind_t {
    pub const CUDNN_MH_ATTN_Q_WEIGHTS: cudnnMultiHeadAttnWeightKind_t =
        cudnnMultiHeadAttnWeightKind_t(0);
}
impl cudnnMultiHeadAttnWeightKind_t {
    pub const CUDNN_MH_ATTN_K_WEIGHTS: cudnnMultiHeadAttnWeightKind_t =
        cudnnMultiHeadAttnWeightKind_t(1);
}
impl cudnnMultiHeadAttnWeightKind_t {
    pub const CUDNN_MH_ATTN_V_WEIGHTS: cudnnMultiHeadAttnWeightKind_t =
        cudnnMultiHeadAttnWeightKind_t(2);
}
impl cudnnMultiHeadAttnWeightKind_t {
    pub const CUDNN_MH_ATTN_O_WEIGHTS: cudnnMultiHeadAttnWeightKind_t =
        cudnnMultiHeadAttnWeightKind_t(3);
}
impl cudnnMultiHeadAttnWeightKind_t {
    pub const CUDNN_MH_ATTN_Q_BIASES: cudnnMultiHeadAttnWeightKind_t =
        cudnnMultiHeadAttnWeightKind_t(4);
}
impl cudnnMultiHeadAttnWeightKind_t {
    pub const CUDNN_MH_ATTN_K_BIASES: cudnnMultiHeadAttnWeightKind_t =
        cudnnMultiHeadAttnWeightKind_t(5);
}
impl cudnnMultiHeadAttnWeightKind_t {
    pub const CUDNN_MH_ATTN_V_BIASES: cudnnMultiHeadAttnWeightKind_t =
        cudnnMultiHeadAttnWeightKind_t(6);
}
impl cudnnMultiHeadAttnWeightKind_t {
    pub const CUDNN_MH_ATTN_O_BIASES: cudnnMultiHeadAttnWeightKind_t =
        cudnnMultiHeadAttnWeightKind_t(7);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnMultiHeadAttnWeightKind_t(pub ::std::os::raw::c_int);

#[no_mangle]
pub extern "system" fn cudnnGetMultiHeadAttnWeights(
    handle: cudnnHandle_t,
    attnDesc: cudnnAttnDescriptor_t,
    wKind: cudnnMultiHeadAttnWeightKind_t,
    weightSizeInBytes: usize,
    weights: *const ::std::os::raw::c_void,
    wDesc: cudnnTensorDescriptor_t,
    wAddr: *mut *mut ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnMultiHeadAttnForward(
    handle: cudnnHandle_t,
    attnDesc: cudnnAttnDescriptor_t,
    currIdx: ::std::os::raw::c_int,
    loWinIdx: *const ::std::os::raw::c_int,
    hiWinIdx: *const ::std::os::raw::c_int,
    devSeqLengthsQO: *const ::std::os::raw::c_int,
    devSeqLengthsKV: *const ::std::os::raw::c_int,
    qDesc: cudnnSeqDataDescriptor_t,
    queries: *const ::std::os::raw::c_void,
    residuals: *const ::std::os::raw::c_void,
    kDesc: cudnnSeqDataDescriptor_t,
    keys: *const ::std::os::raw::c_void,
    vDesc: cudnnSeqDataDescriptor_t,
    values: *const ::std::os::raw::c_void,
    oDesc: cudnnSeqDataDescriptor_t,
    out: *mut ::std::os::raw::c_void,
    weightSizeInBytes: usize,
    weights: *const ::std::os::raw::c_void,
    workSpaceSizeInBytes: usize,
    workSpace: *mut ::std::os::raw::c_void,
    reserveSpaceSizeInBytes: usize,
    reserveSpace: *mut ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnAdvVersionCheck() -> cudnnStatus_t {
    crate::unsupported()
}
impl cudnnWgradMode_t {
    pub const CUDNN_WGRAD_MODE_ADD: cudnnWgradMode_t = cudnnWgradMode_t(0);
}
impl cudnnWgradMode_t {
    pub const CUDNN_WGRAD_MODE_SET: cudnnWgradMode_t = cudnnWgradMode_t(1);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnWgradMode_t(pub ::std::os::raw::c_int);

#[no_mangle]
pub extern "system" fn cudnnRNNBackwardData_v8(
    handle: cudnnHandle_t,
    rnnDesc: cudnnRNNDescriptor_t,
    devSeqLengths: *const i32,
    yDesc: cudnnRNNDataDescriptor_t,
    y: *const ::std::os::raw::c_void,
    dy: *const ::std::os::raw::c_void,
    xDesc: cudnnRNNDataDescriptor_t,
    dx: *mut ::std::os::raw::c_void,
    hDesc: cudnnTensorDescriptor_t,
    hx: *const ::std::os::raw::c_void,
    dhy: *const ::std::os::raw::c_void,
    dhx: *mut ::std::os::raw::c_void,
    cDesc: cudnnTensorDescriptor_t,
    cx: *const ::std::os::raw::c_void,
    dcy: *const ::std::os::raw::c_void,
    dcx: *mut ::std::os::raw::c_void,
    weightSpaceSize: usize,
    weightSpace: *const ::std::os::raw::c_void,
    workSpaceSize: usize,
    workSpace: *mut ::std::os::raw::c_void,
    reserveSpaceSize: usize,
    reserveSpace: *mut ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnRNNBackwardWeights_v8(
    handle: cudnnHandle_t,
    rnnDesc: cudnnRNNDescriptor_t,
    addGrad: cudnnWgradMode_t,
    devSeqLengths: *const i32,
    xDesc: cudnnRNNDataDescriptor_t,
    x: *const ::std::os::raw::c_void,
    hDesc: cudnnTensorDescriptor_t,
    hx: *const ::std::os::raw::c_void,
    yDesc: cudnnRNNDataDescriptor_t,
    y: *const ::std::os::raw::c_void,
    weightSpaceSize: usize,
    dweightSpace: *mut ::std::os::raw::c_void,
    workSpaceSize: usize,
    workSpace: *mut ::std::os::raw::c_void,
    reserveSpaceSize: usize,
    reserveSpace: *mut ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnMultiHeadAttnBackwardData(
    handle: cudnnHandle_t,
    attnDesc: cudnnAttnDescriptor_t,
    loWinIdx: *const ::std::os::raw::c_int,
    hiWinIdx: *const ::std::os::raw::c_int,
    devSeqLengthsDQDO: *const ::std::os::raw::c_int,
    devSeqLengthsDKDV: *const ::std::os::raw::c_int,
    doDesc: cudnnSeqDataDescriptor_t,
    dout: *const ::std::os::raw::c_void,
    dqDesc: cudnnSeqDataDescriptor_t,
    dqueries: *mut ::std::os::raw::c_void,
    queries: *const ::std::os::raw::c_void,
    dkDesc: cudnnSeqDataDescriptor_t,
    dkeys: *mut ::std::os::raw::c_void,
    keys: *const ::std::os::raw::c_void,
    dvDesc: cudnnSeqDataDescriptor_t,
    dvalues: *mut ::std::os::raw::c_void,
    values: *const ::std::os::raw::c_void,
    weightSizeInBytes: usize,
    weights: *const ::std::os::raw::c_void,
    workSpaceSizeInBytes: usize,
    workSpace: *mut ::std::os::raw::c_void,
    reserveSpaceSizeInBytes: usize,
    reserveSpace: *mut ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnMultiHeadAttnBackwardWeights(
    handle: cudnnHandle_t,
    attnDesc: cudnnAttnDescriptor_t,
    addGrad: cudnnWgradMode_t,
    qDesc: cudnnSeqDataDescriptor_t,
    queries: *const ::std::os::raw::c_void,
    kDesc: cudnnSeqDataDescriptor_t,
    keys: *const ::std::os::raw::c_void,
    vDesc: cudnnSeqDataDescriptor_t,
    values: *const ::std::os::raw::c_void,
    doDesc: cudnnSeqDataDescriptor_t,
    dout: *const ::std::os::raw::c_void,
    weightSizeInBytes: usize,
    weights: *const ::std::os::raw::c_void,
    dweights: *mut ::std::os::raw::c_void,
    workSpaceSizeInBytes: usize,
    workSpace: *mut ::std::os::raw::c_void,
    reserveSpaceSizeInBytes: usize,
    reserveSpace: *mut ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::unsupported()
}
impl cudnnLossNormalizationMode_t {
    pub const CUDNN_LOSS_NORMALIZATION_NONE: cudnnLossNormalizationMode_t =
        cudnnLossNormalizationMode_t(0);
}
impl cudnnLossNormalizationMode_t {
    pub const CUDNN_LOSS_NORMALIZATION_SOFTMAX: cudnnLossNormalizationMode_t =
        cudnnLossNormalizationMode_t(1);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnLossNormalizationMode_t(pub ::std::os::raw::c_int);

#[no_mangle]
pub extern "system" fn cudnnCreateCTCLossDescriptor(
    ctcLossDesc: *mut cudnnCTCLossDescriptor_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnSetCTCLossDescriptor(
    ctcLossDesc: cudnnCTCLossDescriptor_t,
    compType: cudnnDataType_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnSetCTCLossDescriptorEx(
    ctcLossDesc: cudnnCTCLossDescriptor_t,
    compType: cudnnDataType_t,
    normMode: cudnnLossNormalizationMode_t,
    gradMode: cudnnNanPropagation_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnSetCTCLossDescriptor_v8(
    ctcLossDesc: cudnnCTCLossDescriptor_t,
    compType: cudnnDataType_t,
    normMode: cudnnLossNormalizationMode_t,
    gradMode: cudnnNanPropagation_t,
    maxLabelLength: ::std::os::raw::c_int,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnSetCTCLossDescriptor_v9(
    ctcLossDesc: cudnnCTCLossDescriptor_t,
    compType: cudnnDataType_t,
    normMode: cudnnLossNormalizationMode_t,
    ctcGradMode: cudnnCTCGradMode_t,
    maxLabelLength: ::std::os::raw::c_int,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnGetCTCLossDescriptor(
    ctcLossDesc: cudnnCTCLossDescriptor_t,
    compType: *mut cudnnDataType_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnGetCTCLossDescriptorEx(
    ctcLossDesc: cudnnCTCLossDescriptor_t,
    compType: *mut cudnnDataType_t,
    normMode: *mut cudnnLossNormalizationMode_t,
    gradMode: *mut cudnnNanPropagation_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnGetCTCLossDescriptor_v8(
    ctcLossDesc: cudnnCTCLossDescriptor_t,
    compType: *mut cudnnDataType_t,
    normMode: *mut cudnnLossNormalizationMode_t,
    gradMode: *mut cudnnNanPropagation_t,
    maxLabelLength: *mut ::std::os::raw::c_int,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnGetCTCLossDescriptor_v9(
    ctcLossDesc: cudnnCTCLossDescriptor_t,
    compType: *mut cudnnDataType_t,
    normMode: *mut cudnnLossNormalizationMode_t,
    ctcGradMode: *mut cudnnCTCGradMode_t,
    maxLabelLength: *mut ::std::os::raw::c_int,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnDestroyCTCLossDescriptor(
    ctcLossDesc: cudnnCTCLossDescriptor_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnCTCLoss(
    handle: cudnnHandle_t,
    probsDesc: cudnnTensorDescriptor_t,
    probs: *const ::std::os::raw::c_void,
    hostLabels: *const ::std::os::raw::c_int,
    hostLabelLengths: *const ::std::os::raw::c_int,
    hostInputLengths: *const ::std::os::raw::c_int,
    costs: *mut ::std::os::raw::c_void,
    gradientsDesc: cudnnTensorDescriptor_t,
    gradients: *mut ::std::os::raw::c_void,
    algo: cudnnCTCLossAlgo_t,
    ctcLossDesc: cudnnCTCLossDescriptor_t,
    workspace: *mut ::std::os::raw::c_void,
    workSpaceSizeInBytes: usize,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnCTCLoss_v8(
    handle: cudnnHandle_t,
    algo: cudnnCTCLossAlgo_t,
    ctcLossDesc: cudnnCTCLossDescriptor_t,
    probsDesc: cudnnTensorDescriptor_t,
    probs: *const ::std::os::raw::c_void,
    labels: *const ::std::os::raw::c_int,
    labelLengths: *const ::std::os::raw::c_int,
    inputLengths: *const ::std::os::raw::c_int,
    costs: *mut ::std::os::raw::c_void,
    gradientsDesc: cudnnTensorDescriptor_t,
    gradients: *mut ::std::os::raw::c_void,
    workSpaceSizeInBytes: usize,
    workspace: *mut ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnGetCTCLossWorkspaceSize(
    handle: cudnnHandle_t,
    probsDesc: cudnnTensorDescriptor_t,
    gradientsDesc: cudnnTensorDescriptor_t,
    labels: *const ::std::os::raw::c_int,
    labelLengths: *const ::std::os::raw::c_int,
    inputLengths: *const ::std::os::raw::c_int,
    algo: cudnnCTCLossAlgo_t,
    ctcLossDesc: cudnnCTCLossDescriptor_t,
    sizeInBytes: *mut usize,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnGetCTCLossWorkspaceSize_v8(
    handle: cudnnHandle_t,
    algo: cudnnCTCLossAlgo_t,
    ctcLossDesc: cudnnCTCLossDescriptor_t,
    probsDesc: cudnnTensorDescriptor_t,
    gradientsDesc: cudnnTensorDescriptor_t,
    sizeInBytes: *mut usize,
) -> cudnnStatus_t {
    crate::unsupported()
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnConvolutionStruct {
    _unused: [u8; 0],
}
pub type cudnnConvolutionDescriptor_t = *mut cudnnConvolutionStruct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnConvolutionFwdAlgoPerfStruct {
    pub algo: cudnnConvolutionFwdAlgo_t,
    pub status: cudnnStatus_t,
    pub time: f32,
    pub memory: usize,
    pub determinism: cudnnDeterminism_t,
    pub mathType: cudnnMathType_t,
    pub reserved: [::std::os::raw::c_int; 3usize],
}
pub type cudnnConvolutionFwdAlgoPerf_t = cudnnConvolutionFwdAlgoPerfStruct;

#[no_mangle]
pub unsafe extern "system" fn cudnnCreateConvolutionDescriptor(
    convDesc: *mut cudnnConvolutionDescriptor_t,
) -> cudnnStatus_t {
    crate::cudnn_create_convolution_descriptor(convDesc)
}

#[no_mangle]
pub unsafe extern "system" fn cudnnDestroyConvolutionDescriptor(
    convDesc: cudnnConvolutionDescriptor_t,
) -> cudnnStatus_t {
    crate::destroy_convolution_descriptor(convDesc)
}

#[no_mangle]
pub extern "system" fn cudnnSetConvolutionMathType(
    convDesc: cudnnConvolutionDescriptor_t,
    mathType: cudnnMathType_t,
) -> cudnnStatus_t {
    crate::set_convolution_math_type(convDesc, mathType)
}

#[no_mangle]
pub extern "system" fn cudnnGetConvolutionMathType(
    convDesc: cudnnConvolutionDescriptor_t,
    mathType: *mut cudnnMathType_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub unsafe extern "system" fn cudnnSetConvolutionGroupCount(
    convDesc: cudnnConvolutionDescriptor_t,
    groupCount: ::std::os::raw::c_int,
) -> cudnnStatus_t {
    crate::set_convolution_group_count(convDesc, groupCount)
}

#[no_mangle]
pub extern "system" fn cudnnGetConvolutionGroupCount(
    convDesc: cudnnConvolutionDescriptor_t,
    groupCount: *mut ::std::os::raw::c_int,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnSetConvolutionReorderType(
    convDesc: cudnnConvolutionDescriptor_t,
    reorderType: cudnnReorderType_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnGetConvolutionReorderType(
    convDesc: cudnnConvolutionDescriptor_t,
    reorderType: *mut cudnnReorderType_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub unsafe extern "system" fn cudnnSetConvolution2dDescriptor(
    convDesc: cudnnConvolutionDescriptor_t,
    pad_h: ::std::os::raw::c_int,
    pad_w: ::std::os::raw::c_int,
    u: ::std::os::raw::c_int,
    v: ::std::os::raw::c_int,
    dilation_h: ::std::os::raw::c_int,
    dilation_w: ::std::os::raw::c_int,
    mode: cudnnConvolutionMode_t,
    computeType: cudnnDataType_t,
) -> cudnnStatus_t {
    let pad_a = [pad_h, pad_w];
    let filter_stride_a = [u, v];
    let dilation_a = [dilation_h, dilation_w];
    crate::set_convolution_nd_descriptor(
        convDesc,
        2,
        pad_a.as_ptr(),
        filter_stride_a.as_ptr(),
        dilation_a.as_ptr(),
        mode,
        computeType,
    )
}

#[no_mangle]
pub extern "system" fn cudnnGetConvolution2dDescriptor(
    convDesc: cudnnConvolutionDescriptor_t,
    pad_h: *mut ::std::os::raw::c_int,
    pad_w: *mut ::std::os::raw::c_int,
    u: *mut ::std::os::raw::c_int,
    v: *mut ::std::os::raw::c_int,
    dilation_h: *mut ::std::os::raw::c_int,
    dilation_w: *mut ::std::os::raw::c_int,
    mode: *mut cudnnConvolutionMode_t,
    computeType: *mut cudnnDataType_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub unsafe extern "system" fn cudnnSetConvolutionNdDescriptor(
    convDesc: cudnnConvolutionDescriptor_t,
    arrayLength: ::std::os::raw::c_int,
    padA: *const ::std::os::raw::c_int,
    filterStrideA: *const ::std::os::raw::c_int,
    dilationA: *const ::std::os::raw::c_int,
    mode: cudnnConvolutionMode_t,
    computeType: cudnnDataType_t,
) -> cudnnStatus_t {
    crate::set_convolution_nd_descriptor(
        convDesc,
        arrayLength,
        padA,
        filterStrideA,
        dilationA,
        mode,
        computeType,
    )
}

#[no_mangle]
pub extern "system" fn cudnnGetConvolutionNdDescriptor(
    convDesc: cudnnConvolutionDescriptor_t,
    arrayLengthRequested: ::std::os::raw::c_int,
    arrayLength: *mut ::std::os::raw::c_int,
    padA: *mut ::std::os::raw::c_int,
    strideA: *mut ::std::os::raw::c_int,
    dilationA: *mut ::std::os::raw::c_int,
    mode: *mut cudnnConvolutionMode_t,
    computeType: *mut cudnnDataType_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnGetConvolution2dForwardOutputDim(
    convDesc: cudnnConvolutionDescriptor_t,
    inputTensorDesc: cudnnTensorDescriptor_t,
    filterDesc: cudnnFilterDescriptor_t,
    n: *mut ::std::os::raw::c_int,
    c: *mut ::std::os::raw::c_int,
    h: *mut ::std::os::raw::c_int,
    w: *mut ::std::os::raw::c_int,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub unsafe extern "system" fn cudnnGetConvolutionNdForwardOutputDim(
    convDesc: cudnnConvolutionDescriptor_t,
    inputTensorDesc: cudnnTensorDescriptor_t,
    filterDesc: cudnnFilterDescriptor_t,
    nbDims: ::std::os::raw::c_int,
    tensorOuputDimA: *mut ::std::os::raw::c_int,
) -> cudnnStatus_t {
    crate::get_convolution_nd_forward_output_dim(
        convDesc,
        inputTensorDesc,
        filterDesc,
        nbDims,
        tensorOuputDimA,
    )
}

#[no_mangle]
pub extern "system" fn cudnnGetConvolutionForwardAlgorithmMaxCount(
    handle: cudnnHandle_t,
    count: *mut ::std::os::raw::c_int,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnGetConvolutionForwardAlgorithm_v7(
    handle: cudnnHandle_t,
    srcDesc: cudnnTensorDescriptor_t,
    filterDesc: cudnnFilterDescriptor_t,
    convDesc: cudnnConvolutionDescriptor_t,
    destDesc: cudnnTensorDescriptor_t,
    requestedAlgoCount: ::std::os::raw::c_int,
    returnedAlgoCount: *mut ::std::os::raw::c_int,
    perfResults: *mut cudnnConvolutionFwdAlgoPerf_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub unsafe extern "system" fn cudnnFindConvolutionForwardAlgorithm(
    handle: cudnnHandle_t,
    xDesc: cudnnTensorDescriptor_t,
    wDesc: cudnnFilterDescriptor_t,
    convDesc: cudnnConvolutionDescriptor_t,
    yDesc: cudnnTensorDescriptor_t,
    requestedAlgoCount: ::std::os::raw::c_int,
    returnedAlgoCount: *mut ::std::os::raw::c_int,
    perfResults: *mut cudnnConvolutionFwdAlgoPerf_t,
) -> cudnnStatus_t {
    crate::find_convolution_forward_algorithm(
        handle,
        xDesc,
        wDesc,
        convDesc,
        yDesc,
        requestedAlgoCount,
        returnedAlgoCount,
        perfResults,
    )
}

#[no_mangle]
pub unsafe extern "system" fn cudnnFindConvolutionForwardAlgorithmEx(
    handle: cudnnHandle_t,
    xDesc: cudnnTensorDescriptor_t,
    x: *const ::std::os::raw::c_void,
    wDesc: cudnnFilterDescriptor_t,
    w: *const ::std::os::raw::c_void,
    convDesc: cudnnConvolutionDescriptor_t,
    yDesc: cudnnTensorDescriptor_t,
    y: *mut ::std::os::raw::c_void,
    requestedAlgoCount: ::std::os::raw::c_int,
    returnedAlgoCount: *mut ::std::os::raw::c_int,
    perfResults: *mut cudnnConvolutionFwdAlgoPerf_t,
    workSpace: *mut ::std::os::raw::c_void,
    workSpaceSizeInBytes: usize,
) -> cudnnStatus_t {
    crate::find_convolution_forward_algorithm_ex(
        handle,
        xDesc,
        x,
        wDesc,
        w,
        convDesc,
        yDesc,
        y,
        requestedAlgoCount,
        returnedAlgoCount,
        perfResults,
        workSpace,
        workSpaceSizeInBytes,
    )
}

#[no_mangle]
pub extern "system" fn cudnnIm2Col(
    handle: cudnnHandle_t,
    xDesc: cudnnTensorDescriptor_t,
    x: *const ::std::os::raw::c_void,
    wDesc: cudnnFilterDescriptor_t,
    convDesc: cudnnConvolutionDescriptor_t,
    colBuffer: *mut ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnReorderFilterAndBias(
    handle: cudnnHandle_t,
    filterDesc: cudnnFilterDescriptor_t,
    reorderType: cudnnReorderType_t,
    filterData: *const ::std::os::raw::c_void,
    reorderedFilterData: *mut ::std::os::raw::c_void,
    reorderBias: ::std::os::raw::c_int,
    biasData: *const ::std::os::raw::c_void,
    reorderedBiasData: *mut ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub unsafe extern "system" fn cudnnGetConvolutionForwardWorkspaceSize(
    handle: cudnnHandle_t,
    xDesc: cudnnTensorDescriptor_t,
    wDesc: cudnnFilterDescriptor_t,
    convDesc: cudnnConvolutionDescriptor_t,
    yDesc: cudnnTensorDescriptor_t,
    algo: cudnnConvolutionFwdAlgo_t,
    sizeInBytes: *mut usize,
) -> cudnnStatus_t {
    crate::get_convolution_forward_workspace_size(
        handle,
        xDesc,
        wDesc,
        convDesc,
        yDesc,
        algo,
        sizeInBytes,
    )
}

#[no_mangle]
pub unsafe extern "system" fn cudnnConvolutionForward(
    handle: cudnnHandle_t,
    alpha: *const ::std::os::raw::c_void,
    xDesc: cudnnTensorDescriptor_t,
    x: *const ::std::os::raw::c_void,
    wDesc: cudnnFilterDescriptor_t,
    w: *const ::std::os::raw::c_void,
    convDesc: cudnnConvolutionDescriptor_t,
    algo: cudnnConvolutionFwdAlgo_t,
    workSpace: *mut ::std::os::raw::c_void,
    workSpaceSizeInBytes: usize,
    beta: *const ::std::os::raw::c_void,
    yDesc: cudnnTensorDescriptor_t,
    y: *mut ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::convolution_forward(
        handle,
        alpha,
        xDesc,
        x,
        wDesc,
        w,
        convDesc,
        algo,
        workSpace,
        workSpaceSizeInBytes,
        beta,
        yDesc,
        y,
    )
}

#[no_mangle]
pub extern "system" fn cudnnConvolutionBiasActivationForward(
    handle: cudnnHandle_t,
    alpha1: *const ::std::os::raw::c_void,
    xDesc: cudnnTensorDescriptor_t,
    x: *const ::std::os::raw::c_void,
    wDesc: cudnnFilterDescriptor_t,
    w: *const ::std::os::raw::c_void,
    convDesc: cudnnConvolutionDescriptor_t,
    algo: cudnnConvolutionFwdAlgo_t,
    workSpace: *mut ::std::os::raw::c_void,
    workSpaceSizeInBytes: usize,
    alpha2: *const ::std::os::raw::c_void,
    zDesc: cudnnTensorDescriptor_t,
    z: *const ::std::os::raw::c_void,
    biasDesc: cudnnTensorDescriptor_t,
    bias: *const ::std::os::raw::c_void,
    activationDesc: cudnnActivationDescriptor_t,
    yDesc: cudnnTensorDescriptor_t,
    y: *mut ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::unsupported()
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnConvolutionBwdDataAlgoPerfStruct {
    pub algo: cudnnConvolutionBwdDataAlgo_t,
    pub status: cudnnStatus_t,
    pub time: f32,
    pub memory: usize,
    pub determinism: cudnnDeterminism_t,
    pub mathType: cudnnMathType_t,
    pub reserved: [::std::os::raw::c_int; 3usize],
}
pub type cudnnConvolutionBwdDataAlgoPerf_t = cudnnConvolutionBwdDataAlgoPerfStruct;

#[no_mangle]
pub unsafe extern "system" fn cudnnGetConvolutionBackwardDataAlgorithmMaxCount(
    handle: cudnnHandle_t,
    count: *mut ::std::os::raw::c_int,
) -> cudnnStatus_t {
    crate::get_convolution_backward_data_algorithm_max_count(handle, count)
}

#[no_mangle]
pub extern "system" fn cudnnFindConvolutionBackwardDataAlgorithm(
    handle: cudnnHandle_t,
    wDesc: cudnnFilterDescriptor_t,
    dyDesc: cudnnTensorDescriptor_t,
    convDesc: cudnnConvolutionDescriptor_t,
    dxDesc: cudnnTensorDescriptor_t,
    requestedAlgoCount: ::std::os::raw::c_int,
    returnedAlgoCount: *mut ::std::os::raw::c_int,
    perfResults: *mut cudnnConvolutionBwdDataAlgoPerf_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnFindConvolutionBackwardDataAlgorithmEx(
    handle: cudnnHandle_t,
    wDesc: cudnnFilterDescriptor_t,
    w: *const ::std::os::raw::c_void,
    dyDesc: cudnnTensorDescriptor_t,
    dy: *const ::std::os::raw::c_void,
    convDesc: cudnnConvolutionDescriptor_t,
    dxDesc: cudnnTensorDescriptor_t,
    dx: *mut ::std::os::raw::c_void,
    requestedAlgoCount: ::std::os::raw::c_int,
    returnedAlgoCount: *mut ::std::os::raw::c_int,
    perfResults: *mut cudnnConvolutionBwdDataAlgoPerf_t,
    workSpace: *mut ::std::os::raw::c_void,
    workSpaceSizeInBytes: usize,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub unsafe extern "system" fn cudnnGetConvolutionBackwardDataAlgorithm_v7(
    handle: cudnnHandle_t,
    filterDesc: cudnnFilterDescriptor_t,
    diffDesc: cudnnTensorDescriptor_t,
    convDesc: cudnnConvolutionDescriptor_t,
    gradDesc: cudnnTensorDescriptor_t,
    requestedAlgoCount: ::std::os::raw::c_int,
    returnedAlgoCount: *mut ::std::os::raw::c_int,
    perfResults: *mut cudnnConvolutionBwdDataAlgoPerf_t,
) -> cudnnStatus_t {
    crate::get_convolution_backward_data_algorithm_v7(
        handle,
        filterDesc,
        diffDesc,
        convDesc,
        gradDesc,
        requestedAlgoCount,
        returnedAlgoCount,
        perfResults,
        usize::MAX,
    )
}

#[no_mangle]
pub unsafe extern "system" fn cudnnGetConvolutionBackwardDataWorkspaceSize(
    handle: cudnnHandle_t,
    wDesc: cudnnFilterDescriptor_t,
    dyDesc: cudnnTensorDescriptor_t,
    convDesc: cudnnConvolutionDescriptor_t,
    dxDesc: cudnnTensorDescriptor_t,
    algo: cudnnConvolutionBwdDataAlgo_t,
    sizeInBytes: *mut usize,
) -> cudnnStatus_t {
    crate::get_convolution_backward_data_workspace_size(
        handle,
        wDesc,
        dyDesc,
        convDesc,
        dxDesc,
        algo,
        sizeInBytes,
    )
}

#[no_mangle]
pub unsafe extern "system" fn cudnnConvolutionBackwardData(
    handle: cudnnHandle_t,
    alpha: *const ::std::os::raw::c_void,
    wDesc: cudnnFilterDescriptor_t,
    w: *const ::std::os::raw::c_void,
    dyDesc: cudnnTensorDescriptor_t,
    dy: *const ::std::os::raw::c_void,
    convDesc: cudnnConvolutionDescriptor_t,
    algo: cudnnConvolutionBwdDataAlgo_t,
    workSpace: *mut ::std::os::raw::c_void,
    workSpaceSizeInBytes: usize,
    beta: *const ::std::os::raw::c_void,
    dxDesc: cudnnTensorDescriptor_t,
    dx: *mut ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::convolution_backward_data(
        handle,
        alpha,
        wDesc,
        w,
        dyDesc,
        dy,
        convDesc,
        algo,
        workSpace,
        workSpaceSizeInBytes,
        beta,
        dxDesc,
        dx,
    )
}

#[no_mangle]
pub extern "system" fn cudnnGetFoldedConvBackwardDataDescriptors(
    handle: cudnnHandle_t,
    filterDesc: cudnnFilterDescriptor_t,
    diffDesc: cudnnTensorDescriptor_t,
    convDesc: cudnnConvolutionDescriptor_t,
    gradDesc: cudnnTensorDescriptor_t,
    transformFormat: cudnnTensorFormat_t,
    foldedFilterDesc: cudnnFilterDescriptor_t,
    paddedDiffDesc: cudnnTensorDescriptor_t,
    foldedConvDesc: cudnnConvolutionDescriptor_t,
    foldedGradDesc: cudnnTensorDescriptor_t,
    filterFoldTransDesc: cudnnTensorTransformDescriptor_t,
    diffPadTransDesc: cudnnTensorTransformDescriptor_t,
    gradFoldTransDesc: cudnnTensorTransformDescriptor_t,
    gradUnfoldTransDesc: cudnnTensorTransformDescriptor_t,
) -> cudnnStatus_t {
    crate::unsupported()
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnFusedOpsConstParamStruct {
    _unused: [u8; 0],
}
pub type cudnnFusedOpsConstParamPack_t = *mut cudnnFusedOpsConstParamStruct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnFusedOpsVariantParamStruct {
    _unused: [u8; 0],
}
pub type cudnnFusedOpsVariantParamPack_t = *mut cudnnFusedOpsVariantParamStruct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnFusedOpsPlanStruct {
    _unused: [u8; 0],
}
pub type cudnnFusedOpsPlan_t = *mut cudnnFusedOpsPlanStruct;
impl cudnnFusedOps_t {
    pub const CUDNN_FUSED_SCALE_BIAS_ACTIVATION_CONV_BNSTATS: cudnnFusedOps_t = cudnnFusedOps_t(0);
}
impl cudnnFusedOps_t {
    pub const CUDNN_FUSED_SCALE_BIAS_ACTIVATION_WGRAD: cudnnFusedOps_t = cudnnFusedOps_t(1);
}
impl cudnnFusedOps_t {
    pub const CUDNN_FUSED_BN_FINALIZE_STATISTICS_TRAINING: cudnnFusedOps_t = cudnnFusedOps_t(2);
}
impl cudnnFusedOps_t {
    pub const CUDNN_FUSED_BN_FINALIZE_STATISTICS_INFERENCE: cudnnFusedOps_t = cudnnFusedOps_t(3);
}
impl cudnnFusedOps_t {
    pub const CUDNN_FUSED_CONV_SCALE_BIAS_ADD_ACTIVATION: cudnnFusedOps_t = cudnnFusedOps_t(4);
}
impl cudnnFusedOps_t {
    pub const CUDNN_FUSED_SCALE_BIAS_ADD_ACTIVATION_GEN_BITMASK: cudnnFusedOps_t =
        cudnnFusedOps_t(5);
}
impl cudnnFusedOps_t {
    pub const CUDNN_FUSED_DACTIVATION_FORK_DBATCHNORM: cudnnFusedOps_t = cudnnFusedOps_t(6);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnFusedOps_t(pub ::std::os::raw::c_int);
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_XDESC: cudnnFusedOpsConstParamLabel_t = cudnnFusedOpsConstParamLabel_t(0);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_XDATA_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(1);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_BN_MODE: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(2);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_BN_EQSCALEBIAS_DESC: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(3);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_BN_EQSCALE_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(4);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_BN_EQBIAS_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(5);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_ACTIVATION_DESC: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(6);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_CONV_DESC: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(7);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_WDESC: cudnnFusedOpsConstParamLabel_t = cudnnFusedOpsConstParamLabel_t(8);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_WDATA_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(9);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_DWDESC: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(10);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_DWDATA_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(11);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_YDESC: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(12);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_YDATA_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(13);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_DYDESC: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(14);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_DYDATA_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(15);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_YSTATS_DESC: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(16);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_YSUM_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(17);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_YSQSUM_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(18);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_BN_SCALEBIAS_MEANVAR_DESC: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(19);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_BN_SCALE_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(20);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_BN_BIAS_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(21);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_BN_SAVED_MEAN_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(22);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_BN_SAVED_INVSTD_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(23);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_BN_RUNNING_MEAN_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(24);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_BN_RUNNING_VAR_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(25);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_ZDESC: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(26);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_ZDATA_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(27);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_BN_Z_EQSCALEBIAS_DESC: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(28);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_BN_Z_EQSCALE_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(29);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_BN_Z_EQBIAS_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(30);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_ACTIVATION_BITMASK_DESC: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(31);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_ACTIVATION_BITMASK_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(32);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_DXDESC: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(33);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_DXDATA_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(34);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_DZDESC: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(35);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_DZDATA_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(36);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_BN_DSCALE_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(37);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_BN_DBIAS_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(38);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnFusedOpsConstParamLabel_t(pub ::std::os::raw::c_int);
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_XDATA: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(0);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_BN_EQSCALE: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(1);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_BN_EQBIAS: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(2);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_WDATA: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(3);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_DWDATA: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(4);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_YDATA: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(5);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_DYDATA: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(6);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_YSUM: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(7);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_YSQSUM: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(8);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_WORKSPACE: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(9);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_BN_SCALE: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(10);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_BN_BIAS: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(11);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_BN_SAVED_MEAN: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(12);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_BN_SAVED_INVSTD: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(13);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_BN_RUNNING_MEAN: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(14);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_BN_RUNNING_VAR: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(15);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_ZDATA: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(16);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_BN_Z_EQSCALE: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(17);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_BN_Z_EQBIAS: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(18);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_ACTIVATION_BITMASK: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(19);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_DXDATA: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(20);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_DZDATA: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(21);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_BN_DSCALE: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(22);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_BN_DBIAS: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(23);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_SCALAR_SIZE_T_WORKSPACE_SIZE_IN_BYTES: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(100);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_SCALAR_INT64_T_BN_ACCUMULATION_COUNT: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(101);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_SCALAR_DOUBLE_BN_EXP_AVG_FACTOR: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(102);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_SCALAR_DOUBLE_BN_EPSILON: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(103);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnFusedOpsVariantParamLabel_t(pub ::std::os::raw::c_int);

#[no_mangle]
pub extern "system" fn cudnnCnnVersionCheck() -> cudnnStatus_t {
    crate::unsupported()
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnConvolutionBwdFilterAlgoPerfStruct {
    pub algo: cudnnConvolutionBwdFilterAlgo_t,
    pub status: cudnnStatus_t,
    pub time: f32,
    pub memory: usize,
    pub determinism: cudnnDeterminism_t,
    pub mathType: cudnnMathType_t,
    pub reserved: [::std::os::raw::c_int; 3usize],
}
pub type cudnnConvolutionBwdFilterAlgoPerf_t = cudnnConvolutionBwdFilterAlgoPerfStruct;

#[no_mangle]
pub extern "system" fn cudnnGetConvolutionBackwardFilterAlgorithmMaxCount(
    handle: cudnnHandle_t,
    count: *mut ::std::os::raw::c_int,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnFindConvolutionBackwardFilterAlgorithm(
    handle: cudnnHandle_t,
    xDesc: cudnnTensorDescriptor_t,
    dyDesc: cudnnTensorDescriptor_t,
    convDesc: cudnnConvolutionDescriptor_t,
    dwDesc: cudnnFilterDescriptor_t,
    requestedAlgoCount: ::std::os::raw::c_int,
    returnedAlgoCount: *mut ::std::os::raw::c_int,
    perfResults: *mut cudnnConvolutionBwdFilterAlgoPerf_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnFindConvolutionBackwardFilterAlgorithmEx(
    handle: cudnnHandle_t,
    xDesc: cudnnTensorDescriptor_t,
    x: *const ::std::os::raw::c_void,
    dyDesc: cudnnTensorDescriptor_t,
    y: *const ::std::os::raw::c_void,
    convDesc: cudnnConvolutionDescriptor_t,
    dwDesc: cudnnFilterDescriptor_t,
    dw: *mut ::std::os::raw::c_void,
    requestedAlgoCount: ::std::os::raw::c_int,
    returnedAlgoCount: *mut ::std::os::raw::c_int,
    perfResults: *mut cudnnConvolutionBwdFilterAlgoPerf_t,
    workSpace: *mut ::std::os::raw::c_void,
    workSpaceSizeInBytes: usize,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnGetConvolutionBackwardFilterAlgorithm_v7(
    handle: cudnnHandle_t,
    srcDesc: cudnnTensorDescriptor_t,
    diffDesc: cudnnTensorDescriptor_t,
    convDesc: cudnnConvolutionDescriptor_t,
    gradDesc: cudnnFilterDescriptor_t,
    requestedAlgoCount: ::std::os::raw::c_int,
    returnedAlgoCount: *mut ::std::os::raw::c_int,
    perfResults: *mut cudnnConvolutionBwdFilterAlgoPerf_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnGetConvolutionBackwardFilterWorkspaceSize(
    handle: cudnnHandle_t,
    xDesc: cudnnTensorDescriptor_t,
    dyDesc: cudnnTensorDescriptor_t,
    convDesc: cudnnConvolutionDescriptor_t,
    gradDesc: cudnnFilterDescriptor_t,
    algo: cudnnConvolutionBwdFilterAlgo_t,
    sizeInBytes: *mut usize,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnConvolutionBackwardFilter(
    handle: cudnnHandle_t,
    alpha: *const ::std::os::raw::c_void,
    xDesc: cudnnTensorDescriptor_t,
    x: *const ::std::os::raw::c_void,
    dyDesc: cudnnTensorDescriptor_t,
    dy: *const ::std::os::raw::c_void,
    convDesc: cudnnConvolutionDescriptor_t,
    algo: cudnnConvolutionBwdFilterAlgo_t,
    workSpace: *mut ::std::os::raw::c_void,
    workSpaceSizeInBytes: usize,
    beta: *const ::std::os::raw::c_void,
    dwDesc: cudnnFilterDescriptor_t,
    dw: *mut ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnConvolutionBackwardBias(
    handle: cudnnHandle_t,
    alpha: *const ::std::os::raw::c_void,
    dyDesc: cudnnTensorDescriptor_t,
    dy: *const ::std::os::raw::c_void,
    beta: *const ::std::os::raw::c_void,
    dbDesc: cudnnTensorDescriptor_t,
    db: *mut ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnCreateFusedOpsConstParamPack(
    constPack: *mut cudnnFusedOpsConstParamPack_t,
    ops: cudnnFusedOps_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnDestroyFusedOpsConstParamPack(
    constPack: cudnnFusedOpsConstParamPack_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnSetFusedOpsConstParamPackAttribute(
    constPack: cudnnFusedOpsConstParamPack_t,
    paramLabel: cudnnFusedOpsConstParamLabel_t,
    param: *const ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnGetFusedOpsConstParamPackAttribute(
    constPack: cudnnFusedOpsConstParamPack_t,
    paramLabel: cudnnFusedOpsConstParamLabel_t,
    param: *mut ::std::os::raw::c_void,
    isNULL: *mut ::std::os::raw::c_int,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnCreateFusedOpsVariantParamPack(
    varPack: *mut cudnnFusedOpsVariantParamPack_t,
    ops: cudnnFusedOps_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnDestroyFusedOpsVariantParamPack(
    varPack: cudnnFusedOpsVariantParamPack_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnSetFusedOpsVariantParamPackAttribute(
    varPack: cudnnFusedOpsVariantParamPack_t,
    paramLabel: cudnnFusedOpsVariantParamLabel_t,
    ptr: *mut ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnGetFusedOpsVariantParamPackAttribute(
    varPack: cudnnFusedOpsVariantParamPack_t,
    paramLabel: cudnnFusedOpsVariantParamLabel_t,
    ptr: *mut ::std::os::raw::c_void,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnCreateFusedOpsPlan(
    plan: *mut cudnnFusedOpsPlan_t,
    ops: cudnnFusedOps_t,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnDestroyFusedOpsPlan(plan: cudnnFusedOpsPlan_t) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnMakeFusedOpsPlan(
    handle: cudnnHandle_t,
    plan: cudnnFusedOpsPlan_t,
    constPack: cudnnFusedOpsConstParamPack_t,
    workspaceSizeInBytes: *mut usize,
) -> cudnnStatus_t {
    crate::unsupported()
}

#[no_mangle]
pub extern "system" fn cudnnFusedOpsExecute(
    handle: cudnnHandle_t,
    plan: cudnnFusedOpsPlan_t,
    varPack: cudnnFusedOpsVariantParamPack_t,
) -> cudnnStatus_t {
    crate::unsupported()
}
