/* automatically generated by rust-bindgen 0.66.1 */

#[repr(C)]
#[derive(Copy, Clone)]
pub struct CUstream_st {
    _unused: [u8; 0],
}
#[doc = " CUDA stream"]
pub type cudaStream_t = *mut CUstream_st;
impl libraryPropertyType_t {
    pub const MAJOR_VERSION: libraryPropertyType_t = libraryPropertyType_t(0);
}
impl libraryPropertyType_t {
    pub const MINOR_VERSION: libraryPropertyType_t = libraryPropertyType_t(1);
}
impl libraryPropertyType_t {
    pub const PATCH_LEVEL: libraryPropertyType_t = libraryPropertyType_t(2);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct libraryPropertyType_t(pub ::std::os::raw::c_uint);
pub use self::libraryPropertyType_t as libraryPropertyType;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnContext {
    _unused: [u8; 0],
}
pub type cudnnHandle_t = *mut cudnnContext;
impl cudnnStatus_t {
    pub const CUDNN_STATUS_SUCCESS: cudnnStatus_t = cudnnStatus_t(0);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_NOT_INITIALIZED: cudnnStatus_t = cudnnStatus_t(1);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_ALLOC_FAILED: cudnnStatus_t = cudnnStatus_t(2);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_BAD_PARAM: cudnnStatus_t = cudnnStatus_t(3);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_INTERNAL_ERROR: cudnnStatus_t = cudnnStatus_t(4);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_INVALID_VALUE: cudnnStatus_t = cudnnStatus_t(5);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_ARCH_MISMATCH: cudnnStatus_t = cudnnStatus_t(6);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_MAPPING_ERROR: cudnnStatus_t = cudnnStatus_t(7);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_EXECUTION_FAILED: cudnnStatus_t = cudnnStatus_t(8);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_NOT_SUPPORTED: cudnnStatus_t = cudnnStatus_t(9);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_LICENSE_ERROR: cudnnStatus_t = cudnnStatus_t(10);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_RUNTIME_PREREQUISITE_MISSING: cudnnStatus_t = cudnnStatus_t(11);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_RUNTIME_IN_PROGRESS: cudnnStatus_t = cudnnStatus_t(12);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_RUNTIME_FP_OVERFLOW: cudnnStatus_t = cudnnStatus_t(13);
}
impl cudnnStatus_t {
    pub const CUDNN_STATUS_VERSION_MISMATCH: cudnnStatus_t = cudnnStatus_t(14);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnStatus_t(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnRuntimeTag_t {
    _unused: [u8; 0],
}
impl cudnnErrQueryMode_t {
    pub const CUDNN_ERRQUERY_RAWCODE: cudnnErrQueryMode_t = cudnnErrQueryMode_t(0);
}
impl cudnnErrQueryMode_t {
    pub const CUDNN_ERRQUERY_NONBLOCKING: cudnnErrQueryMode_t = cudnnErrQueryMode_t(1);
}
impl cudnnErrQueryMode_t {
    pub const CUDNN_ERRQUERY_BLOCKING: cudnnErrQueryMode_t = cudnnErrQueryMode_t(2);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnErrQueryMode_t(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnTensorStruct {
    _unused: [u8; 0],
}
pub type cudnnTensorDescriptor_t = *mut cudnnTensorStruct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnPoolingStruct {
    _unused: [u8; 0],
}
pub type cudnnPoolingDescriptor_t = *mut cudnnPoolingStruct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnFilterStruct {
    _unused: [u8; 0],
}
pub type cudnnFilterDescriptor_t = *mut cudnnFilterStruct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnLRNStruct {
    _unused: [u8; 0],
}
pub type cudnnLRNDescriptor_t = *mut cudnnLRNStruct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnActivationStruct {
    _unused: [u8; 0],
}
pub type cudnnActivationDescriptor_t = *mut cudnnActivationStruct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnSpatialTransformerStruct {
    _unused: [u8; 0],
}
pub type cudnnSpatialTransformerDescriptor_t = *mut cudnnSpatialTransformerStruct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnOpTensorStruct {
    _unused: [u8; 0],
}
pub type cudnnOpTensorDescriptor_t = *mut cudnnOpTensorStruct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnReduceTensorStruct {
    _unused: [u8; 0],
}
pub type cudnnReduceTensorDescriptor_t = *mut cudnnReduceTensorStruct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnCTCLossStruct {
    _unused: [u8; 0],
}
pub type cudnnCTCLossDescriptor_t = *mut cudnnCTCLossStruct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnTensorTransformStruct {
    _unused: [u8; 0],
}
pub type cudnnTensorTransformDescriptor_t = *mut cudnnTensorTransformStruct;
impl cudnnDataType_t {
    pub const CUDNN_DATA_FLOAT: cudnnDataType_t = cudnnDataType_t(0);
}
impl cudnnDataType_t {
    pub const CUDNN_DATA_DOUBLE: cudnnDataType_t = cudnnDataType_t(1);
}
impl cudnnDataType_t {
    pub const CUDNN_DATA_HALF: cudnnDataType_t = cudnnDataType_t(2);
}
impl cudnnDataType_t {
    pub const CUDNN_DATA_INT8: cudnnDataType_t = cudnnDataType_t(3);
}
impl cudnnDataType_t {
    pub const CUDNN_DATA_INT32: cudnnDataType_t = cudnnDataType_t(4);
}
impl cudnnDataType_t {
    pub const CUDNN_DATA_INT8x4: cudnnDataType_t = cudnnDataType_t(5);
}
impl cudnnDataType_t {
    pub const CUDNN_DATA_UINT8: cudnnDataType_t = cudnnDataType_t(6);
}
impl cudnnDataType_t {
    pub const CUDNN_DATA_UINT8x4: cudnnDataType_t = cudnnDataType_t(7);
}
impl cudnnDataType_t {
    pub const CUDNN_DATA_INT8x32: cudnnDataType_t = cudnnDataType_t(8);
}
impl cudnnDataType_t {
    pub const CUDNN_DATA_BFLOAT16: cudnnDataType_t = cudnnDataType_t(9);
}
impl cudnnDataType_t {
    pub const CUDNN_DATA_INT64: cudnnDataType_t = cudnnDataType_t(10);
}
impl cudnnDataType_t {
    pub const CUDNN_DATA_BOOLEAN: cudnnDataType_t = cudnnDataType_t(11);
}
impl cudnnDataType_t {
    pub const CUDNN_DATA_FP8_E4M3: cudnnDataType_t = cudnnDataType_t(12);
}
impl cudnnDataType_t {
    pub const CUDNN_DATA_FP8_E5M2: cudnnDataType_t = cudnnDataType_t(13);
}
impl cudnnDataType_t {
    pub const CUDNN_DATA_FAST_FLOAT_FOR_FP8: cudnnDataType_t = cudnnDataType_t(14);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnDataType_t(pub ::std::os::raw::c_uint);
impl cudnnMathType_t {
    pub const CUDNN_DEFAULT_MATH: cudnnMathType_t = cudnnMathType_t(0);
}
impl cudnnMathType_t {
    pub const CUDNN_TENSOR_OP_MATH: cudnnMathType_t = cudnnMathType_t(1);
}
impl cudnnMathType_t {
    pub const CUDNN_TENSOR_OP_MATH_ALLOW_CONVERSION: cudnnMathType_t = cudnnMathType_t(2);
}
impl cudnnMathType_t {
    pub const CUDNN_FMA_MATH: cudnnMathType_t = cudnnMathType_t(3);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnMathType_t(pub ::std::os::raw::c_uint);
impl cudnnNanPropagation_t {
    pub const CUDNN_NOT_PROPAGATE_NAN: cudnnNanPropagation_t = cudnnNanPropagation_t(0);
}
impl cudnnNanPropagation_t {
    pub const CUDNN_PROPAGATE_NAN: cudnnNanPropagation_t = cudnnNanPropagation_t(1);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnNanPropagation_t(pub ::std::os::raw::c_uint);
impl cudnnDeterminism_t {
    pub const CUDNN_NON_DETERMINISTIC: cudnnDeterminism_t = cudnnDeterminism_t(0);
}
impl cudnnDeterminism_t {
    pub const CUDNN_DETERMINISTIC: cudnnDeterminism_t = cudnnDeterminism_t(1);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnDeterminism_t(pub ::std::os::raw::c_uint);
impl cudnnTensorFormat_t {
    pub const CUDNN_TENSOR_NCHW: cudnnTensorFormat_t = cudnnTensorFormat_t(0);
}
impl cudnnTensorFormat_t {
    pub const CUDNN_TENSOR_NHWC: cudnnTensorFormat_t = cudnnTensorFormat_t(1);
}
impl cudnnTensorFormat_t {
    pub const CUDNN_TENSOR_NCHW_VECT_C: cudnnTensorFormat_t = cudnnTensorFormat_t(2);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnTensorFormat_t(pub ::std::os::raw::c_uint);
impl cudnnFoldingDirection_t {
    pub const CUDNN_TRANSFORM_FOLD: cudnnFoldingDirection_t = cudnnFoldingDirection_t(0);
}
impl cudnnFoldingDirection_t {
    pub const CUDNN_TRANSFORM_UNFOLD: cudnnFoldingDirection_t = cudnnFoldingDirection_t(1);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnFoldingDirection_t(pub ::std::os::raw::c_uint);
impl cudnnOpTensorOp_t {
    pub const CUDNN_OP_TENSOR_ADD: cudnnOpTensorOp_t = cudnnOpTensorOp_t(0);
}
impl cudnnOpTensorOp_t {
    pub const CUDNN_OP_TENSOR_MUL: cudnnOpTensorOp_t = cudnnOpTensorOp_t(1);
}
impl cudnnOpTensorOp_t {
    pub const CUDNN_OP_TENSOR_MIN: cudnnOpTensorOp_t = cudnnOpTensorOp_t(2);
}
impl cudnnOpTensorOp_t {
    pub const CUDNN_OP_TENSOR_MAX: cudnnOpTensorOp_t = cudnnOpTensorOp_t(3);
}
impl cudnnOpTensorOp_t {
    pub const CUDNN_OP_TENSOR_SQRT: cudnnOpTensorOp_t = cudnnOpTensorOp_t(4);
}
impl cudnnOpTensorOp_t {
    pub const CUDNN_OP_TENSOR_NOT: cudnnOpTensorOp_t = cudnnOpTensorOp_t(5);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnOpTensorOp_t(pub ::std::os::raw::c_uint);
impl cudnnReduceTensorOp_t {
    pub const CUDNN_REDUCE_TENSOR_ADD: cudnnReduceTensorOp_t = cudnnReduceTensorOp_t(0);
}
impl cudnnReduceTensorOp_t {
    pub const CUDNN_REDUCE_TENSOR_MUL: cudnnReduceTensorOp_t = cudnnReduceTensorOp_t(1);
}
impl cudnnReduceTensorOp_t {
    pub const CUDNN_REDUCE_TENSOR_MIN: cudnnReduceTensorOp_t = cudnnReduceTensorOp_t(2);
}
impl cudnnReduceTensorOp_t {
    pub const CUDNN_REDUCE_TENSOR_MAX: cudnnReduceTensorOp_t = cudnnReduceTensorOp_t(3);
}
impl cudnnReduceTensorOp_t {
    pub const CUDNN_REDUCE_TENSOR_AMAX: cudnnReduceTensorOp_t = cudnnReduceTensorOp_t(4);
}
impl cudnnReduceTensorOp_t {
    pub const CUDNN_REDUCE_TENSOR_AVG: cudnnReduceTensorOp_t = cudnnReduceTensorOp_t(5);
}
impl cudnnReduceTensorOp_t {
    pub const CUDNN_REDUCE_TENSOR_NORM1: cudnnReduceTensorOp_t = cudnnReduceTensorOp_t(6);
}
impl cudnnReduceTensorOp_t {
    pub const CUDNN_REDUCE_TENSOR_NORM2: cudnnReduceTensorOp_t = cudnnReduceTensorOp_t(7);
}
impl cudnnReduceTensorOp_t {
    pub const CUDNN_REDUCE_TENSOR_MUL_NO_ZEROS: cudnnReduceTensorOp_t = cudnnReduceTensorOp_t(8);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnReduceTensorOp_t(pub ::std::os::raw::c_uint);
impl cudnnReduceTensorIndices_t {
    pub const CUDNN_REDUCE_TENSOR_NO_INDICES: cudnnReduceTensorIndices_t =
        cudnnReduceTensorIndices_t(0);
}
impl cudnnReduceTensorIndices_t {
    pub const CUDNN_REDUCE_TENSOR_FLATTENED_INDICES: cudnnReduceTensorIndices_t =
        cudnnReduceTensorIndices_t(1);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnReduceTensorIndices_t(pub ::std::os::raw::c_uint);
impl cudnnIndicesType_t {
    pub const CUDNN_32BIT_INDICES: cudnnIndicesType_t = cudnnIndicesType_t(0);
}
impl cudnnIndicesType_t {
    pub const CUDNN_64BIT_INDICES: cudnnIndicesType_t = cudnnIndicesType_t(1);
}
impl cudnnIndicesType_t {
    pub const CUDNN_16BIT_INDICES: cudnnIndicesType_t = cudnnIndicesType_t(2);
}
impl cudnnIndicesType_t {
    pub const CUDNN_8BIT_INDICES: cudnnIndicesType_t = cudnnIndicesType_t(3);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnIndicesType_t(pub ::std::os::raw::c_uint);
impl cudnnSoftmaxAlgorithm_t {
    pub const CUDNN_SOFTMAX_FAST: cudnnSoftmaxAlgorithm_t = cudnnSoftmaxAlgorithm_t(0);
}
impl cudnnSoftmaxAlgorithm_t {
    pub const CUDNN_SOFTMAX_ACCURATE: cudnnSoftmaxAlgorithm_t = cudnnSoftmaxAlgorithm_t(1);
}
impl cudnnSoftmaxAlgorithm_t {
    pub const CUDNN_SOFTMAX_LOG: cudnnSoftmaxAlgorithm_t = cudnnSoftmaxAlgorithm_t(2);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnSoftmaxAlgorithm_t(pub ::std::os::raw::c_uint);
impl cudnnSoftmaxMode_t {
    pub const CUDNN_SOFTMAX_MODE_INSTANCE: cudnnSoftmaxMode_t = cudnnSoftmaxMode_t(0);
}
impl cudnnSoftmaxMode_t {
    pub const CUDNN_SOFTMAX_MODE_CHANNEL: cudnnSoftmaxMode_t = cudnnSoftmaxMode_t(1);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnSoftmaxMode_t(pub ::std::os::raw::c_uint);
impl cudnnPoolingMode_t {
    pub const CUDNN_POOLING_MAX: cudnnPoolingMode_t = cudnnPoolingMode_t(0);
}
impl cudnnPoolingMode_t {
    pub const CUDNN_POOLING_AVERAGE_COUNT_INCLUDE_PADDING: cudnnPoolingMode_t =
        cudnnPoolingMode_t(1);
}
impl cudnnPoolingMode_t {
    pub const CUDNN_POOLING_AVERAGE_COUNT_EXCLUDE_PADDING: cudnnPoolingMode_t =
        cudnnPoolingMode_t(2);
}
impl cudnnPoolingMode_t {
    pub const CUDNN_POOLING_MAX_DETERMINISTIC: cudnnPoolingMode_t = cudnnPoolingMode_t(3);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnPoolingMode_t(pub ::std::os::raw::c_uint);
impl cudnnActivationMode_t {
    pub const CUDNN_ACTIVATION_SIGMOID: cudnnActivationMode_t = cudnnActivationMode_t(0);
}
impl cudnnActivationMode_t {
    pub const CUDNN_ACTIVATION_RELU: cudnnActivationMode_t = cudnnActivationMode_t(1);
}
impl cudnnActivationMode_t {
    pub const CUDNN_ACTIVATION_TANH: cudnnActivationMode_t = cudnnActivationMode_t(2);
}
impl cudnnActivationMode_t {
    pub const CUDNN_ACTIVATION_CLIPPED_RELU: cudnnActivationMode_t = cudnnActivationMode_t(3);
}
impl cudnnActivationMode_t {
    pub const CUDNN_ACTIVATION_ELU: cudnnActivationMode_t = cudnnActivationMode_t(4);
}
impl cudnnActivationMode_t {
    pub const CUDNN_ACTIVATION_IDENTITY: cudnnActivationMode_t = cudnnActivationMode_t(5);
}
impl cudnnActivationMode_t {
    pub const CUDNN_ACTIVATION_SWISH: cudnnActivationMode_t = cudnnActivationMode_t(6);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnActivationMode_t(pub ::std::os::raw::c_uint);
impl cudnnLRNMode_t {
    pub const CUDNN_LRN_CROSS_CHANNEL_DIM1: cudnnLRNMode_t = cudnnLRNMode_t(0);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnLRNMode_t(pub ::std::os::raw::c_uint);
impl cudnnDivNormMode_t {
    pub const CUDNN_DIVNORM_PRECOMPUTED_MEANS: cudnnDivNormMode_t = cudnnDivNormMode_t(0);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnDivNormMode_t(pub ::std::os::raw::c_uint);
impl cudnnBatchNormMode_t {
    pub const CUDNN_BATCHNORM_PER_ACTIVATION: cudnnBatchNormMode_t = cudnnBatchNormMode_t(0);
}
impl cudnnBatchNormMode_t {
    pub const CUDNN_BATCHNORM_SPATIAL: cudnnBatchNormMode_t = cudnnBatchNormMode_t(1);
}
impl cudnnBatchNormMode_t {
    pub const CUDNN_BATCHNORM_SPATIAL_PERSISTENT: cudnnBatchNormMode_t = cudnnBatchNormMode_t(2);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnBatchNormMode_t(pub ::std::os::raw::c_uint);
impl cudnnBatchNormOps_t {
    pub const CUDNN_BATCHNORM_OPS_BN: cudnnBatchNormOps_t = cudnnBatchNormOps_t(0);
}
impl cudnnBatchNormOps_t {
    pub const CUDNN_BATCHNORM_OPS_BN_ACTIVATION: cudnnBatchNormOps_t = cudnnBatchNormOps_t(1);
}
impl cudnnBatchNormOps_t {
    pub const CUDNN_BATCHNORM_OPS_BN_ADD_ACTIVATION: cudnnBatchNormOps_t = cudnnBatchNormOps_t(2);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnBatchNormOps_t(pub ::std::os::raw::c_uint);
impl cudnnNormMode_t {
    pub const CUDNN_NORM_PER_ACTIVATION: cudnnNormMode_t = cudnnNormMode_t(0);
}
impl cudnnNormMode_t {
    pub const CUDNN_NORM_PER_CHANNEL: cudnnNormMode_t = cudnnNormMode_t(1);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnNormMode_t(pub ::std::os::raw::c_uint);
impl cudnnNormAlgo_t {
    pub const CUDNN_NORM_ALGO_STANDARD: cudnnNormAlgo_t = cudnnNormAlgo_t(0);
}
impl cudnnNormAlgo_t {
    pub const CUDNN_NORM_ALGO_PERSIST: cudnnNormAlgo_t = cudnnNormAlgo_t(1);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnNormAlgo_t(pub ::std::os::raw::c_uint);
impl cudnnNormOps_t {
    pub const CUDNN_NORM_OPS_NORM: cudnnNormOps_t = cudnnNormOps_t(0);
}
impl cudnnNormOps_t {
    pub const CUDNN_NORM_OPS_NORM_ACTIVATION: cudnnNormOps_t = cudnnNormOps_t(1);
}
impl cudnnNormOps_t {
    pub const CUDNN_NORM_OPS_NORM_ADD_ACTIVATION: cudnnNormOps_t = cudnnNormOps_t(2);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnNormOps_t(pub ::std::os::raw::c_uint);
impl cudnnSamplerType_t {
    pub const CUDNN_SAMPLER_BILINEAR: cudnnSamplerType_t = cudnnSamplerType_t(0);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnSamplerType_t(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnDropoutStruct {
    _unused: [u8; 0],
}
pub type cudnnDropoutDescriptor_t = *mut cudnnDropoutStruct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnAlgorithmStruct {
    _unused: [u8; 0],
}
pub type cudnnAlgorithmDescriptor_t = *mut cudnnAlgorithmStruct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnAlgorithmPerformanceStruct {
    _unused: [u8; 0],
}
pub type cudnnAlgorithmPerformance_t = *mut cudnnAlgorithmPerformanceStruct;
impl cudnnConvolutionFwdAlgo_t {
    pub const CUDNN_CONVOLUTION_FWD_ALGO_IMPLICIT_GEMM: cudnnConvolutionFwdAlgo_t =
        cudnnConvolutionFwdAlgo_t(0);
}
impl cudnnConvolutionFwdAlgo_t {
    pub const CUDNN_CONVOLUTION_FWD_ALGO_IMPLICIT_PRECOMP_GEMM: cudnnConvolutionFwdAlgo_t =
        cudnnConvolutionFwdAlgo_t(1);
}
impl cudnnConvolutionFwdAlgo_t {
    pub const CUDNN_CONVOLUTION_FWD_ALGO_GEMM: cudnnConvolutionFwdAlgo_t =
        cudnnConvolutionFwdAlgo_t(2);
}
impl cudnnConvolutionFwdAlgo_t {
    pub const CUDNN_CONVOLUTION_FWD_ALGO_DIRECT: cudnnConvolutionFwdAlgo_t =
        cudnnConvolutionFwdAlgo_t(3);
}
impl cudnnConvolutionFwdAlgo_t {
    pub const CUDNN_CONVOLUTION_FWD_ALGO_FFT: cudnnConvolutionFwdAlgo_t =
        cudnnConvolutionFwdAlgo_t(4);
}
impl cudnnConvolutionFwdAlgo_t {
    pub const CUDNN_CONVOLUTION_FWD_ALGO_FFT_TILING: cudnnConvolutionFwdAlgo_t =
        cudnnConvolutionFwdAlgo_t(5);
}
impl cudnnConvolutionFwdAlgo_t {
    pub const CUDNN_CONVOLUTION_FWD_ALGO_WINOGRAD: cudnnConvolutionFwdAlgo_t =
        cudnnConvolutionFwdAlgo_t(6);
}
impl cudnnConvolutionFwdAlgo_t {
    pub const CUDNN_CONVOLUTION_FWD_ALGO_WINOGRAD_NONFUSED: cudnnConvolutionFwdAlgo_t =
        cudnnConvolutionFwdAlgo_t(7);
}
impl cudnnConvolutionFwdAlgo_t {
    pub const CUDNN_CONVOLUTION_FWD_ALGO_COUNT: cudnnConvolutionFwdAlgo_t =
        cudnnConvolutionFwdAlgo_t(8);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnConvolutionFwdAlgo_t(pub ::std::os::raw::c_uint);
impl cudnnConvolutionBwdFilterAlgo_t {
    pub const CUDNN_CONVOLUTION_BWD_FILTER_ALGO_0: cudnnConvolutionBwdFilterAlgo_t =
        cudnnConvolutionBwdFilterAlgo_t(0);
}
impl cudnnConvolutionBwdFilterAlgo_t {
    pub const CUDNN_CONVOLUTION_BWD_FILTER_ALGO_1: cudnnConvolutionBwdFilterAlgo_t =
        cudnnConvolutionBwdFilterAlgo_t(1);
}
impl cudnnConvolutionBwdFilterAlgo_t {
    pub const CUDNN_CONVOLUTION_BWD_FILTER_ALGO_FFT: cudnnConvolutionBwdFilterAlgo_t =
        cudnnConvolutionBwdFilterAlgo_t(2);
}
impl cudnnConvolutionBwdFilterAlgo_t {
    pub const CUDNN_CONVOLUTION_BWD_FILTER_ALGO_3: cudnnConvolutionBwdFilterAlgo_t =
        cudnnConvolutionBwdFilterAlgo_t(3);
}
impl cudnnConvolutionBwdFilterAlgo_t {
    pub const CUDNN_CONVOLUTION_BWD_FILTER_ALGO_WINOGRAD: cudnnConvolutionBwdFilterAlgo_t =
        cudnnConvolutionBwdFilterAlgo_t(4);
}
impl cudnnConvolutionBwdFilterAlgo_t {
    pub const CUDNN_CONVOLUTION_BWD_FILTER_ALGO_WINOGRAD_NONFUSED: cudnnConvolutionBwdFilterAlgo_t =
        cudnnConvolutionBwdFilterAlgo_t(5);
}
impl cudnnConvolutionBwdFilterAlgo_t {
    pub const CUDNN_CONVOLUTION_BWD_FILTER_ALGO_FFT_TILING: cudnnConvolutionBwdFilterAlgo_t =
        cudnnConvolutionBwdFilterAlgo_t(6);
}
impl cudnnConvolutionBwdFilterAlgo_t {
    pub const CUDNN_CONVOLUTION_BWD_FILTER_ALGO_COUNT: cudnnConvolutionBwdFilterAlgo_t =
        cudnnConvolutionBwdFilterAlgo_t(7);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnConvolutionBwdFilterAlgo_t(pub ::std::os::raw::c_uint);
impl cudnnConvolutionBwdDataAlgo_t {
    pub const CUDNN_CONVOLUTION_BWD_DATA_ALGO_0: cudnnConvolutionBwdDataAlgo_t =
        cudnnConvolutionBwdDataAlgo_t(0);
}
impl cudnnConvolutionBwdDataAlgo_t {
    pub const CUDNN_CONVOLUTION_BWD_DATA_ALGO_1: cudnnConvolutionBwdDataAlgo_t =
        cudnnConvolutionBwdDataAlgo_t(1);
}
impl cudnnConvolutionBwdDataAlgo_t {
    pub const CUDNN_CONVOLUTION_BWD_DATA_ALGO_FFT: cudnnConvolutionBwdDataAlgo_t =
        cudnnConvolutionBwdDataAlgo_t(2);
}
impl cudnnConvolutionBwdDataAlgo_t {
    pub const CUDNN_CONVOLUTION_BWD_DATA_ALGO_FFT_TILING: cudnnConvolutionBwdDataAlgo_t =
        cudnnConvolutionBwdDataAlgo_t(3);
}
impl cudnnConvolutionBwdDataAlgo_t {
    pub const CUDNN_CONVOLUTION_BWD_DATA_ALGO_WINOGRAD: cudnnConvolutionBwdDataAlgo_t =
        cudnnConvolutionBwdDataAlgo_t(4);
}
impl cudnnConvolutionBwdDataAlgo_t {
    pub const CUDNN_CONVOLUTION_BWD_DATA_ALGO_WINOGRAD_NONFUSED: cudnnConvolutionBwdDataAlgo_t =
        cudnnConvolutionBwdDataAlgo_t(5);
}
impl cudnnConvolutionBwdDataAlgo_t {
    pub const CUDNN_CONVOLUTION_BWD_DATA_ALGO_COUNT: cudnnConvolutionBwdDataAlgo_t =
        cudnnConvolutionBwdDataAlgo_t(6);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnConvolutionBwdDataAlgo_t(pub ::std::os::raw::c_uint);
impl cudnnRNNAlgo_t {
    pub const CUDNN_RNN_ALGO_STANDARD: cudnnRNNAlgo_t = cudnnRNNAlgo_t(0);
}
impl cudnnRNNAlgo_t {
    pub const CUDNN_RNN_ALGO_PERSIST_STATIC: cudnnRNNAlgo_t = cudnnRNNAlgo_t(1);
}
impl cudnnRNNAlgo_t {
    pub const CUDNN_RNN_ALGO_PERSIST_DYNAMIC: cudnnRNNAlgo_t = cudnnRNNAlgo_t(2);
}
impl cudnnRNNAlgo_t {
    pub const CUDNN_RNN_ALGO_PERSIST_STATIC_SMALL_H: cudnnRNNAlgo_t = cudnnRNNAlgo_t(3);
}
impl cudnnRNNAlgo_t {
    pub const CUDNN_RNN_ALGO_COUNT: cudnnRNNAlgo_t = cudnnRNNAlgo_t(4);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnRNNAlgo_t(pub ::std::os::raw::c_uint);
impl cudnnCTCLossAlgo_t {
    pub const CUDNN_CTC_LOSS_ALGO_DETERMINISTIC: cudnnCTCLossAlgo_t = cudnnCTCLossAlgo_t(0);
}
impl cudnnCTCLossAlgo_t {
    pub const CUDNN_CTC_LOSS_ALGO_NON_DETERMINISTIC: cudnnCTCLossAlgo_t = cudnnCTCLossAlgo_t(1);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnCTCLossAlgo_t(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnAlgorithmUnionStruct {
    pub algo: cudnnAlgorithmUnionStruct_Algorithm,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cudnnAlgorithmUnionStruct_Algorithm {
    pub convFwdAlgo: cudnnConvolutionFwdAlgo_t,
    pub convBwdFilterAlgo: cudnnConvolutionBwdFilterAlgo_t,
    pub convBwdDataAlgo: cudnnConvolutionBwdDataAlgo_t,
    pub RNNAlgo: cudnnRNNAlgo_t,
    pub CTCLossAlgo: cudnnCTCLossAlgo_t,
}
pub type cudnnAlgorithm_t = cudnnAlgorithmUnionStruct;
impl cudnnSeverity_t {
    pub const CUDNN_SEV_FATAL: cudnnSeverity_t = cudnnSeverity_t(0);
}
impl cudnnSeverity_t {
    pub const CUDNN_SEV_ERROR: cudnnSeverity_t = cudnnSeverity_t(1);
}
impl cudnnSeverity_t {
    pub const CUDNN_SEV_WARNING: cudnnSeverity_t = cudnnSeverity_t(2);
}
impl cudnnSeverity_t {
    pub const CUDNN_SEV_INFO: cudnnSeverity_t = cudnnSeverity_t(3);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnSeverity_t(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnDebugStruct {
    pub cudnn_version: ::std::os::raw::c_uint,
    pub cudnnStatus: cudnnStatus_t,
    pub time_sec: ::std::os::raw::c_uint,
    pub time_usec: ::std::os::raw::c_uint,
    pub time_delta: ::std::os::raw::c_uint,
    pub handle: cudnnHandle_t,
    pub stream: cudaStream_t,
    pub pid: ::std::os::raw::c_ulonglong,
    pub tid: ::std::os::raw::c_ulonglong,
    pub cudaDeviceId: ::std::os::raw::c_int,
    pub reserved: [::std::os::raw::c_int; 15usize],
}
pub type cudnnDebug_t = cudnnDebugStruct;
pub type cudnnCallback_t = ::std::option::Option<
    unsafe extern "C" fn(
        sev: cudnnSeverity_t,
        udata: *mut ::std::os::raw::c_void,
        dbg: *const cudnnDebug_t,
        msg: *const ::std::os::raw::c_char,
    ),
>;
impl cudnnForwardMode_t {
    pub const CUDNN_FWD_MODE_INFERENCE: cudnnForwardMode_t = cudnnForwardMode_t(0);
}
impl cudnnForwardMode_t {
    pub const CUDNN_FWD_MODE_TRAINING: cudnnForwardMode_t = cudnnForwardMode_t(1);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnForwardMode_t(pub ::std::os::raw::c_uint);
impl cudnnRNNMode_t {
    pub const CUDNN_RNN_RELU: cudnnRNNMode_t = cudnnRNNMode_t(0);
}
impl cudnnRNNMode_t {
    pub const CUDNN_RNN_TANH: cudnnRNNMode_t = cudnnRNNMode_t(1);
}
impl cudnnRNNMode_t {
    pub const CUDNN_LSTM: cudnnRNNMode_t = cudnnRNNMode_t(2);
}
impl cudnnRNNMode_t {
    pub const CUDNN_GRU: cudnnRNNMode_t = cudnnRNNMode_t(3);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnRNNMode_t(pub ::std::os::raw::c_uint);
impl cudnnRNNBiasMode_t {
    pub const CUDNN_RNN_NO_BIAS: cudnnRNNBiasMode_t = cudnnRNNBiasMode_t(0);
}
impl cudnnRNNBiasMode_t {
    pub const CUDNN_RNN_SINGLE_INP_BIAS: cudnnRNNBiasMode_t = cudnnRNNBiasMode_t(1);
}
impl cudnnRNNBiasMode_t {
    pub const CUDNN_RNN_DOUBLE_BIAS: cudnnRNNBiasMode_t = cudnnRNNBiasMode_t(2);
}
impl cudnnRNNBiasMode_t {
    pub const CUDNN_RNN_SINGLE_REC_BIAS: cudnnRNNBiasMode_t = cudnnRNNBiasMode_t(3);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnRNNBiasMode_t(pub ::std::os::raw::c_uint);
impl cudnnDirectionMode_t {
    pub const CUDNN_UNIDIRECTIONAL: cudnnDirectionMode_t = cudnnDirectionMode_t(0);
}
impl cudnnDirectionMode_t {
    pub const CUDNN_BIDIRECTIONAL: cudnnDirectionMode_t = cudnnDirectionMode_t(1);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnDirectionMode_t(pub ::std::os::raw::c_uint);
impl cudnnRNNInputMode_t {
    pub const CUDNN_LINEAR_INPUT: cudnnRNNInputMode_t = cudnnRNNInputMode_t(0);
}
impl cudnnRNNInputMode_t {
    pub const CUDNN_SKIP_INPUT: cudnnRNNInputMode_t = cudnnRNNInputMode_t(1);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnRNNInputMode_t(pub ::std::os::raw::c_uint);
impl cudnnRNNClipMode_t {
    pub const CUDNN_RNN_CLIP_NONE: cudnnRNNClipMode_t = cudnnRNNClipMode_t(0);
}
impl cudnnRNNClipMode_t {
    pub const CUDNN_RNN_CLIP_MINMAX: cudnnRNNClipMode_t = cudnnRNNClipMode_t(1);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnRNNClipMode_t(pub ::std::os::raw::c_uint);
impl cudnnRNNDataLayout_t {
    pub const CUDNN_RNN_DATA_LAYOUT_SEQ_MAJOR_UNPACKED: cudnnRNNDataLayout_t =
        cudnnRNNDataLayout_t(0);
}
impl cudnnRNNDataLayout_t {
    pub const CUDNN_RNN_DATA_LAYOUT_SEQ_MAJOR_PACKED: cudnnRNNDataLayout_t =
        cudnnRNNDataLayout_t(1);
}
impl cudnnRNNDataLayout_t {
    pub const CUDNN_RNN_DATA_LAYOUT_BATCH_MAJOR_UNPACKED: cudnnRNNDataLayout_t =
        cudnnRNNDataLayout_t(2);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnRNNDataLayout_t(pub ::std::os::raw::c_uint);
pub type cudnnRNNPaddingMode_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnRNNStruct {
    _unused: [u8; 0],
}
pub type cudnnRNNDescriptor_t = *mut cudnnRNNStruct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnPersistentRNNPlan {
    _unused: [u8; 0],
}
pub type cudnnPersistentRNNPlan_t = *mut cudnnPersistentRNNPlan;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnRNNDataStruct {
    _unused: [u8; 0],
}
pub type cudnnRNNDataDescriptor_t = *mut cudnnRNNDataStruct;
impl cudnnSeqDataAxis_t {
    pub const CUDNN_SEQDATA_TIME_DIM: cudnnSeqDataAxis_t = cudnnSeqDataAxis_t(0);
}
impl cudnnSeqDataAxis_t {
    pub const CUDNN_SEQDATA_BATCH_DIM: cudnnSeqDataAxis_t = cudnnSeqDataAxis_t(1);
}
impl cudnnSeqDataAxis_t {
    pub const CUDNN_SEQDATA_BEAM_DIM: cudnnSeqDataAxis_t = cudnnSeqDataAxis_t(2);
}
impl cudnnSeqDataAxis_t {
    pub const CUDNN_SEQDATA_VECT_DIM: cudnnSeqDataAxis_t = cudnnSeqDataAxis_t(3);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnSeqDataAxis_t(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnSeqDataStruct {
    _unused: [u8; 0],
}
pub type cudnnSeqDataDescriptor_t = *mut cudnnSeqDataStruct;
pub type cudnnAttnQueryMap_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnAttnStruct {
    _unused: [u8; 0],
}
pub type cudnnAttnDescriptor_t = *mut cudnnAttnStruct;
impl cudnnMultiHeadAttnWeightKind_t {
    pub const CUDNN_MH_ATTN_Q_WEIGHTS: cudnnMultiHeadAttnWeightKind_t =
        cudnnMultiHeadAttnWeightKind_t(0);
}
impl cudnnMultiHeadAttnWeightKind_t {
    pub const CUDNN_MH_ATTN_K_WEIGHTS: cudnnMultiHeadAttnWeightKind_t =
        cudnnMultiHeadAttnWeightKind_t(1);
}
impl cudnnMultiHeadAttnWeightKind_t {
    pub const CUDNN_MH_ATTN_V_WEIGHTS: cudnnMultiHeadAttnWeightKind_t =
        cudnnMultiHeadAttnWeightKind_t(2);
}
impl cudnnMultiHeadAttnWeightKind_t {
    pub const CUDNN_MH_ATTN_O_WEIGHTS: cudnnMultiHeadAttnWeightKind_t =
        cudnnMultiHeadAttnWeightKind_t(3);
}
impl cudnnMultiHeadAttnWeightKind_t {
    pub const CUDNN_MH_ATTN_Q_BIASES: cudnnMultiHeadAttnWeightKind_t =
        cudnnMultiHeadAttnWeightKind_t(4);
}
impl cudnnMultiHeadAttnWeightKind_t {
    pub const CUDNN_MH_ATTN_K_BIASES: cudnnMultiHeadAttnWeightKind_t =
        cudnnMultiHeadAttnWeightKind_t(5);
}
impl cudnnMultiHeadAttnWeightKind_t {
    pub const CUDNN_MH_ATTN_V_BIASES: cudnnMultiHeadAttnWeightKind_t =
        cudnnMultiHeadAttnWeightKind_t(6);
}
impl cudnnMultiHeadAttnWeightKind_t {
    pub const CUDNN_MH_ATTN_O_BIASES: cudnnMultiHeadAttnWeightKind_t =
        cudnnMultiHeadAttnWeightKind_t(7);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnMultiHeadAttnWeightKind_t(pub ::std::os::raw::c_uint);
impl cudnnWgradMode_t {
    pub const CUDNN_WGRAD_MODE_ADD: cudnnWgradMode_t = cudnnWgradMode_t(0);
}
impl cudnnWgradMode_t {
    pub const CUDNN_WGRAD_MODE_SET: cudnnWgradMode_t = cudnnWgradMode_t(1);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnWgradMode_t(pub ::std::os::raw::c_uint);
impl cudnnLossNormalizationMode_t {
    pub const CUDNN_LOSS_NORMALIZATION_NONE: cudnnLossNormalizationMode_t =
        cudnnLossNormalizationMode_t(0);
}
impl cudnnLossNormalizationMode_t {
    pub const CUDNN_LOSS_NORMALIZATION_SOFTMAX: cudnnLossNormalizationMode_t =
        cudnnLossNormalizationMode_t(1);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnLossNormalizationMode_t(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnConvolutionStruct {
    _unused: [u8; 0],
}
pub type cudnnConvolutionDescriptor_t = *mut cudnnConvolutionStruct;
impl cudnnConvolutionMode_t {
    pub const CUDNN_CONVOLUTION: cudnnConvolutionMode_t = cudnnConvolutionMode_t(0);
}
impl cudnnConvolutionMode_t {
    pub const CUDNN_CROSS_CORRELATION: cudnnConvolutionMode_t = cudnnConvolutionMode_t(1);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnConvolutionMode_t(pub ::std::os::raw::c_uint);
impl cudnnReorderType_t {
    pub const CUDNN_DEFAULT_REORDER: cudnnReorderType_t = cudnnReorderType_t(0);
}
impl cudnnReorderType_t {
    pub const CUDNN_NO_REORDER: cudnnReorderType_t = cudnnReorderType_t(1);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnReorderType_t(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnConvolutionFwdAlgoPerfStruct {
    pub algo: cudnnConvolutionFwdAlgo_t,
    pub status: cudnnStatus_t,
    pub time: f32,
    pub memory: usize,
    pub determinism: cudnnDeterminism_t,
    pub mathType: cudnnMathType_t,
    pub reserved: [::std::os::raw::c_int; 3usize],
}
pub type cudnnConvolutionFwdAlgoPerf_t = cudnnConvolutionFwdAlgoPerfStruct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnConvolutionBwdDataAlgoPerfStruct {
    pub algo: cudnnConvolutionBwdDataAlgo_t,
    pub status: cudnnStatus_t,
    pub time: f32,
    pub memory: usize,
    pub determinism: cudnnDeterminism_t,
    pub mathType: cudnnMathType_t,
    pub reserved: [::std::os::raw::c_int; 3usize],
}
pub type cudnnConvolutionBwdDataAlgoPerf_t = cudnnConvolutionBwdDataAlgoPerfStruct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnFusedOpsConstParamStruct {
    _unused: [u8; 0],
}
pub type cudnnFusedOpsConstParamPack_t = *mut cudnnFusedOpsConstParamStruct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnFusedOpsVariantParamStruct {
    _unused: [u8; 0],
}
pub type cudnnFusedOpsVariantParamPack_t = *mut cudnnFusedOpsVariantParamStruct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnFusedOpsPlanStruct {
    _unused: [u8; 0],
}
pub type cudnnFusedOpsPlan_t = *mut cudnnFusedOpsPlanStruct;
impl cudnnFusedOps_t {
    pub const CUDNN_FUSED_SCALE_BIAS_ACTIVATION_CONV_BNSTATS: cudnnFusedOps_t = cudnnFusedOps_t(0);
}
impl cudnnFusedOps_t {
    pub const CUDNN_FUSED_SCALE_BIAS_ACTIVATION_WGRAD: cudnnFusedOps_t = cudnnFusedOps_t(1);
}
impl cudnnFusedOps_t {
    pub const CUDNN_FUSED_BN_FINALIZE_STATISTICS_TRAINING: cudnnFusedOps_t = cudnnFusedOps_t(2);
}
impl cudnnFusedOps_t {
    pub const CUDNN_FUSED_BN_FINALIZE_STATISTICS_INFERENCE: cudnnFusedOps_t = cudnnFusedOps_t(3);
}
impl cudnnFusedOps_t {
    pub const CUDNN_FUSED_CONV_SCALE_BIAS_ADD_ACTIVATION: cudnnFusedOps_t = cudnnFusedOps_t(4);
}
impl cudnnFusedOps_t {
    pub const CUDNN_FUSED_SCALE_BIAS_ADD_ACTIVATION_GEN_BITMASK: cudnnFusedOps_t =
        cudnnFusedOps_t(5);
}
impl cudnnFusedOps_t {
    pub const CUDNN_FUSED_DACTIVATION_FORK_DBATCHNORM: cudnnFusedOps_t = cudnnFusedOps_t(6);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnFusedOps_t(pub ::std::os::raw::c_uint);
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_XDESC: cudnnFusedOpsConstParamLabel_t = cudnnFusedOpsConstParamLabel_t(0);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_XDATA_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(1);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_BN_MODE: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(2);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_BN_EQSCALEBIAS_DESC: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(3);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_BN_EQSCALE_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(4);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_BN_EQBIAS_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(5);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_ACTIVATION_DESC: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(6);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_CONV_DESC: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(7);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_WDESC: cudnnFusedOpsConstParamLabel_t = cudnnFusedOpsConstParamLabel_t(8);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_WDATA_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(9);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_DWDESC: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(10);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_DWDATA_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(11);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_YDESC: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(12);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_YDATA_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(13);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_DYDESC: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(14);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_DYDATA_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(15);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_YSTATS_DESC: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(16);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_YSUM_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(17);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_YSQSUM_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(18);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_BN_SCALEBIAS_MEANVAR_DESC: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(19);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_BN_SCALE_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(20);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_BN_BIAS_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(21);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_BN_SAVED_MEAN_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(22);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_BN_SAVED_INVSTD_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(23);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_BN_RUNNING_MEAN_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(24);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_BN_RUNNING_VAR_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(25);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_ZDESC: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(26);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_ZDATA_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(27);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_BN_Z_EQSCALEBIAS_DESC: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(28);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_BN_Z_EQSCALE_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(29);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_BN_Z_EQBIAS_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(30);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_ACTIVATION_BITMASK_DESC: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(31);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_ACTIVATION_BITMASK_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(32);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_DXDESC: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(33);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_DXDATA_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(34);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_DZDESC: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(35);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_DZDATA_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(36);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_BN_DSCALE_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(37);
}
impl cudnnFusedOpsConstParamLabel_t {
    pub const CUDNN_PARAM_BN_DBIAS_PLACEHOLDER: cudnnFusedOpsConstParamLabel_t =
        cudnnFusedOpsConstParamLabel_t(38);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnFusedOpsConstParamLabel_t(pub ::std::os::raw::c_uint);
impl cudnnFusedOpsPointerPlaceHolder_t {
    pub const CUDNN_PTR_NULL: cudnnFusedOpsPointerPlaceHolder_t =
        cudnnFusedOpsPointerPlaceHolder_t(0);
}
impl cudnnFusedOpsPointerPlaceHolder_t {
    pub const CUDNN_PTR_ELEM_ALIGNED: cudnnFusedOpsPointerPlaceHolder_t =
        cudnnFusedOpsPointerPlaceHolder_t(1);
}
impl cudnnFusedOpsPointerPlaceHolder_t {
    pub const CUDNN_PTR_16B_ALIGNED: cudnnFusedOpsPointerPlaceHolder_t =
        cudnnFusedOpsPointerPlaceHolder_t(2);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnFusedOpsPointerPlaceHolder_t(pub ::std::os::raw::c_uint);
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_XDATA: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(0);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_BN_EQSCALE: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(1);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_BN_EQBIAS: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(2);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_WDATA: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(3);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_DWDATA: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(4);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_YDATA: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(5);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_DYDATA: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(6);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_YSUM: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(7);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_YSQSUM: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(8);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_WORKSPACE: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(9);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_BN_SCALE: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(10);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_BN_BIAS: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(11);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_BN_SAVED_MEAN: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(12);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_BN_SAVED_INVSTD: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(13);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_BN_RUNNING_MEAN: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(14);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_BN_RUNNING_VAR: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(15);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_ZDATA: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(16);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_BN_Z_EQSCALE: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(17);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_BN_Z_EQBIAS: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(18);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_ACTIVATION_BITMASK: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(19);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_DXDATA: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(20);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_DZDATA: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(21);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_BN_DSCALE: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(22);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_PTR_BN_DBIAS: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(23);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_SCALAR_SIZE_T_WORKSPACE_SIZE_IN_BYTES: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(100);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_SCALAR_INT64_T_BN_ACCUMULATION_COUNT: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(101);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_SCALAR_DOUBLE_BN_EXP_AVG_FACTOR: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(102);
}
impl cudnnFusedOpsVariantParamLabel_t {
    pub const CUDNN_SCALAR_DOUBLE_BN_EPSILON: cudnnFusedOpsVariantParamLabel_t =
        cudnnFusedOpsVariantParamLabel_t(103);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnFusedOpsVariantParamLabel_t(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnConvolutionBwdFilterAlgoPerfStruct {
    pub algo: cudnnConvolutionBwdFilterAlgo_t,
    pub status: cudnnStatus_t,
    pub time: f32,
    pub memory: usize,
    pub determinism: cudnnDeterminism_t,
    pub mathType: cudnnMathType_t,
    pub reserved: [::std::os::raw::c_int; 3usize],
}
pub type cudnnConvolutionBwdFilterAlgoPerf_t = cudnnConvolutionBwdFilterAlgoPerfStruct;
pub type cudnnBackendDescriptor_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnFractionStruct {
    pub numerator: i64,
    pub denominator: i64,
}
pub type cudnnFraction_t = cudnnFractionStruct;
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_ADD: cudnnPointwiseMode_t = cudnnPointwiseMode_t(0);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_ADD_SQUARE: cudnnPointwiseMode_t = cudnnPointwiseMode_t(5);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_DIV: cudnnPointwiseMode_t = cudnnPointwiseMode_t(6);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_MAX: cudnnPointwiseMode_t = cudnnPointwiseMode_t(3);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_MIN: cudnnPointwiseMode_t = cudnnPointwiseMode_t(2);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_MOD: cudnnPointwiseMode_t = cudnnPointwiseMode_t(7);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_MUL: cudnnPointwiseMode_t = cudnnPointwiseMode_t(1);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_POW: cudnnPointwiseMode_t = cudnnPointwiseMode_t(8);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_SUB: cudnnPointwiseMode_t = cudnnPointwiseMode_t(9);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_ABS: cudnnPointwiseMode_t = cudnnPointwiseMode_t(10);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_CEIL: cudnnPointwiseMode_t = cudnnPointwiseMode_t(11);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_COS: cudnnPointwiseMode_t = cudnnPointwiseMode_t(12);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_EXP: cudnnPointwiseMode_t = cudnnPointwiseMode_t(13);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_FLOOR: cudnnPointwiseMode_t = cudnnPointwiseMode_t(14);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_LOG: cudnnPointwiseMode_t = cudnnPointwiseMode_t(15);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_NEG: cudnnPointwiseMode_t = cudnnPointwiseMode_t(16);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_RSQRT: cudnnPointwiseMode_t = cudnnPointwiseMode_t(17);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_SIN: cudnnPointwiseMode_t = cudnnPointwiseMode_t(18);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_SQRT: cudnnPointwiseMode_t = cudnnPointwiseMode_t(4);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_TAN: cudnnPointwiseMode_t = cudnnPointwiseMode_t(19);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_ERF: cudnnPointwiseMode_t = cudnnPointwiseMode_t(20);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_IDENTITY: cudnnPointwiseMode_t = cudnnPointwiseMode_t(21);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_RECIPROCAL: cudnnPointwiseMode_t = cudnnPointwiseMode_t(22);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_RELU_FWD: cudnnPointwiseMode_t = cudnnPointwiseMode_t(100);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_TANH_FWD: cudnnPointwiseMode_t = cudnnPointwiseMode_t(101);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_SIGMOID_FWD: cudnnPointwiseMode_t = cudnnPointwiseMode_t(102);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_ELU_FWD: cudnnPointwiseMode_t = cudnnPointwiseMode_t(103);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_GELU_FWD: cudnnPointwiseMode_t = cudnnPointwiseMode_t(104);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_SOFTPLUS_FWD: cudnnPointwiseMode_t = cudnnPointwiseMode_t(105);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_SWISH_FWD: cudnnPointwiseMode_t = cudnnPointwiseMode_t(106);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_GELU_APPROX_TANH_FWD: cudnnPointwiseMode_t =
        cudnnPointwiseMode_t(107);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_RELU_BWD: cudnnPointwiseMode_t = cudnnPointwiseMode_t(200);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_TANH_BWD: cudnnPointwiseMode_t = cudnnPointwiseMode_t(201);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_SIGMOID_BWD: cudnnPointwiseMode_t = cudnnPointwiseMode_t(202);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_ELU_BWD: cudnnPointwiseMode_t = cudnnPointwiseMode_t(203);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_GELU_BWD: cudnnPointwiseMode_t = cudnnPointwiseMode_t(204);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_SOFTPLUS_BWD: cudnnPointwiseMode_t = cudnnPointwiseMode_t(205);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_SWISH_BWD: cudnnPointwiseMode_t = cudnnPointwiseMode_t(206);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_GELU_APPROX_TANH_BWD: cudnnPointwiseMode_t =
        cudnnPointwiseMode_t(207);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_CMP_EQ: cudnnPointwiseMode_t = cudnnPointwiseMode_t(300);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_CMP_NEQ: cudnnPointwiseMode_t = cudnnPointwiseMode_t(301);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_CMP_GT: cudnnPointwiseMode_t = cudnnPointwiseMode_t(302);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_CMP_GE: cudnnPointwiseMode_t = cudnnPointwiseMode_t(303);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_CMP_LT: cudnnPointwiseMode_t = cudnnPointwiseMode_t(304);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_CMP_LE: cudnnPointwiseMode_t = cudnnPointwiseMode_t(305);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_LOGICAL_AND: cudnnPointwiseMode_t = cudnnPointwiseMode_t(400);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_LOGICAL_OR: cudnnPointwiseMode_t = cudnnPointwiseMode_t(401);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_LOGICAL_NOT: cudnnPointwiseMode_t = cudnnPointwiseMode_t(402);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_GEN_INDEX: cudnnPointwiseMode_t = cudnnPointwiseMode_t(501);
}
impl cudnnPointwiseMode_t {
    pub const CUDNN_POINTWISE_BINARY_SELECT: cudnnPointwiseMode_t = cudnnPointwiseMode_t(601);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnPointwiseMode_t(pub ::std::os::raw::c_uint);
impl cudnnResampleMode_t {
    pub const CUDNN_RESAMPLE_NEAREST: cudnnResampleMode_t = cudnnResampleMode_t(0);
}
impl cudnnResampleMode_t {
    pub const CUDNN_RESAMPLE_BILINEAR: cudnnResampleMode_t = cudnnResampleMode_t(1);
}
impl cudnnResampleMode_t {
    pub const CUDNN_RESAMPLE_AVGPOOL: cudnnResampleMode_t = cudnnResampleMode_t(2);
}
impl cudnnResampleMode_t {
    pub const CUDNN_RESAMPLE_AVGPOOL_INCLUDE_PADDING: cudnnResampleMode_t = cudnnResampleMode_t(2);
}
impl cudnnResampleMode_t {
    pub const CUDNN_RESAMPLE_AVGPOOL_EXCLUDE_PADDING: cudnnResampleMode_t = cudnnResampleMode_t(4);
}
impl cudnnResampleMode_t {
    pub const CUDNN_RESAMPLE_MAXPOOL: cudnnResampleMode_t = cudnnResampleMode_t(3);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnResampleMode_t(pub ::std::os::raw::c_uint);
impl cudnnSignalMode_t {
    pub const CUDNN_SIGNAL_SET: cudnnSignalMode_t = cudnnSignalMode_t(0);
}
impl cudnnSignalMode_t {
    pub const CUDNN_SIGNAL_WAIT: cudnnSignalMode_t = cudnnSignalMode_t(1);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnSignalMode_t(pub ::std::os::raw::c_uint);
impl cudnnGenStatsMode_t {
    pub const CUDNN_GENSTATS_SUM_SQSUM: cudnnGenStatsMode_t = cudnnGenStatsMode_t(0);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnGenStatsMode_t(pub ::std::os::raw::c_uint);
impl cudnnBnFinalizeStatsMode_t {
    pub const CUDNN_BN_FINALIZE_STATISTICS_TRAINING: cudnnBnFinalizeStatsMode_t =
        cudnnBnFinalizeStatsMode_t(0);
}
impl cudnnBnFinalizeStatsMode_t {
    pub const CUDNN_BN_FINALIZE_STATISTICS_INFERENCE: cudnnBnFinalizeStatsMode_t =
        cudnnBnFinalizeStatsMode_t(1);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnBnFinalizeStatsMode_t(pub ::std::os::raw::c_uint);
impl cudnnRngDistribution_t {
    pub const CUDNN_RNG_DISTRIBUTION_BERNOULLI: cudnnRngDistribution_t = cudnnRngDistribution_t(0);
}
impl cudnnRngDistribution_t {
    pub const CUDNN_RNG_DISTRIBUTION_UNIFORM: cudnnRngDistribution_t = cudnnRngDistribution_t(1);
}
impl cudnnRngDistribution_t {
    pub const CUDNN_RNG_DISTRIBUTION_NORMAL: cudnnRngDistribution_t = cudnnRngDistribution_t(2);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnRngDistribution_t(pub ::std::os::raw::c_uint);
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_POINTWISE_MODE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(0);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_POINTWISE_MATH_PREC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_POINTWISE_NAN_PROPAGATION: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_POINTWISE_RELU_LOWER_CLIP: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(3);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_POINTWISE_RELU_UPPER_CLIP: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(4);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_POINTWISE_RELU_LOWER_CLIP_SLOPE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(5);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_POINTWISE_ELU_ALPHA: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(6);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_POINTWISE_SOFTPLUS_BETA: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(7);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_POINTWISE_SWISH_BETA: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(8);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_POINTWISE_AXIS: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(9);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_CONVOLUTION_COMP_TYPE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(100);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_CONVOLUTION_CONV_MODE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(101);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_CONVOLUTION_DILATIONS: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(102);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_CONVOLUTION_FILTER_STRIDES: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(103);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_CONVOLUTION_POST_PADDINGS: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(104);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_CONVOLUTION_PRE_PADDINGS: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(105);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_CONVOLUTION_SPATIAL_DIMS: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(106);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_ENGINEHEUR_MODE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(200);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_ENGINEHEUR_OPERATION_GRAPH: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(201);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_ENGINEHEUR_RESULTS: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(202);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_ENGINECFG_ENGINE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(300);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_ENGINECFG_INTERMEDIATE_INFO: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(301);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_ENGINECFG_KNOB_CHOICES: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(302);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_EXECUTION_PLAN_HANDLE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(400);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_EXECUTION_PLAN_ENGINE_CONFIG: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(401);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_EXECUTION_PLAN_WORKSPACE_SIZE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(402);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_EXECUTION_PLAN_COMPUTED_INTERMEDIATE_UIDS: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(403);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_EXECUTION_PLAN_RUN_ONLY_INTERMEDIATE_UIDS: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(404);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_EXECUTION_PLAN_JSON_REPRESENTATION: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(405);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_INTERMEDIATE_INFO_UNIQUE_ID: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(500);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_INTERMEDIATE_INFO_SIZE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(501);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_INTERMEDIATE_INFO_DEPENDENT_DATA_UIDS: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(502);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_INTERMEDIATE_INFO_DEPENDENT_ATTRIBUTES: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(503);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_KNOB_CHOICE_KNOB_TYPE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(600);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_KNOB_CHOICE_KNOB_VALUE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(601);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_CONVOLUTION_FORWARD_ALPHA: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(700);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_CONVOLUTION_FORWARD_BETA: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(701);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_CONVOLUTION_FORWARD_CONV_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(702);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_CONVOLUTION_FORWARD_W: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(703);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_CONVOLUTION_FORWARD_X: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(704);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_CONVOLUTION_FORWARD_Y: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(705);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_DATA_ALPHA: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(706);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_DATA_BETA: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(707);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_DATA_CONV_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(708);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_DATA_W: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(709);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_DATA_DX: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(710);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_DATA_DY: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(711);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_FILTER_ALPHA: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(712);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_FILTER_BETA: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(713);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_FILTER_CONV_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(714);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_FILTER_DW: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(715);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_FILTER_X: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(716);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_FILTER_DY: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(717);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_POINTWISE_PW_DESCRIPTOR: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(750);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_POINTWISE_XDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(751);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_POINTWISE_BDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(752);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_POINTWISE_YDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(753);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_POINTWISE_ALPHA1: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(754);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_POINTWISE_ALPHA2: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(755);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_POINTWISE_DXDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(756);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_POINTWISE_DYDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(757);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_POINTWISE_TDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(758);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_GENSTATS_MODE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(770);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_GENSTATS_MATH_PREC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(771);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_GENSTATS_XDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(772);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_GENSTATS_SUMDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(773);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_GENSTATS_SQSUMDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(774);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_STATS_MODE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(780);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_MATH_PREC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(781);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_Y_SUM_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(782);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_Y_SQ_SUM_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(783);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_SCALE_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(784);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_BIAS_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(785);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_PREV_RUNNING_MEAN_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(786);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_PREV_RUNNING_VAR_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(787);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_UPDATED_RUNNING_MEAN_DESC:
        cudnnBackendAttributeName_t = cudnnBackendAttributeName_t(788);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_UPDATED_RUNNING_VAR_DESC:
        cudnnBackendAttributeName_t = cudnnBackendAttributeName_t(789);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_SAVED_MEAN_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(790);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_SAVED_INV_STD_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(791);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_EQ_SCALE_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(792);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_EQ_BIAS_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(793);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_ACCUM_COUNT_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(794);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_EPSILON_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(795);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_EXP_AVERATE_FACTOR_DESC:
        cudnnBackendAttributeName_t = cudnnBackendAttributeName_t(796);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATIONGRAPH_HANDLE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(800);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATIONGRAPH_OPS: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(801);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATIONGRAPH_ENGINE_GLOBAL_COUNT: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(802);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_TENSOR_BYTE_ALIGNMENT: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(900);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_TENSOR_DATA_TYPE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(901);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_TENSOR_DIMENSIONS: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(902);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_TENSOR_STRIDES: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(903);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_TENSOR_VECTOR_COUNT: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(904);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_TENSOR_VECTORIZED_DIMENSION: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(905);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_TENSOR_UNIQUE_ID: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(906);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_TENSOR_IS_VIRTUAL: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(907);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_TENSOR_IS_BY_VALUE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(908);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_TENSOR_REORDERING_MODE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(909);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_TENSOR_RAGGED_OFFSET_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(913);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_VARIANT_PACK_UNIQUE_IDS: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1000);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_VARIANT_PACK_DATA_POINTERS: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1001);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_VARIANT_PACK_INTERMEDIATES: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1002);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_VARIANT_PACK_WORKSPACE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1003);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_LAYOUT_INFO_TENSOR_UID: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1100);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_LAYOUT_INFO_TYPES: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1101);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_KNOB_INFO_TYPE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1200);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_KNOB_INFO_MAXIMUM_VALUE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1201);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_KNOB_INFO_MINIMUM_VALUE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1202);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_KNOB_INFO_STRIDE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1203);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_ENGINE_OPERATION_GRAPH: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1300);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_ENGINE_GLOBAL_INDEX: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1301);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_ENGINE_KNOB_INFO: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1302);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_ENGINE_NUMERICAL_NOTE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1303);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_ENGINE_LAYOUT_INFO: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1304);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_ENGINE_BEHAVIOR_NOTE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1305);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_MATMUL_COMP_TYPE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1500);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_MATMUL_PADDING_VALUE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1503);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_MATMUL_ADESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1520);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_MATMUL_BDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1521);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_MATMUL_CDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1522);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_MATMUL_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1523);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_MATMUL_IRREGULARLY_STRIDED_BATCH_COUNT:
        cudnnBackendAttributeName_t = cudnnBackendAttributeName_t(1524);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_MATMUL_GEMM_M_OVERRIDE_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1525);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_MATMUL_GEMM_N_OVERRIDE_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1526);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_MATMUL_GEMM_K_OVERRIDE_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1527);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_REDUCTION_OPERATOR: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1600);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_REDUCTION_COMP_TYPE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1601);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_REDUCTION_XDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1610);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_REDUCTION_YDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1611);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_REDUCTION_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1612);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_MATH_PREC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1620);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_MEAN_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1621);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_INVSTD_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1622);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_BN_SCALE_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1623);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_X_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1624);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_DY_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1625);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_DBN_SCALE_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1626);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_DBN_BIAS_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1627);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_EQ_DY_SCALE_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1628);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_EQ_X_SCALE_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1629);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_EQ_BIAS: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1630);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_RESAMPLE_MODE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1700);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_RESAMPLE_COMP_TYPE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1701);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_RESAMPLE_SPATIAL_DIMS: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1702);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_RESAMPLE_POST_PADDINGS: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1703);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_RESAMPLE_PRE_PADDINGS: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1704);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_RESAMPLE_STRIDES: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1705);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_RESAMPLE_WINDOW_DIMS: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1706);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_RESAMPLE_NAN_PROPAGATION: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1707);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_RESAMPLE_PADDING_MODE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1708);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_RESAMPLE_FWD_XDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1710);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_RESAMPLE_FWD_YDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1711);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_RESAMPLE_FWD_IDXDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1712);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_RESAMPLE_FWD_ALPHA: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1713);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_RESAMPLE_FWD_BETA: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1714);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_RESAMPLE_FWD_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1716);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_RESAMPLE_BWD_DXDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1720);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_RESAMPLE_BWD_DYDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1721);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_RESAMPLE_BWD_IDXDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1722);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_RESAMPLE_BWD_ALPHA: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1723);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_RESAMPLE_BWD_BETA: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1724);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_RESAMPLE_BWD_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1725);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_RESAMPLE_BWD_XDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1726);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_RESAMPLE_BWD_YDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1727);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_CONCAT_AXIS: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1800);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_CONCAT_INPUT_DESCS: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1801);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_CONCAT_INPLACE_INDEX: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1802);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_CONCAT_OUTPUT_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1803);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_SIGNAL_MODE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1900);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_SIGNAL_FLAGDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1901);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_SIGNAL_VALUE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1902);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_SIGNAL_XDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1903);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_SIGNAL_YDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(1904);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_FWD_MODE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2000);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_FWD_PHASE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2001);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_FWD_XDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2002);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_FWD_MEAN_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2003);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_FWD_INV_VARIANCE_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2004);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_FWD_SCALE_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2005);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_FWD_BIAS_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2006);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_FWD_EPSILON_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2007);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_FWD_EXP_AVG_FACTOR_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2008);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_FWD_INPUT_RUNNING_MEAN_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2009);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_FWD_INPUT_RUNNING_VAR_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2010);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_FWD_OUTPUT_RUNNING_MEAN_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2011);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_FWD_OUTPUT_RUNNING_VAR_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2012);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_FWD_YDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2013);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_FWD_PEER_STAT_DESCS: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2014);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_BWD_MODE: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2100);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_BWD_XDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2101);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_BWD_MEAN_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2102);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_BWD_INV_VARIANCE_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2103);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_BWD_DYDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2104);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_BWD_SCALE_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2105);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_BWD_EPSILON_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2106);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_BWD_DSCALE_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2107);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_BWD_DBIAS_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2108);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_BWD_DXDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2109);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_NORM_BWD_PEER_STAT_DESCS: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2110);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_RESHAPE_XDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2200);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_RESHAPE_YDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2201);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_RNG_DISTRIBUTION: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2300);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_RNG_NORMAL_DIST_MEAN: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2301);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_RNG_NORMAL_DIST_STANDARD_DEVIATION: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2302);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_RNG_UNIFORM_DIST_MAXIMUM: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2303);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_RNG_UNIFORM_DIST_MINIMUM: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2304);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_RNG_BERNOULLI_DIST_PROBABILITY: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2305);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_RNG_YDESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2310);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_RNG_SEED: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2311);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_RNG_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2312);
}
impl cudnnBackendAttributeName_t {
    pub const CUDNN_ATTR_OPERATION_RNG_OFFSET_DESC: cudnnBackendAttributeName_t =
        cudnnBackendAttributeName_t(2313);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnBackendAttributeName_t(pub ::std::os::raw::c_uint);
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_HANDLE: cudnnBackendAttributeType_t = cudnnBackendAttributeType_t(0);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_DATA_TYPE: cudnnBackendAttributeType_t = cudnnBackendAttributeType_t(1);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_BOOLEAN: cudnnBackendAttributeType_t = cudnnBackendAttributeType_t(2);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_INT64: cudnnBackendAttributeType_t = cudnnBackendAttributeType_t(3);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_FLOAT: cudnnBackendAttributeType_t = cudnnBackendAttributeType_t(4);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_DOUBLE: cudnnBackendAttributeType_t = cudnnBackendAttributeType_t(5);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_VOID_PTR: cudnnBackendAttributeType_t = cudnnBackendAttributeType_t(6);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_CONVOLUTION_MODE: cudnnBackendAttributeType_t =
        cudnnBackendAttributeType_t(7);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_HEUR_MODE: cudnnBackendAttributeType_t = cudnnBackendAttributeType_t(8);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_KNOB_TYPE: cudnnBackendAttributeType_t = cudnnBackendAttributeType_t(9);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_NAN_PROPOGATION: cudnnBackendAttributeType_t =
        cudnnBackendAttributeType_t(10);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_NUMERICAL_NOTE: cudnnBackendAttributeType_t =
        cudnnBackendAttributeType_t(11);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_LAYOUT_TYPE: cudnnBackendAttributeType_t = cudnnBackendAttributeType_t(12);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_ATTRIB_NAME: cudnnBackendAttributeType_t = cudnnBackendAttributeType_t(13);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_POINTWISE_MODE: cudnnBackendAttributeType_t =
        cudnnBackendAttributeType_t(14);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_BACKEND_DESCRIPTOR: cudnnBackendAttributeType_t =
        cudnnBackendAttributeType_t(15);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_GENSTATS_MODE: cudnnBackendAttributeType_t =
        cudnnBackendAttributeType_t(16);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_BN_FINALIZE_STATS_MODE: cudnnBackendAttributeType_t =
        cudnnBackendAttributeType_t(17);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_REDUCTION_OPERATOR_TYPE: cudnnBackendAttributeType_t =
        cudnnBackendAttributeType_t(18);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_BEHAVIOR_NOTE: cudnnBackendAttributeType_t =
        cudnnBackendAttributeType_t(19);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_TENSOR_REORDERING_MODE: cudnnBackendAttributeType_t =
        cudnnBackendAttributeType_t(20);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_RESAMPLE_MODE: cudnnBackendAttributeType_t =
        cudnnBackendAttributeType_t(21);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_PADDING_MODE: cudnnBackendAttributeType_t =
        cudnnBackendAttributeType_t(22);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_INT32: cudnnBackendAttributeType_t = cudnnBackendAttributeType_t(23);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_CHAR: cudnnBackendAttributeType_t = cudnnBackendAttributeType_t(24);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_SIGNAL_MODE: cudnnBackendAttributeType_t = cudnnBackendAttributeType_t(25);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_FRACTION: cudnnBackendAttributeType_t = cudnnBackendAttributeType_t(26);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_NORM_MODE: cudnnBackendAttributeType_t = cudnnBackendAttributeType_t(27);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_NORM_FWD_PHASE: cudnnBackendAttributeType_t =
        cudnnBackendAttributeType_t(28);
}
impl cudnnBackendAttributeType_t {
    pub const CUDNN_TYPE_RNG_DISTRIBUTION: cudnnBackendAttributeType_t =
        cudnnBackendAttributeType_t(29);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnBackendAttributeType_t(pub ::std::os::raw::c_uint);
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_POINTWISE_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(0);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_CONVOLUTION_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(1);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_ENGINE_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(2);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_ENGINECFG_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(3);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_ENGINEHEUR_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(4);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_EXECUTION_PLAN_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(5);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_INTERMEDIATE_INFO_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(6);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_KNOB_CHOICE_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(7);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_KNOB_INFO_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(8);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_LAYOUT_INFO_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(9);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_OPERATION_CONVOLUTION_FORWARD_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(10);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_OPERATION_CONVOLUTION_BACKWARD_FILTER_DESCRIPTOR:
        cudnnBackendDescriptorType_t = cudnnBackendDescriptorType_t(11);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_OPERATION_CONVOLUTION_BACKWARD_DATA_DESCRIPTOR:
        cudnnBackendDescriptorType_t = cudnnBackendDescriptorType_t(12);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_OPERATION_POINTWISE_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(13);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_OPERATION_GEN_STATS_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(14);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_OPERATIONGRAPH_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(15);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_VARIANT_PACK_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(16);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_TENSOR_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(17);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_MATMUL_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(18);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_OPERATION_MATMUL_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(19);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_OPERATION_BN_FINALIZE_STATISTICS_DESCRIPTOR:
        cudnnBackendDescriptorType_t = cudnnBackendDescriptorType_t(20);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_REDUCTION_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(21);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_OPERATION_REDUCTION_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(22);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_OPERATION_BN_BWD_WEIGHTS_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(23);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_RESAMPLE_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(24);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_OPERATION_RESAMPLE_FWD_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(25);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_OPERATION_RESAMPLE_BWD_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(26);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_OPERATION_CONCAT_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(27);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_OPERATION_SIGNAL_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(28);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_OPERATION_NORM_FORWARD_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(29);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_OPERATION_NORM_BACKWARD_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(30);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_OPERATION_RESHAPE_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(31);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_RNG_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(32);
}
impl cudnnBackendDescriptorType_t {
    pub const CUDNN_BACKEND_OPERATION_RNG_DESCRIPTOR: cudnnBackendDescriptorType_t =
        cudnnBackendDescriptorType_t(33);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnBackendDescriptorType_t(pub ::std::os::raw::c_uint);
impl cudnnBackendNumericalNote_t {
    pub const CUDNN_NUMERICAL_NOTE_TENSOR_CORE: cudnnBackendNumericalNote_t =
        cudnnBackendNumericalNote_t(0);
}
impl cudnnBackendNumericalNote_t {
    pub const CUDNN_NUMERICAL_NOTE_DOWN_CONVERT_INPUTS: cudnnBackendNumericalNote_t =
        cudnnBackendNumericalNote_t(1);
}
impl cudnnBackendNumericalNote_t {
    pub const CUDNN_NUMERICAL_NOTE_REDUCED_PRECISION_REDUCTION: cudnnBackendNumericalNote_t =
        cudnnBackendNumericalNote_t(2);
}
impl cudnnBackendNumericalNote_t {
    pub const CUDNN_NUMERICAL_NOTE_FFT: cudnnBackendNumericalNote_t =
        cudnnBackendNumericalNote_t(3);
}
impl cudnnBackendNumericalNote_t {
    pub const CUDNN_NUMERICAL_NOTE_NONDETERMINISTIC: cudnnBackendNumericalNote_t =
        cudnnBackendNumericalNote_t(4);
}
impl cudnnBackendNumericalNote_t {
    pub const CUDNN_NUMERICAL_NOTE_WINOGRAD: cudnnBackendNumericalNote_t =
        cudnnBackendNumericalNote_t(5);
}
impl cudnnBackendNumericalNote_t {
    pub const CUDNN_NUMERICAL_NOTE_WINOGRAD_TILE_4x4: cudnnBackendNumericalNote_t =
        cudnnBackendNumericalNote_t(6);
}
impl cudnnBackendNumericalNote_t {
    pub const CUDNN_NUMERICAL_NOTE_WINOGRAD_TILE_6x6: cudnnBackendNumericalNote_t =
        cudnnBackendNumericalNote_t(7);
}
impl cudnnBackendNumericalNote_t {
    pub const CUDNN_NUMERICAL_NOTE_WINOGRAD_TILE_13x13: cudnnBackendNumericalNote_t =
        cudnnBackendNumericalNote_t(8);
}
impl cudnnBackendNumericalNote_t {
    pub const CUDNN_NUMERICAL_NOTE_TYPE_COUNT: cudnnBackendNumericalNote_t =
        cudnnBackendNumericalNote_t(9);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnBackendNumericalNote_t(pub ::std::os::raw::c_uint);
impl cudnnBackendBehaviorNote_t {
    pub const CUDNN_BEHAVIOR_NOTE_RUNTIME_COMPILATION: cudnnBackendBehaviorNote_t =
        cudnnBackendBehaviorNote_t(0);
}
impl cudnnBackendBehaviorNote_t {
    pub const CUDNN_BEHAVIOR_NOTE_REQUIRES_FILTER_INT8x32_REORDER: cudnnBackendBehaviorNote_t =
        cudnnBackendBehaviorNote_t(1);
}
impl cudnnBackendBehaviorNote_t {
    pub const CUDNN_BEHAVIOR_NOTE_REQUIRES_BIAS_INT8x32_REORDER: cudnnBackendBehaviorNote_t =
        cudnnBackendBehaviorNote_t(2);
}
impl cudnnBackendBehaviorNote_t {
    pub const CUDNN_BEHAVIOR_NOTE_TYPE_COUNT: cudnnBackendBehaviorNote_t =
        cudnnBackendBehaviorNote_t(3);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnBackendBehaviorNote_t(pub ::std::os::raw::c_uint);
impl cudnnBackendKnobType_t {
    pub const CUDNN_KNOB_TYPE_SPLIT_K: cudnnBackendKnobType_t = cudnnBackendKnobType_t(0);
}
impl cudnnBackendKnobType_t {
    pub const CUDNN_KNOB_TYPE_SWIZZLE: cudnnBackendKnobType_t = cudnnBackendKnobType_t(1);
}
impl cudnnBackendKnobType_t {
    pub const CUDNN_KNOB_TYPE_TILE_SIZE: cudnnBackendKnobType_t = cudnnBackendKnobType_t(2);
}
impl cudnnBackendKnobType_t {
    pub const CUDNN_KNOB_TYPE_USE_TEX: cudnnBackendKnobType_t = cudnnBackendKnobType_t(3);
}
impl cudnnBackendKnobType_t {
    pub const CUDNN_KNOB_TYPE_EDGE: cudnnBackendKnobType_t = cudnnBackendKnobType_t(4);
}
impl cudnnBackendKnobType_t {
    pub const CUDNN_KNOB_TYPE_KBLOCK: cudnnBackendKnobType_t = cudnnBackendKnobType_t(5);
}
impl cudnnBackendKnobType_t {
    pub const CUDNN_KNOB_TYPE_LDGA: cudnnBackendKnobType_t = cudnnBackendKnobType_t(6);
}
impl cudnnBackendKnobType_t {
    pub const CUDNN_KNOB_TYPE_LDGB: cudnnBackendKnobType_t = cudnnBackendKnobType_t(7);
}
impl cudnnBackendKnobType_t {
    pub const CUDNN_KNOB_TYPE_CHUNK_K: cudnnBackendKnobType_t = cudnnBackendKnobType_t(8);
}
impl cudnnBackendKnobType_t {
    pub const CUDNN_KNOB_TYPE_SPLIT_H: cudnnBackendKnobType_t = cudnnBackendKnobType_t(9);
}
impl cudnnBackendKnobType_t {
    pub const CUDNN_KNOB_TYPE_WINO_TILE: cudnnBackendKnobType_t = cudnnBackendKnobType_t(10);
}
impl cudnnBackendKnobType_t {
    pub const CUDNN_KNOB_TYPE_MULTIPLY: cudnnBackendKnobType_t = cudnnBackendKnobType_t(11);
}
impl cudnnBackendKnobType_t {
    pub const CUDNN_KNOB_TYPE_SPLIT_K_BUF: cudnnBackendKnobType_t = cudnnBackendKnobType_t(12);
}
impl cudnnBackendKnobType_t {
    pub const CUDNN_KNOB_TYPE_TILEK: cudnnBackendKnobType_t = cudnnBackendKnobType_t(13);
}
impl cudnnBackendKnobType_t {
    pub const CUDNN_KNOB_TYPE_STAGES: cudnnBackendKnobType_t = cudnnBackendKnobType_t(14);
}
impl cudnnBackendKnobType_t {
    pub const CUDNN_KNOB_TYPE_REDUCTION_MODE: cudnnBackendKnobType_t = cudnnBackendKnobType_t(15);
}
impl cudnnBackendKnobType_t {
    pub const CUDNN_KNOB_TYPE_CTA_SPLIT_K_MODE: cudnnBackendKnobType_t = cudnnBackendKnobType_t(16);
}
impl cudnnBackendKnobType_t {
    pub const CUDNN_KNOB_TYPE_SPLIT_K_SLC: cudnnBackendKnobType_t = cudnnBackendKnobType_t(17);
}
impl cudnnBackendKnobType_t {
    pub const CUDNN_KNOB_TYPE_IDX_MODE: cudnnBackendKnobType_t = cudnnBackendKnobType_t(18);
}
impl cudnnBackendKnobType_t {
    pub const CUDNN_KNOB_TYPE_SLICED: cudnnBackendKnobType_t = cudnnBackendKnobType_t(19);
}
impl cudnnBackendKnobType_t {
    pub const CUDNN_KNOB_TYPE_SPLIT_RS: cudnnBackendKnobType_t = cudnnBackendKnobType_t(20);
}
impl cudnnBackendKnobType_t {
    pub const CUDNN_KNOB_TYPE_SINGLEBUFFER: cudnnBackendKnobType_t = cudnnBackendKnobType_t(21);
}
impl cudnnBackendKnobType_t {
    pub const CUDNN_KNOB_TYPE_LDGC: cudnnBackendKnobType_t = cudnnBackendKnobType_t(22);
}
impl cudnnBackendKnobType_t {
    pub const CUDNN_KNOB_TYPE_SPECFILT: cudnnBackendKnobType_t = cudnnBackendKnobType_t(23);
}
impl cudnnBackendKnobType_t {
    pub const CUDNN_KNOB_TYPE_KERNEL_CFG: cudnnBackendKnobType_t = cudnnBackendKnobType_t(24);
}
impl cudnnBackendKnobType_t {
    pub const CUDNN_KNOB_TYPE_WORKSPACE: cudnnBackendKnobType_t = cudnnBackendKnobType_t(25);
}
impl cudnnBackendKnobType_t {
    pub const CUDNN_KNOB_TYPE_TILE_CGA: cudnnBackendKnobType_t = cudnnBackendKnobType_t(26);
}
impl cudnnBackendKnobType_t {
    pub const CUDNN_KNOB_TYPE_TILE_CGA_M: cudnnBackendKnobType_t = cudnnBackendKnobType_t(27);
}
impl cudnnBackendKnobType_t {
    pub const CUDNN_KNOB_TYPE_TILE_CGA_N: cudnnBackendKnobType_t = cudnnBackendKnobType_t(28);
}
impl cudnnBackendKnobType_t {
    pub const CUDNN_KNOB_TYPE_BLOCK_SIZE: cudnnBackendKnobType_t = cudnnBackendKnobType_t(29);
}
impl cudnnBackendKnobType_t {
    pub const CUDNN_KNOB_TYPE_OCCUPANCY: cudnnBackendKnobType_t = cudnnBackendKnobType_t(30);
}
impl cudnnBackendKnobType_t {
    pub const CUDNN_KNOB_TYPE_ARRAY_SIZE_PER_THREAD: cudnnBackendKnobType_t =
        cudnnBackendKnobType_t(31);
}
impl cudnnBackendKnobType_t {
    pub const CUDNN_KNOB_TYPE_NUM_C_PER_BLOCK: cudnnBackendKnobType_t = cudnnBackendKnobType_t(32);
}
impl cudnnBackendKnobType_t {
    pub const CUDNN_KNOB_TYPE_COUNTS: cudnnBackendKnobType_t = cudnnBackendKnobType_t(33);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnBackendKnobType_t(pub ::std::os::raw::c_uint);
impl cudnnBackendLayoutType_t {
    pub const CUDNN_LAYOUT_TYPE_PREFERRED_NCHW: cudnnBackendLayoutType_t =
        cudnnBackendLayoutType_t(0);
}
impl cudnnBackendLayoutType_t {
    pub const CUDNN_LAYOUT_TYPE_PREFERRED_NHWC: cudnnBackendLayoutType_t =
        cudnnBackendLayoutType_t(1);
}
impl cudnnBackendLayoutType_t {
    pub const CUDNN_LAYOUT_TYPE_PREFERRED_PAD4CK: cudnnBackendLayoutType_t =
        cudnnBackendLayoutType_t(2);
}
impl cudnnBackendLayoutType_t {
    pub const CUDNN_LAYOUT_TYPE_PREFERRED_PAD8CK: cudnnBackendLayoutType_t =
        cudnnBackendLayoutType_t(3);
}
impl cudnnBackendLayoutType_t {
    pub const CUDNN_LAYOUT_TYPE_COUNT: cudnnBackendLayoutType_t = cudnnBackendLayoutType_t(4);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnBackendLayoutType_t(pub ::std::os::raw::c_uint);
impl cudnnBackendHeurMode_t {
    pub const CUDNN_HEUR_MODE_INSTANT: cudnnBackendHeurMode_t = cudnnBackendHeurMode_t(0);
}
impl cudnnBackendHeurMode_t {
    pub const CUDNN_HEUR_MODE_B: cudnnBackendHeurMode_t = cudnnBackendHeurMode_t(1);
}
impl cudnnBackendHeurMode_t {
    pub const CUDNN_HEUR_MODE_FALLBACK: cudnnBackendHeurMode_t = cudnnBackendHeurMode_t(2);
}
impl cudnnBackendHeurMode_t {
    pub const CUDNN_HEUR_MODE_A: cudnnBackendHeurMode_t = cudnnBackendHeurMode_t(3);
}
impl cudnnBackendHeurMode_t {
    pub const CUDNN_HEUR_MODES_COUNT: cudnnBackendHeurMode_t = cudnnBackendHeurMode_t(4);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnBackendHeurMode_t(pub ::std::os::raw::c_uint);
impl cudnnBackendTensorReordering_t {
    pub const CUDNN_TENSOR_REORDERING_NONE: cudnnBackendTensorReordering_t =
        cudnnBackendTensorReordering_t(0);
}
impl cudnnBackendTensorReordering_t {
    pub const CUDNN_TENSOR_REORDERING_INT8x32: cudnnBackendTensorReordering_t =
        cudnnBackendTensorReordering_t(1);
}
impl cudnnBackendTensorReordering_t {
    pub const CUDNN_TENSOR_REORDERING_F16x16: cudnnBackendTensorReordering_t =
        cudnnBackendTensorReordering_t(2);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnBackendTensorReordering_t(pub ::std::os::raw::c_uint);
impl cudnnPaddingMode_t {
    pub const CUDNN_ZERO_PAD: cudnnPaddingMode_t = cudnnPaddingMode_t(0);
}
impl cudnnPaddingMode_t {
    pub const CUDNN_NEG_INF_PAD: cudnnPaddingMode_t = cudnnPaddingMode_t(1);
}
impl cudnnPaddingMode_t {
    pub const CUDNN_EDGE_VAL_PAD: cudnnPaddingMode_t = cudnnPaddingMode_t(2);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnPaddingMode_t(pub ::std::os::raw::c_uint);
impl cudnnBackendNormMode_t {
    pub const CUDNN_LAYER_NORM: cudnnBackendNormMode_t = cudnnBackendNormMode_t(0);
}
impl cudnnBackendNormMode_t {
    pub const CUDNN_INSTANCE_NORM: cudnnBackendNormMode_t = cudnnBackendNormMode_t(1);
}
impl cudnnBackendNormMode_t {
    pub const CUDNN_BATCH_NORM: cudnnBackendNormMode_t = cudnnBackendNormMode_t(2);
}
impl cudnnBackendNormMode_t {
    pub const CUDNN_GROUP_NORM: cudnnBackendNormMode_t = cudnnBackendNormMode_t(3);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnBackendNormMode_t(pub ::std::os::raw::c_uint);
impl cudnnBackendNormFwdPhase_t {
    pub const CUDNN_NORM_FWD_INFERENCE: cudnnBackendNormFwdPhase_t = cudnnBackendNormFwdPhase_t(0);
}
impl cudnnBackendNormFwdPhase_t {
    pub const CUDNN_NORM_FWD_TRAINING: cudnnBackendNormFwdPhase_t = cudnnBackendNormFwdPhase_t(1);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct cudnnBackendNormFwdPhase_t(pub ::std::os::raw::c_uint);
